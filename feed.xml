

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://4g3nt47.github.io/</id>
  <title>4g3nt47</title>
  <subtitle>A simple blog for InfoSec and other tech-related stuffs!</subtitle>
  <updated>2022-03-27T10:41:21+01:00</updated>
  <author>
    <name>Umar Abdul</name>
    <uri>https://4g3nt47.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://4g3nt47.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://4g3nt47.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2022 Umar Abdul </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Error-based SQL Injection- DVWA</title>
    <link href="https://4g3nt47.github.io/posts/dvwa/dvwa_sqli_error_based.html" rel="alternate" type="text/html" title="Error-based SQL Injection- DVWA" />
    <published>2022-03-27T00:00:00+01:00</published>
  
    <updated>2022-03-27T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/dvwa/dvwa_sqli_error_based.html</id>
    <content src="https://4g3nt47.github.io/posts/dvwa/dvwa_sqli_error_based.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="dvwa" />
    
  

  
    <summary>
      
      This is an exercise in OWASP DVWA for exploiting SQL injection.



Error-based SQL Injection - DVWA


Difficulty: Easy


In this mode, we are presented with a form to enter a user ID, which is used to display the first name and surname of a user;





Adding a single quote to the input gave an SQL error;



This means we have an error-based SQL injection. The payload 1' order by 2-- - didn’t gi...
    </summary>
  

  </entry>

  
  <entry>
    <title>File Upload- DVWA</title>
    <link href="https://4g3nt47.github.io/posts/dvwa/dvwa_file_upload.html" rel="alternate" type="text/html" title="File Upload- DVWA" />
    <published>2022-03-27T00:00:00+01:00</published>
  
    <updated>2022-03-27T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/dvwa/dvwa_file_upload.html</id>
    <content src="https://4g3nt47.github.io/posts/dvwa/dvwa_file_upload.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="dvwa" />
    
  

  
    <summary>
      
      This is an exercise in OWASP DVWA for exploiting file upload vulnerabilities.



File Upload - DVWA


Difficulty: Easy


In this mode, we are presented with a file upload form;



As expected, there is no filter, and I was able to upload a PHP code that execute a bash reverse shell;



The web application is kind enough to give us the path of the upload. Going to the URL, I got a shell on the b...
    </summary>
  

  </entry>

  
  <entry>
    <title>File Inclusion - DVWA</title>
    <link href="https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion.html" rel="alternate" type="text/html" title="File Inclusion - DVWA" />
    <published>2022-03-27T00:00:00+01:00</published>
  
    <updated>2022-03-27T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion.html</id>
    <content src="https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="dvwa" />
    
  

  
    <summary>
      
      This is an exercise in OWASP DVWA for local and remote file inclusion.



File Inclusion - DVWA


Difficulty: Low


In this mode, we are presented with 3 URLs, both of which accept a filename as a value to the GET parameter page;





Changing the value to /etc/hostname gave me the hostname of the box, along with the rest of the page;



That’s cool and all, but we want to see if we can get RCE...
    </summary>
  

  </entry>

  
  <entry>
    <title>CSRF + Stored XSS - DVWA</title>
    <link href="https://4g3nt47.github.io/posts/dvwa/dvwa_csrf_plus_xss.html" rel="alternate" type="text/html" title="CSRF + Stored XSS - DVWA" />
    <published>2022-03-27T00:00:00+01:00</published>
  
    <updated>2022-03-27T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/dvwa/dvwa_csrf_plus_xss.html</id>
    <content src="https://4g3nt47.github.io/posts/dvwa/dvwa_csrf_plus_xss.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="dvwa" />
    
  

  
    <summary>
      
      This is an exercise in OWASP DVWA where I chained Stored XSS with CSRF.



CSRF and Stored XSS - DVWA


For this challenge, we will be chaining the CSRF vulnerability with stored XSS vulnerability since there is no other way to make another user in the application interact with our payload. We will be using the account of smithy, whose password is password, to target the user admin, which I am ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Command Injection - DVWA</title>
    <link href="https://4g3nt47.github.io/posts/dvwa/dvwa_command_injection.html" rel="alternate" type="text/html" title="Command Injection - DVWA" />
    <published>2022-03-27T00:00:00+01:00</published>
  
    <updated>2022-03-27T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/dvwa/dvwa_command_injection.html</id>
    <content src="https://4g3nt47.github.io/posts/dvwa/dvwa_command_injection.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="dvwa" />
    
  

  
    <summary>
      
      This is an exercise in OWASP DVWA for command injection.



Command Injection - DVWA


Difficulty: Easy


This mode gave us an input field for an IP address. Following submission, and a short delay, some output that look to be the result of the ping command was displayed;



The user input is submitted in a POST request;



Since we do know our instance of DVWA is running on a linux host, we we...
    </summary>
  

  </entry>

</feed>

