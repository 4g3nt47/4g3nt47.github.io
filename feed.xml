

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://4g3nt47.github.io/</id>
  <title>4g3nt47</title>
  <subtitle>A simple blog for InfoSec and other tech-related stuffs!</subtitle>
  <updated>2022-04-09T15:37:26+01:00</updated>
  <author>
    <name>Umar Abdul</name>
    <uri>https://4g3nt47.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://4g3nt47.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://4g3nt47.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2022 Umar Abdul </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Overflow - HackTheBox</title>
    <link href="https://4g3nt47.github.io/posts/hackthebox/overflow.html" rel="alternate" type="text/html" title="Overflow - HackTheBox" />
    <published>2022-04-09T00:00:00+01:00</published>
  
    <updated>2022-04-09T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/hackthebox/overflow.html</id>
    <content src="https://4g3nt47.github.io/posts/hackthebox/overflow.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="hackthebox" />
    
  

  
    <summary>
      
      Overflow is an amazing hard-rated box on HackTheBox. To gain a foothold on the box, you will need to exploit an oracle padding vulnerability to gain access to an admin dashboard that’s vulnerable to SQL injection, use the SQL injection to retrieve and crack a hash for another domain, which is vulnerable to an exiftool RCE.

There are two local users on the box; one accessible through password r...
    </summary>
  

  </entry>

  
  <entry>
    <title>Shibboleth - HackTheBox</title>
    <link href="https://4g3nt47.github.io/posts/hackthebox/shibboleth.html" rel="alternate" type="text/html" title="Shibboleth - HackTheBox" />
    <published>2022-04-02T00:00:00+01:00</published>
  
    <updated>2022-04-02T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/hackthebox/shibboleth.html</id>
    <content src="https://4g3nt47.github.io/posts/hackthebox/shibboleth.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="hackthebox" />
    
  

  
    <summary>
      
      Shibboleth is a relatively easy medium linux box. It’s running an instance of Zabbix which you can identify by bruteforcing for hidden subdomains. Once discovered, you need to exploit an ASF-RMCP/IPMI service running on UDP port 623 to extract and crack the hash of an administrator, which will give you access to the Zabbix dashboard. The box itself is configured as a Zabbix agent, so you can us...
    </summary>
  

  </entry>

  
  <entry>
    <title>Error-based SQL Injection- DVWA</title>
    <link href="https://4g3nt47.github.io/posts/dvwa/dvwa_sqli_error_based.html" rel="alternate" type="text/html" title="Error-based SQL Injection- DVWA" />
    <published>2022-03-27T00:00:00+01:00</published>
  
    <updated>2022-03-27T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/dvwa/dvwa_sqli_error_based.html</id>
    <content src="https://4g3nt47.github.io/posts/dvwa/dvwa_sqli_error_based.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="dvwa" />
    
  

  
    <summary>
      
      This is an exercise in OWASP DVWA for exploiting SQL injection.



Error-based SQL Injection - DVWA


Difficulty: Easy


In this mode, we are presented with a form to enter a user ID, which is used to display the first name and surname of a user;





Adding a single quote to the input gave an SQL error;



This means we have an error-based SQL injection. The payload 1' order by 2-- - didn’t gi...
    </summary>
  

  </entry>

  
  <entry>
    <title>File Upload- DVWA</title>
    <link href="https://4g3nt47.github.io/posts/dvwa/dvwa_file_upload.html" rel="alternate" type="text/html" title="File Upload- DVWA" />
    <published>2022-03-27T00:00:00+01:00</published>
  
    <updated>2022-03-27T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/dvwa/dvwa_file_upload.html</id>
    <content src="https://4g3nt47.github.io/posts/dvwa/dvwa_file_upload.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="dvwa" />
    
  

  
    <summary>
      
      This is an exercise in OWASP DVWA for exploiting file upload vulnerabilities.



File Upload - DVWA


Difficulty: Easy


In this mode, we are presented with a file upload form;



As expected, there is no filter, and I was able to upload a PHP code that execute a bash reverse shell;



The web application is kind enough to give us the path of the upload. Going to the URL, I got a shell on the b...
    </summary>
  

  </entry>

  
  <entry>
    <title>File Inclusion - DVWA</title>
    <link href="https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion.html" rel="alternate" type="text/html" title="File Inclusion - DVWA" />
    <published>2022-03-27T00:00:00+01:00</published>
  
    <updated>2022-03-27T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion.html</id>
    <content src="https://4g3nt47.github.io/posts/dvwa/dvwa_file_inclusion.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="dvwa" />
    
  

  
    <summary>
      
      This is an exercise in OWASP DVWA for local and remote file inclusion.



File Inclusion - DVWA


Difficulty: Low


In this mode, we are presented with 3 URLs, both of which accept a filename as a value to the GET parameter page;





Changing the value to /etc/hostname gave me the hostname of the box, along with the rest of the page;



That’s cool and all, but we want to see if we can get RCE...
    </summary>
  

  </entry>

</feed>

