

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://4g3nt47.github.io/</id>
  <title>4g3nt47</title>
  <subtitle>A blog for infosec stuff.</subtitle>
  <updated>2024-05-09T11:18:09+01:00</updated>
  <author>
    <name>Umar Abdul</name>
    <uri>https://4g3nt47.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://4g3nt47.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://4g3nt47.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2024 Umar Abdul </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Injectable Shellcodes: The ADDRESS Challenge</title>
    <link href="https://4g3nt47.github.io/posts/shellcoding/shellcoding_addr_chall.html" rel="alternate" type="text/html" title="Injectable Shellcodes: The ADDRESS Challenge" />
    <published>2024-05-09T00:00:00+01:00</published>
  
    <updated>2024-05-09T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/shellcoding/shellcoding_addr_chall.html</id>
    <content src="https://4g3nt47.github.io/posts/shellcoding/shellcoding_addr_chall.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="shellcoding" />
    
  

  
    <summary>
      
      One challenging aspect of creating a shellcode is dealing with addresses. Your shellcode will often need to reference certain locations, which gets complicated when working in the context of the program you are injecting into. These problems can be solved using a few tricks;



The JMP + CALL trick

One simple way of solving address challenges when writing a shellcode is by taking advantage of ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Introduction to Format Strings Vulnerabilities</title>
    <link href="https://4g3nt47.github.io/posts/binary%20exploitation/format_strings_intro.html" rel="alternate" type="text/html" title="Introduction to Format Strings Vulnerabilities" />
    <published>2024-05-09T00:00:00+01:00</published>
  
    <updated>2024-05-09T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/binary%20exploitation/format_strings_intro.html</id>
    <content src="https://4g3nt47.github.io/posts/binary%20exploitation/format_strings_intro.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="binary exploitation" />
    
  

  
    <summary>
      
      A format string is, simply put, a string that is used to format dynamic data for display. They are typically used to avoid hard-coding variables into a string, and also allows the programmer to specify the format in which specific data is to be displayed. Example: You are making a social media application and you want to display the username of a user when they open their profile. A minimalisti...
    </summary>
  

  </entry>

  
  <entry>
    <title>Zipping - HackTheBox</title>
    <link href="https://4g3nt47.github.io/posts/hackthebox/zipping.html" rel="alternate" type="text/html" title="Zipping - HackTheBox" />
    <published>2023-10-22T00:00:00+01:00</published>
  
    <updated>2023-10-22T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/hackthebox/zipping.html</id>
    <content src="https://4g3nt47.github.io/posts/hackthebox/zipping.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="hackthebox" />
    
  

  
    <summary>
      
      Zipping is a nice medium linux box on HackTheBox. It starts with exploiting a descrepancy on how gz (CLI) and ZipArchive (PHP) works to fool the web app into extracting a ZIP file containing a PHP file thinking it’s a PDF. This approach turns out to be unintended, but I liked it more. Privesc to root is through dynamic import hijack with dlopen().



Info








Recon


NMAP


# Nmap 7.80 scan...
    </summary>
  

  </entry>

  
  <entry>
    <title>Topology - HackTheBox</title>
    <link href="https://4g3nt47.github.io/posts/hackthebox/topology.html" rel="alternate" type="text/html" title="Topology - HackTheBox" />
    <published>2023-10-22T00:00:00+01:00</published>
  
    <updated>2023-10-22T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/hackthebox/topology.html</id>
    <content src="https://4g3nt47.github.io/posts/hackthebox/topology.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="hackthebox" />
    
  

  
    <summary>
      
      Topology is an easy linux machine on HackTheBox. It starts with exploiting a custom LaTeX parser to get LFI and leak creds to get a foothold on the box. Root involves exploiting gnuplot.



Info









Recon


NMAP


(Scan missed port 22 for some reason, but it’s open)

# Nmap 7.80 scan initiated Wed Aug 16 23:23:05 2023 as: nmap -sC -sV -oN nmap.txt -v -T5 -Pn 10.10.11.217
Warning: 10.10.11....
    </summary>
  

  </entry>

  
  <entry>
    <title>Sau - HackTheBox</title>
    <link href="https://4g3nt47.github.io/posts/hackthebox/sau.html" rel="alternate" type="text/html" title="Sau - HackTheBox" />
    <published>2023-10-22T00:00:00+01:00</published>
  
    <updated>2023-10-22T00:00:00+01:00</updated>
  
    <id>https://4g3nt47.github.io/posts/hackthebox/sau.html</id>
    <content src="https://4g3nt47.github.io/posts/hackthebox/sau.html" />
    <author>
      <name>Umar Abdul</name>
    </author>

  
    
    <category term="hackthebox" />
    
  

  
    <summary>
      
      Sau is probably the shortest box ever released on HackTheBox. Foothold involves exploiting Request Baskets to access a hidden instance of Maltrail, which is vulnerable to RCE. Privesc is through the linux CLI pager invoked by systemctl.



Info










Recon


NMAP


# Nmap 7.80 scan initiated Wed Aug 16 17:59:21 2023 as: nmap -sS -p- -v -oN nmap-all.txt -min-rate 500 10.10.11.224
Nmap scan r...
    </summary>
  

  </entry>

</feed>

